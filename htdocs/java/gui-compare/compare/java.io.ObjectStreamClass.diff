--- /home/tromey/gnu/Nightly/classpath/classpath/java/io/ObjectStreamClass.java	2004-07-24 02:24:53.000000000 -0600
+++ java/io/ObjectStreamClass.java	2004-07-22 11:06:28.000000000 -0600
@@ -57,7 +57,6 @@
 import java.util.Vector;
 import gnu.java.io.NullOutputStream;
 import gnu.java.lang.reflect.TypeSignature;
-import gnu.java.security.action.SetAccessibleAction;
 import gnu.java.security.provider.Gnu;
 
 
@@ -471,8 +470,14 @@
 		    }
 		}
 		final Method m = methods[i];
-		SetAccessibleAction setAccessible = new SetAccessibleAction(m);
-		AccessController.doPrivileged(setAccessible);
+		AccessController.doPrivileged(new PrivilegedAction()
+		{
+		    public Object run()
+		    {
+			m.setAccessible(true);
+			return null;
+		    }
+		});
 		return m;
 	    }
 	}
@@ -538,8 +543,6 @@
   // clazz.
   private void setFields(Class cl)
   {
-    SetAccessibleAction setAccessible = new SetAccessibleAction();
-
     if (!isSerializable() || isExternalizable())
       {
 	fields = NO_FIELDS;
@@ -548,11 +551,17 @@
 
     try
       {
-	final Field f =
+	final Field serialPersistentFields =
 	  cl.getDeclaredField("serialPersistentFields");
-	setAccessible.setMember(f);
-	AccessController.doPrivileged(setAccessible);
-	int modifiers = f.getModifiers();
+	AccessController.doPrivileged(new PrivilegedAction()
+	{
+	    public Object run()
+	    {
+		serialPersistentFields.setAccessible(true);
+		return null;
+	    }
+	});
+	int modifiers = serialPersistentFields.getModifiers();
 
 	if (Modifier.isStatic(modifiers)
 	    && Modifier.isFinal(modifiers)
@@ -608,8 +617,14 @@
       if (all_fields[from] != null)
 	{
 	  final Field f = all_fields[from];
-	  setAccessible.setMember(f);
-	  AccessController.doPrivileged(setAccessible);
+	  AccessController.doPrivileged(new PrivilegedAction()
+	  {
+	      public Object run()
+	      {
+		  f.setAccessible(true);
+		  return null;
+	      }
+	  });
 	  fields[to] = new ObjectStreamField(all_fields[from]);
 	  to++;
 	}
@@ -636,8 +651,14 @@
 	// may not be public AND we only want the serialVersionUID of this
 	// class, not a superclass or interface.
 	final Field suid = cl.getDeclaredField("serialVersionUID");
-	SetAccessibleAction setAccessible = new SetAccessibleAction(suid);
-	AccessController.doPrivileged(setAccessible);
+	AccessController.doPrivileged(new PrivilegedAction()
+	{
+	    public Object run()
+	    {
+		suid.setAccessible(true);
+		return null;
+	    }
+	});
 	int modifiers = suid.getModifiers();
 
 	if (Modifier.isStatic(modifiers)
@@ -811,54 +832,6 @@
     return fieldsArray;
   }
 
-  /**
-   * Returns a new instance of the Class this ObjectStreamClass corresponds
-   * to.
-   * Note that this should only be used for Externalizable classes.
-   *
-   * @return A new instance.
-   */
-  Externalizable newInstance() throws InvalidClassException
-  {
-    synchronized(this)
-    {
-	if (constructor == null)
-	{
-	    try
-	    {
-		final Constructor c = clazz.getConstructor(new Class[0]);
-
-		AccessController.doPrivileged(new PrivilegedAction()
-		{
-		    public Object run()
-		    {
-			c.setAccessible(true);
-			return null;
-		    }
-		});
-
-		constructor = c;
-	    }
-	    catch(NoSuchMethodException x)
-	    {
-		throw new InvalidClassException(clazz.getName(),
-		    "No public zero-argument constructor");
-	    }
-	}
-    }
-
-    try
-    {
-	return (Externalizable)constructor.newInstance(null);
-    }
-    catch(Throwable t)
-    {
-	throw (InvalidClassException)
-	    new InvalidClassException(clazz.getName(),
-		     "Unable to instantiate").initCause(t);
-    }
-  }
-
   public static final ObjectStreamField[] NO_FIELDS = {};
 
   private static Hashtable classLookupTable = new Hashtable();
@@ -888,7 +861,6 @@
   boolean realClassIsExternalizable;
   ObjectStreamField[] fieldMapping;
   Class firstNonSerializableParent;
-  private Constructor constructor;  // default constructor for Externalizable
 
   boolean isProxyClass = false;
 
