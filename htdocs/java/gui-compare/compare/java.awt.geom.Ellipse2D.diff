--- /home/tromey/gnu/Nightly/classpath/classpath/java/awt/geom/Ellipse2D.java	2004-09-13 02:44:26.000000000 -0600
+++ java/awt/geom/Ellipse2D.java	2004-09-04 02:24:39.000000000 -0600
@@ -101,9 +101,6 @@
    * Note: An ellipse cannot be represented exactly in PathIterator
    * segments, the outline is thefore approximated with cubic
    * Bezier segments.
-   * 
-   * @param at an optional transform.
-   * @return A path iterator.
    */
   public PathIterator getPathIterator(AffineTransform at)
   {
@@ -142,10 +139,6 @@
     return false;
   }
 
-  /**
-   * An {@link Ellipse2D} that stores its coordinates using <code>double</code>
-   * primitives.
-   */
   public static class Double extends Ellipse2D
   {
     /**
@@ -169,7 +162,7 @@
     public double y;
 
     /**
-     * Creates a new Ellipse2D with an upper-left coordinate of (0,0)
+     * Creates a new Ellipse2D with an upper-right coordinate of (0,0)
      * and a zero size.
      */
     public Double()
@@ -179,10 +172,11 @@
     /**
      * Creates a new Ellipse2D within a given rectangle
      * using double-precision coordinates.<P>
-     * @param x - x coordinate of the upper-left of the bounding rectangle
-     * @param y - y coordinate of the upper-left of the bounding rectangle
+     * @param x - x coordinate of the upper-right of the bounding rectangle
+     * @param y - y coordinate of the upper-right of the bounding rectangle
      * @param w - width of the ellipse
      * @param h - height of the ellipse
+     *
      */
     public Double(double x, double y, double w, double h)
     {
@@ -194,7 +188,6 @@
 
     /**
      * Returns the bounding-box of the ellipse.
-     * @return The bounding box.
      */
     public Rectangle2D getBounds2D()
     {
@@ -203,7 +196,6 @@
 
     /**
      * Returns the height of the ellipse.
-     * @return The height of the ellipse.
      */
     public double getHeight()
     {
@@ -212,7 +204,6 @@
 
     /**
      * Returns the width of the ellipse.
-     * @return The width of the ellipse.
      */
     public double getWidth()
     {
@@ -222,7 +213,6 @@
     /**
      * Returns x coordinate of the upper-left corner of
      * the ellipse's bounding-box.
-     * @return The x coordinate.
      */
     public double getX()
     {
@@ -232,7 +222,6 @@
     /**
      * Returns y coordinate of the upper-left corner of
      * the ellipse's bounding-box.
-     * @return The y coordinate.
      */
     public double getY()
     {
@@ -240,10 +229,7 @@
     }
 
     /**
-     * Returns <code>true</code> if the ellipse encloses no area, and
-     * <code>false</code> otherwise.
-     * 
-     * @return A boolean.
+     * Returns true if the ellipse encloses any area.
      */
     public boolean isEmpty()
     {
@@ -253,8 +239,8 @@
     /**
      * Sets the geometry of the ellipse's bounding box.<P>
      *
-     * @param x - x coordinate of the upper-left of the bounding rectangle
-     * @param y - y coordinate of the upper-left of the bounding rectangle
+     * @param x - x coordinate of the upper-right of the bounding rectangle
+     * @param y - y coordinate of the upper-right of the bounding rectangle
      * @param w - width of the ellipse
      * @param h - height of the ellipse
      */
@@ -267,10 +253,6 @@
     }
   } // class Double
 
-  /**
-   * An {@link Ellipse2D} that stores its coordinates using <code>float</code>
-   * primitives.
-   */
   public static class Float extends Ellipse2D
   {
     /**
@@ -294,7 +276,7 @@
     public float y;
 
     /**
-     * Creates a new Ellipse2D with an upper-left coordinate of (0,0)
+     * Creates a new Ellipse2D with an upper-right coordinate of (0,0)
      * and a zero size.
      */
     public Float()
@@ -304,8 +286,8 @@
     /**
      * Creates a new Ellipse2D within a given rectangle
      * using floating-point precision.<P>
-     * @param x - x coordinate of the upper-left of the bounding rectangle
-     * @param y - y coordinate of the upper-left of the bounding rectangle
+     * @param x - x coordinate of the upper-right of the bounding rectangle
+     * @param y - y coordinate of the upper-right of the bounding rectangle
      * @param w - width of the ellipse
      * @param h - height of the ellipse
      *
@@ -320,7 +302,6 @@
 
     /**
      * Returns the bounding-box of the ellipse.
-     * @return The bounding box.
      */
     public Rectangle2D getBounds2D()
     {
@@ -329,7 +310,6 @@
 
     /**
      * Returns the height of the ellipse.
-     * @return The height of the ellipse.
      */
     public double getHeight()
     {
@@ -338,7 +318,6 @@
 
     /**
      * Returns the width of the ellipse.
-     * @return The width of the ellipse.
      */
     public double getWidth()
     {
@@ -348,7 +327,6 @@
     /**
      * Returns x coordinate of the upper-left corner of
      * the ellipse's bounding-box.
-     * @return The x coordinate.
      */
     public double getX()
     {
@@ -358,7 +336,6 @@
     /**
      * Returns y coordinate of the upper-left corner of
      * the ellipse's bounding-box.
-     * @return The y coordinate.
      */
     public double getY()
     {
@@ -366,10 +343,7 @@
     }
 
     /**
-     * Returns <code>true</code> if the ellipse encloses no area, and
-     * <code>false</code> otherwise.
-     * 
-     * @return A boolean.
+     * Returns true if the ellipse encloses any area.
      */
     public boolean isEmpty()
     {
@@ -379,8 +353,8 @@
     /**
      * Sets the geometry of the ellipse's bounding box.<P>
      *
-     * @param x - x coordinate of the upper-left of the bounding rectangle
-     * @param y - y coordinate of the upper-left of the bounding rectangle
+     * @param x - x coordinate of the upper-right of the bounding rectangle
+     * @param y - y coordinate of the upper-right of the bounding rectangle
      * @param w - width of the ellipse
      * @param h - height of the ellipse
      */
@@ -397,8 +371,8 @@
      *
      * Note: This leads to a loss of precision.<P>
      *
-     * @param x - x coordinate of the upper-left of the bounding rectangle
-     * @param y - y coordinate of the upper-left of the bounding rectangle
+     * @param x - x coordinate of the upper-right of the bounding rectangle
+     * @param y - y coordinate of the upper-right of the bounding rectangle
      * @param w - width of the ellipse
      * @param h - height of the ellipse
      */
