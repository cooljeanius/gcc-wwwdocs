--- /home/tromey/gnu/Nightly/classpath/classpath/java/util/zip/DeflaterOutputStream.java	2004-06-21 06:24:02.000000000 -0600
+++ java/util/zip/DeflaterOutputStream.java	2004-07-22 11:06:40.000000000 -0600
@@ -60,36 +60,26 @@
  */
 public class DeflaterOutputStream extends FilterOutputStream
 {
-  /** 
-   * This buffer is used temporarily to retrieve the bytes from the
-   * deflater and write them to the underlying output stream.  
-   */
-  protected byte[] buf;
+  public void close () throws IOException
+  {
+    finish ();
+    out.close();
+  }
 
-  /** 
-   * The deflater which is used to deflate the stream.
-   */
-  protected Deflater def;
-  
   /**
    * Deflates everything in the def's input buffers.  This will call
    * <code>def.deflate()</code> until all bytes from the input buffers
    * are processed.
    */
-  protected void deflate() throws IOException
+  protected void deflate () throws IOException
   {
-    while (! def.needsInput())
+    do
       {
 	int len = def.deflate(buf, 0, buf.length);
-
-	//	System.err.println("DOS deflated " + len + " out of " + buf.length);
-	if (len <= 0)
-	  break;
-	out.write(buf, 0, len);
-      }
-
-    if (! def.needsInput())
-      throw new InternalError("Can't deflate all input?");
+	if (len > 0)
+	  out.write(buf, 0, len);
+       }
+    while (! def.needsInput());
   }
 
   /** 
@@ -97,9 +87,9 @@
    * default buffer size.
    * @param out the output stream where deflated output should be written.
    */
-  public DeflaterOutputStream(OutputStream out)
+  public DeflaterOutputStream (OutputStream out)
   {
-    this(out, new Deflater(), 512);
+    this (out, new Deflater (), 512);
   }
 
   /** 
@@ -108,9 +98,9 @@
    * @param out the output stream where deflated output should be written.
    * @param defl the underlying deflater.
    */
-  public DeflaterOutputStream(OutputStream out, Deflater defl)
+  public DeflaterOutputStream (OutputStream out, Deflater defl)
   {
-    this(out, defl, 512);
+    this (out, defl, 512);
   }
 
   /** 
@@ -123,75 +113,64 @@
    */
   public DeflaterOutputStream(OutputStream out, Deflater defl, int bufsize)
   {
-    super(out);
+    super (out);
     if (bufsize <= 0)
       throw new IllegalArgumentException("bufsize <= 0");
     buf = new byte[bufsize];
     def = defl;
   }
 
-  /**  
-   * Flushes the stream by calling flush() on the deflater and then
-   * on the underlying stream.  This ensures that all bytes are
-   * flushed.  This function doesn't work in Sun's JDK, but only in
-   * jazzlib.
-   */
-  public void flush() throws IOException
-  {
-    def.flush();
-    deflate();
-    out.flush();
-  }
-
   /**
    * Finishes the stream by calling finish() on the deflater.  This
    * was the only way to ensure that all bytes are flushed in Sun's
    * JDK.  
    */
-  public void finish() throws IOException
+  public void finish () throws IOException
   {
+    inbufWrite();
     def.finish();
-    while (! def.finished())
+    while (! def.finished ())
       {
 	int len = def.deflate(buf, 0, buf.length);
-	if (len <= 0)
-	  break;
-	out.write(buf, 0, len);
+	if (len > 0)
+	  out.write(buf, 0, len);
       }
-    if (! def.finished())
-      throw new InternalError("Can't deflate all input?");
-    out.flush();
   }
 
-  /**
-   * Calls finish() and closes the stream. 
-   */
-  public void close() throws IOException
+  public void write (int bval) throws IOException
   {
-    finish();
-    out.close();
+    if (inbuf == null)
+      inbuf = new byte[128];
+    else if (inbufLength == inbuf.length)
+      inbufWrite ();
+    inbuf[inbufLength++] = (byte) bval;
   }
 
-  /**
-   * Writes a single byte to the compressed output stream.
-   * @param bval the byte value.
-   */
-  public void write(int bval) throws IOException
+  public void write (byte[] buf, int off, int len) throws IOException
   {
-    byte[] b = new byte[1];
-    b[0] = (byte) bval;
-    write(b, 0, 1);
+    inbufWrite ();
+    def.setInput (buf, off, len);
+    deflate ();
   }
 
-  /**
-   * Writes a len bytes from an array to the compressed stream.
-   * @param buf the byte array.
-   * @param off the offset into the byte array where to start.
-   * @param len the number of bytes to write.
-   */
-  public void write(byte[] buf, int off, int len) throws IOException
+  private void inbufWrite () throws IOException
   {
-    def.setInput(buf, off, len);
-    deflate();
+    if (inbufLength > 0)
+      {
+	int size = inbufLength;
+	inbufLength = 0;
+	write (inbuf, 0, size);
+      }
   }
+
+  // Used, if needed, for write(int).
+  private byte[] inbuf;
+  // Used length of inbuf.
+  private int inbufLength;
+
+  // The retrieval buffer.
+  protected byte[] buf;
+
+  // Deflater used to compress data.
+  protected Deflater def;
 }
