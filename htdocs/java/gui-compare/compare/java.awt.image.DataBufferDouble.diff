--- /home/tromey/gnu/Nightly/classpath/classpath/java/awt/image/DataBufferDouble.java	2004-09-13 02:44:27.000000000 -0600
+++ java/awt/image/DataBufferDouble.java	2004-07-22 11:06:26.000000000 -0600
@@ -58,25 +58,12 @@
   private double[] data;
   private double[][] bankData;
   
-  /**
-   * Creates a new data buffer with a single data bank containing the 
-   * specified number of <code>double</code> elements.
-   * 
-   * @param size the number of elements in the data bank.
-   */
   public DataBufferDouble(int size)
   {
     super(TYPE_DOUBLE, size);
     data = new double[size];
   }
 
-  /**
-   * Creates a new data buffer with the specified number of data banks, 
-   * each containing the specified number of <code>double</code> elements.
-   * 
-   * @param size the number of elements in the data bank.
-   * @param numBanks the number of data banks.
-   */
   public DataBufferDouble(int size, int numBanks)
   {
     super(TYPE_DOUBLE, size, numBanks);
@@ -84,49 +71,18 @@
     data = bankData[0];
   }
 
-  /**
-   * Creates a new data buffer backed by the specified data bank.
-   * <p>
-   * Note: there is no exception when <code>dataArray</code> is 
-   * <code>null</code>, but in that case an exception will be thrown
-   * later if you attempt to access the data buffer.
-   * 
-   * @param dataArray the data bank.
-   * @param size the number of elements in the data bank.
-   */
   public DataBufferDouble(double[] dataArray, int size)
   {
     super(TYPE_DOUBLE, size);
     data = dataArray;
   }
     
-  /**
-   * Creates a new data buffer backed by the specified data bank, with
-   * the specified offset to the first element.
-   * <p>
-   * Note: there is no exception when <code>dataArray</code> is 
-   * <code>null</code>, but in that case an exception will be thrown
-   * later if you attempt to access the data buffer.
-   * 
-   * @param dataArray the data bank.
-   * @param size the number of elements in the data bank.
-   * @param offset the offset to the first element in the array.
-   */
   public DataBufferDouble(double[] dataArray, int size, int offset)
   {
     super(TYPE_DOUBLE, size, 1, offset);
     data = dataArray;
   }
 
-  /**
-   * Creates a new data buffer backed by the specified data banks.
-   * 
-   * @param dataArray the data banks.
-   * @param size the number of elements in the data bank.
-   * 
-   * @throws NullPointerException if <code>dataArray</code> is 
-   *         <code>null</code>.
-   */
   public DataBufferDouble(double[][] dataArray, int size)
   {
     super(TYPE_DOUBLE, size, dataArray.length);
@@ -134,17 +90,6 @@
     data = bankData[0];
   }
 
-  /**
-   * Creates a new data buffer backed by the specified data banks, with
-   * the specified offsets to the first element in each bank.
-   * 
-   * @param dataArray the data banks.
-   * @param size the number of elements in the data bank.
-   * @param offsets the offsets to the first element in each data bank.
-   * 
-   * @throws NullPointerException if <code>dataArray</code> is 
-   *         <code>null</code>.
-   */
   public DataBufferDouble(double[][] dataArray, int size, int[] offsets)
   {
     super(TYPE_DOUBLE, size, dataArray.length, offsets);
@@ -152,86 +97,36 @@
     data = bankData[0];
   }
 
-  /**
-   * Returns the first data bank.
-   * 
-   * @return The first data bank.
-   */
   public double[] getData()
   {
     return data;
   }
     
-  /**
-   * Returns a data bank.
-   * 
-   * @param bank the bank index.
-   * @return A data bank.
-   */
   public double[] getData(int bank)
   {
     return bankData[bank];
   }
     
-  /**
-   * Returns the array underlying this <code>DataBuffer</code>.
-   * 
-   * @return The data banks.
-   */
   public double[][] getBankData()
   {
     return bankData;
   }
   
-  /**
-   * Returns an element from the first data bank.  The offset (specified in
-   * the constructor) is added to <code>i</code> before accessing the 
-   * underlying data array.
-   * 
-   * @param i the element index.
-   * @return The element.
-   */
   public int getElem(int i)
   {
     return (int) data[i+offset];
   }
 
-  /**
-   * Returns an element from a particular data bank.  The offset (specified in
-   * the constructor) is added to <code>i</code> before accessing the 
-   * underlying data array.
-   * 
-   * @param bank the bank index.
-   * @param i the element index.
-   * @return The element.
-   */
   public int getElem(int bank, int i)
   {
     return (int) bankData[bank][i+offsets[bank]];
   }
 
-  /**
-   * Sets an element in the first data bank.  The offset (specified in the
-   * constructor) is added to <code>i</code> before updating the underlying
-   * data array.
-   * 
-   * @param i the element index.
-   * @param val the new element value.
-   */
   public void setElem(int i, int val)
   {
     data[i+offset] = (double) val;
   }
 
-  /**
-   * Sets an element in a particular data bank.  The offset (specified in the
-   * constructor) is added to <code>i</code> before updating the underlying
-   * data array.
-   * 
-   * @param bank the data bank index.
-   * @param i the element index.
-   * @param val the new element value.
-   */
   public void setElem(int bank, int i, int val)
   {
     bankData[bank][i+offsets[bank]] = (double) val;
