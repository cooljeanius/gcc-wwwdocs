--- /home/tromey/gnu/Nightly/classpath/classpath/javax/swing/JComponent.java	2004-09-24 02:31:55.000000000 -0600
+++ javax/swing/JComponent.java	2004-09-14 02:22:02.000000000 -0600
@@ -318,7 +318,7 @@
    * first client property.
    */
   private Hashtable clientProperties;
-
+  
   private InputMap inputMap_whenFocused;
   private InputMap inputMap_whenAncestorOfFocused;
   private InputMap inputMap_whenInFocusedWindow;
@@ -380,6 +380,9 @@
   public static final int WHEN_IN_FOCUSED_WINDOW = 2;
 
 
+  /**
+   * Creates a new <code>JComponent</code> instance.
+   */
   public JComponent()
   {
     super();
@@ -797,13 +800,15 @@
    * Set the value of the {@link #border} property, revalidate
    * and repaint this component.
    *   
-   * @param border The new value of the property
+   * @param newBorder The new value of the property
    *
    * @see #getBorder
    */
-  public void setBorder(Border border)
+  public void setBorder(Border newBorder)
   {
-    this.border = border;
+    Border oldBorder = border;
+    border = newBorder;
+    firePropertyChange("border", oldBorder, newBorder);
     revalidate();
     repaint();
   }
@@ -1018,6 +1023,45 @@
   }
 
   /**
+   * Checks if a maximum size was explicitely set on the component.
+   *
+   * @return <code>true</code> if a maximum size was set,
+   * <code>false</code> otherwise
+   * 
+   * @since 1.3
+   */
+  public boolean isMaximumSizeSet()
+  {
+    return maximumSize != null;
+  }
+
+  /**
+   * Checks if a minimum size was explicitely set on the component.
+   *
+   * @return <code>true</code> if a minimum size was set,
+   * <code>false</code> otherwise
+   * 
+   * @since 1.3
+   */
+  public boolean isMinimumSizeSet()
+  {
+    return minimumSize != null;
+  }
+
+  /**
+   * Checks if a preferred size was explicitely set on the component.
+   *
+   * @return <code>true</code> if a preferred size was set,
+   * <code>false</code> otherwise
+   * 
+   * @since 1.3
+   */
+  public boolean isPreferredSizeSet()
+  {
+    return preferredSize != null;
+  }
+  
+  /**
    * Return the value of the {@link #nextFocusableComponent} property.
    * 
    * @deprecated See {@link java.awt.FocusTraversalPolicy}
@@ -1748,7 +1792,7 @@
       }
     return false;
   }
-
+  
   /**
    * Remove a keyboard action registry.
    *
@@ -1908,11 +1952,13 @@
    * Set the value of the {@link #enabled} property, revalidate
    * and repaint this component.
    *
-   * @param e The new value of the property
+   * @param enable The new value of the property
    */
-  public void setEnabled(boolean e)
+  public void setEnabled(boolean enable)
   {
-    super.setEnabled(e);
+    boolean oldEnabled = isEnabled();
+    super.setEnabled(enable);
+    firePropertyChange("enabeld", oldEnabled, enable);
     revalidate();
     repaint();
   }
@@ -1964,7 +2010,9 @@
    */
   public void setMaximumSize(Dimension max)
   {
+    Dimension oldMaximumSize = maximumSize;
     maximumSize = max;
+    firePropertyChange("maximumSize", oldMaximumSize, maximumSize);
     revalidate();
     repaint();
   }
@@ -1977,7 +2025,9 @@
    */
   public void setMinimumSize(Dimension min)
   {
+    Dimension oldMinimumSize = minimumSize;
     minimumSize = min;
+    firePropertyChange("minimumSize", oldMinimumSize, minimumSize);
     revalidate();
     repaint();
   }
@@ -1990,7 +2040,9 @@
    */
   public void setPreferredSize(Dimension pref)
   {
+    Dimension oldPreferredSize = preferredSize;
     preferredSize = pref;
+    firePropertyChange("preferredSize", oldPreferredSize, preferredSize);
   }
 
   /**
@@ -2026,7 +2078,9 @@
    */
   public void setOpaque(boolean isOpaque)
   {
+    boolean oldOpaque = opaque;
     opaque = isOpaque;
+    firePropertyChange("opaque", oldOpaque, opaque);
     revalidate();
     repaint();
   }
