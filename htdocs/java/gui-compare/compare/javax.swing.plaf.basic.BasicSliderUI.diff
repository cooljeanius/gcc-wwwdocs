--- /home/tromey/gnu/Nightly/classpath/classpath/javax/swing/plaf/basic/BasicSliderUI.java	2004-07-23 02:24:11.000000000 -0600
+++ javax/swing/plaf/basic/BasicSliderUI.java	2004-07-22 11:06:56.000000000 -0600
@@ -224,12 +224,12 @@
       if (e.getPropertyName().equals(JSlider.ORIENTATION_CHANGED_PROPERTY))
 	recalculateIfOrientationChanged();
       else if (e.getPropertyName().equals(JSlider.MODEL_CHANGED_PROPERTY))
-      {
-        BoundedRangeModel oldModel = (BoundedRangeModel) e.getOldValue();
-	oldModel.removeChangeListener(changeListener);
-	slider.getModel().addChangeListener(changeListener);
-	calculateThumbLocation();
-      }
+        {
+	  BoundedRangeModel oldModel = (BoundedRangeModel) e.getOldValue();
+	  oldModel.removeChangeListener(changeListener);
+	  slider.getModel().addChangeListener(changeListener);
+	  calculateThumbLocation();
+        }
 
       // elif the componentOrientation changes (this is a bound property,
       // just undocumented) we change leftToRightCache. In Sun's 
@@ -345,15 +345,15 @@
       currentMouseX = e.getX();
       currentMouseY = e.getY();
       if (slider.getValueIsAdjusting())
-      {
-        int value;
-        if (slider.getOrientation() == JSlider.HORIZONTAL)
-	  value = valueForXPosition(currentMouseX) - offset;
-	else
-	  value = valueForYPosition(currentMouseY) - offset;
-	
-	slider.setValue(value);
-      }
+        {
+	  int value;
+	  if (slider.getOrientation() == JSlider.HORIZONTAL)
+	    value = valueForXPosition(currentMouseX) - offset;
+	  else
+	    value = valueForYPosition(currentMouseY) - offset;
+
+	  slider.setValue(value);
+        }
     }
 
     /**
@@ -390,7 +390,7 @@
 	value = findClosestTick(value);
 
       // If the thumb is hit, then we don't need to set the timers to move it. 
-      if (!thumbRect.contains(e.getPoint()))
+      if (! thumbRect.contains(e.getPoint()))
         {
 	  // The mouse has hit some other part of the slider.
 	  // The value moves no matter where in the slider you hit.
@@ -402,8 +402,8 @@
       else
         {
 	  slider.setValueIsAdjusting(true);
-          offset = value - slider.getValue();
-	}
+	  offset = value - slider.getValue();
+        }
     }
 
     /**
@@ -418,11 +418,11 @@
       currentMouseY = e.getY();
 
       if (slider.getValueIsAdjusting())
-      {
-        slider.setValueIsAdjusting(false);
-	if (slider.getSnapToTicks())
-	  slider.setValue(findClosestTick(slider.getValue()));
-      }
+        {
+	  slider.setValueIsAdjusting(false);
+	  if (slider.getSnapToTicks())
+	    slider.setValue(findClosestTick(slider.getValue()));
+        }
       if (scrollTimer != null)
 	scrollTimer.stop();
     }
@@ -861,22 +861,22 @@
   public Dimension getPreferredHorizontalSize()
   {
     Insets insets = slider.getInsets();
-    
+
     // The width should cover all the labels (which are usually the
     // deciding factor of the width)
     int width = getWidthOfWidestLabel() * (slider.getLabelTable() == null ? 0
                                                                           : slider.getLabelTable()
                                                                                   .size());
-    
+
     // If there are not enough labels.
     // This number is pretty much arbitrary, but it looks nice.
     if (width < 200)
       width = 200;
-    
+
     // We can only draw inside of the focusRectangle, so we have to
     // pad it with insets.
     width += insets.left + insets.right + focusInsets.left + focusInsets.right;
-      
+
     // Height is determined by the thumb, the ticks and the labels.
     int height = thumbHeight;
 
@@ -886,10 +886,10 @@
 
     if (slider.getPaintLabels())
       height += getHeightOfTallestLabel();
-    
+
     height += insets.top + insets.bottom + focusInsets.top
     + focusInsets.bottom;
-	      
+
     return new Dimension(width, height);
   }
 
@@ -902,19 +902,19 @@
   public Dimension getPreferredVerticalSize()
   {
     Insets insets = slider.getInsets();
-    
+
     int height = getHeightOfTallestLabel() * (slider.getLabelTable() == null
                                               ? 0 : slider.getLabelTable()
                                                           .size());
-    
+
     if (height < 200)
       height = 200;
-      
+
     height += insets.top + insets.bottom + focusInsets.top
     + focusInsets.bottom;
 
     int width = thumbHeight;
-    
+
     if (slider.getPaintTicks() && slider.getMajorTickSpacing() > 0
         || slider.getMinorTickSpacing() > 0)
       width += tickHeight;
@@ -923,7 +923,7 @@
       width += getWidthOfWidestLabel();
 
     width += insets.left + insets.right + focusInsets.left + focusInsets.right;
-	     
+
     return new Dimension(width, height);
   }
 
@@ -959,7 +959,7 @@
    * @return The dimensions of the preferred size.
    */
   public Dimension getPreferredSize(JComponent c)
-  {   
+  {
     if (slider.getOrientation() == JSlider.HORIZONTAL)
       return getPreferredHorizontalSize();
     else
@@ -999,22 +999,22 @@
     else
       return getPreferredVerticalSize();
   }
-  
+
   /**
    * This method calculates all the sizes of the rectangles by delegating to
    * the helper methods calculateXXXRect.
    */
-   protected void calculateGeometry()
-   {
-     calculateFocusRect();
-     calculateContentRect();
-     calculateThumbSize();
-     calculateTrackBuffer();
-     calculateTrackRect();
-     calculateTickRect();
-     calculateLabelRect();
-     calculateThumbLocation();
-   }
+  protected void calculateGeometry()
+  {
+    calculateFocusRect();
+    calculateContentRect();
+    calculateThumbSize();
+    calculateTrackBuffer();
+    calculateTrackRect();
+    calculateTickRect();
+    calculateLabelRect();
+    calculateThumbLocation();
+  }
 
   /**
    * This method calculates the size and position of the focusRect. This
@@ -1408,7 +1408,7 @@
     leftToRightCache = slider.getComponentOrientation() != ComponentOrientation.RIGHT_TO_LEFT;
     // FIXME: This next line is only here because the above line is here.
     calculateThumbLocation();
-    
+
     if (slider.getPaintTrack())
       paintTrack(g);
     if (slider.getPaintTicks())
@@ -1569,8 +1569,8 @@
 	  {
 	    double loc = tickRect.x;
 	    double increment = (max == min) ? 0
-	                                 : majorSpace * (double) tickRect.width / (max
-	                                 - min);
+	                                    : majorSpace * (double) tickRect.width / (max
+	                                    - min);
 	    if (drawInverted())
 	      {
 		loc += tickRect.width;
@@ -1586,8 +1586,8 @@
 	  {
 	    double loc = tickRect.height + tickRect.y;
 	    double increment = (max == min) ? 0
-	                                 : -majorSpace * (double) tickRect.height / (max
-	                                 - min);
+	                                    : -majorSpace * (double) tickRect.height / (max
+	                                    - min);
 	    if (drawInverted())
 	      {
 		loc = tickRect.y;
@@ -1606,8 +1606,8 @@
 	  {
 	    double loc = tickRect.x;
 	    double increment = (max == min) ? 0
-	                                 : minorSpace * (double) tickRect.width / (max
-	                                 - min);
+	                                    : minorSpace * (double) tickRect.width / (max
+	                                    - min);
 	    if (drawInverted())
 	      {
 		loc += tickRect.width;
@@ -1623,8 +1623,8 @@
 	  {
 	    double loc = tickRect.height + tickRect.y;
 	    double increment = (max == min) ? 0
-	                                 : -minorSpace * (double) tickRect.height / (max
-	                                 - min);
+	                                    : -minorSpace * (double) tickRect.height / (max
+	                                    - min);
 	    if (drawInverted())
 	      {
 		loc = tickRect.y;
@@ -1796,13 +1796,13 @@
     Dimension dim = label.getPreferredSize();
     int w = (int) dim.getWidth();
     int h = (int) dim.getHeight();
-    
+
     int max = slider.getMaximum();
     int min = slider.getMinimum();
 
     if (value > max || value < min)
       return;
-    
+
     //           value
     //             |
     //        ------------
@@ -2023,7 +2023,7 @@
   protected void scrollDueToClickInTrack(int dir)
   {
     scrollTimer.stop();
-  
+
     scrollListener.setDirection(dir);
     scrollListener.setScrollByBlock(true);
 
