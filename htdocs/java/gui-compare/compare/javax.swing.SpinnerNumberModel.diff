--- /home/tromey/gnu/Nightly/classpath/classpath/javax/swing/SpinnerNumberModel.java	2004-09-13 02:44:30.000000000 -0600
+++ javax/swing/SpinnerNumberModel.java	2004-09-14 02:22:03.000000000 -0600
@@ -37,6 +37,8 @@
 
 package javax.swing;
 
+import java.io.Serializable;
+
 /**
  * SpinnerNumberModel
  *
@@ -44,10 +46,8 @@
  * @version 1.0
  */
 public class SpinnerNumberModel extends AbstractSpinnerModel
+  implements Serializable
 {
-  /**
-   * For compatability with Sun's JDK
-   */
   private static final long serialVersionUID = 7279176385485777821L;
 
   /** DOCUMENT ME! */
@@ -78,6 +78,8 @@
    * @param minimum the minimum value
    * @param maximum the maximum value
    * @param stepSize the step size
+   * @throws IllegalArgumentException if minimum &lt;= value &lt;= maximum does not
+   *                                  hold
    */
   public SpinnerNumberModel(double value, double minimum, double maximum,
                             double stepSize)
@@ -93,6 +95,8 @@
    * @param minimum the minimum value
    * @param maximum the maximum value
    * @param stepSize the step size
+   * @throws IllegalArgumentException if minimum &lt;= value &lt;= maximum does not
+   *                                  hold
    */
   public SpinnerNumberModel(int value, int minimum, int maximum, int stepSize)
   {
@@ -243,4 +247,49 @@
   {
     return value;
   }
+
+  public Comparable getMinimum()
+  {
+    return minimum;
+  }
+
+  public void setMinimum(Comparable newMinimum)
+  {
+    if (minimum != newMinimum)
+      {
+	minimum = newMinimum;
+	fireStateChanged();
+      }
+  }
+
+  public Comparable getMaximum()
+  {
+    return maximum;
+  }
+
+  public void setMaximum(Comparable newMaximum)
+  {
+    if (maximum != newMaximum)
+      {
+	maximum = newMaximum;
+	fireStateChanged();
+      }
+  }
+
+  public Number getStepSize()
+  {
+    return stepSize;
+  }
+
+  public void setStepSize(Number newStepSize)
+  {
+    if (newStepSize == null)
+      throw new IllegalArgumentException();
+
+    if (stepSize != newStepSize)
+      {
+	stepSize = newStepSize;
+	fireStateChanged();
+      }
+  }
 }
