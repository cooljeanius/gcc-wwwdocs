--- /home/tromey/gnu/Nightly/classpath/classpath/java/awt/image/ColorModel.java	2004-07-23 02:23:51.000000000 -0600
+++ java/awt/image/ColorModel.java	2004-09-16 02:29:26.000000000 -0600
@@ -508,40 +508,87 @@
    * <code>(pixel == cm.getDataElement(cm.getComponents(pixel, null,
    * 0), 0))</code>.
    *
-   * This method is typically overriden in subclasses to provide a
-   * more efficient implementation.
+   * This method is overriden in subclasses since this abstract class throws
+   * UnsupportedOperationException().
    *
-   * @param arrays of unnormalized component samples of single
-   * pixel.  The scale and multiplication state of the samples are
-   * according to the color model. Each component sample is stored
-   * as a separate element in the array.
+   * @param components Array of unnormalized component samples of single
+   * pixel.  The scale and multiplication state of the samples are according
+   * to the color model. Each component sample is stored as a separate element
+   * in the array.
+   * @param offset Position of the first value of the pixel in components.
    *
    * @return pixel value encoded according to the color model.
    */
   public int getDataElement(int[] components, int offset)
   {
-    // subclasses has to implement this method.
+    // subclasses have to implement this method.
     throw new UnsupportedOperationException();
   }
 
+  /**
+   * Converts the normalized component samples from an array to a pixel
+   * value. I.e. composes the pixel from component samples, but does not
+   * perform any color conversion or scaling of the samples.
+   * 
+   * This method is typically overriden in subclasses to provide a
+   * more efficient implementation.  The method provided by this abstract
+   * class converts the components to unnormalized form and returns
+   * getDataElement(int[], int).
+   *
+   * @param components Array of normalized component samples of single pixel.
+   * The scale and multiplication state of the samples are according to the
+   * color model. Each component sample is stored as a separate element in the
+   * array.
+   * @param offset Position of the first value of the pixel in components.
+   *
+   * @return pixel value encoded according to the color model.
+   */
   public int getDataElement (float[] components, int offset)
   {
-    // subclasses has to implement this method.
-    throw new UnsupportedOperationException();
+    return
+      getDataElement(getUnnormalizedComponents(components, offset, null, 0),
+		     0);
   }
   
   public Object getDataElements(int[] components, int offset, Object obj)
   {
-    // subclasses has to implement this method.
+    // subclasses have to implement this method.
     throw new UnsupportedOperationException();
   }
 
-  public int getDataElements (float[] components, Object obj)
+  /**
+   * Converts the normalized component samples from an array to an array of
+   * TransferType values. I.e. composes the pixel from component samples, but
+   * does not perform any color conversion or scaling of the samples.
+   *
+   * If obj is null, a new array of TransferType is allocated and returned.
+   * Otherwise the results are stored in obj and obj is returned.  If obj is
+   * not long enough, ArrayIndexOutOfBounds is thrown.  If obj is not an array
+   * of primitives, ClassCastException is thrown.
+   * 
+   * This method is typically overriden in subclasses to provide a
+   * more efficient implementation.  The method provided by this abstract
+   * class converts the components to unnormalized form and returns
+   * getDataElement(int[], int, Object).
+   *
+   * @param components Array of normalized component samples of single pixel.
+   * The scale and multiplication state of the samples are according to the
+   * color model. Each component sample is stored as a separate element in the
+   * array.
+   * @param offset Position of the first value of the pixel in components.
+   * @param obj Array of TransferType or null.
+   *
+   * @return pixel value encoded according to the color model.
+   * @throws ArrayIndexOutOfBounds
+   * @throws ClassCastException
+   */
+  public Object getDataElements(float[] components, int offset, Object obj)
   {
-    // subclasses has to implement this method.
-    throw new UnsupportedOperationException();
+    return
+      getDataElements(getUnnormalizedComponents(components, offset, null, 0),
+		      0, obj);
   }
-  
+
   public boolean equals(Object obj)
   {
     if (!(obj instanceof ColorModel)) return false;
