--- /home/tromey/gnu/Nightly/classpath/classpath/java/io/ObjectInputStream.java	2004-07-23 02:23:52.000000000 -0600
+++ java/io/ObjectInputStream.java	2004-07-22 11:06:28.000000000 -0600
@@ -134,9 +134,6 @@
     this.isDeserializing = true;
 
     byte marker = this.realInputStream.readByte();
-
-    depth += 2;
-
     if(dump) dumpElement("MARKER: 0x" + Integer.toHexString(marker) + " ");
 
     try
@@ -154,9 +151,9 @@
 	  case TC_BLOCKDATALONG:
 	    {
 	      if (marker == TC_BLOCKDATALONG)
-		{ if(dump) dumpElementln("BLOCKDATALONG"); }
+		if(dump) dumpElementln("BLOCKDATALONG");
 	      else
-		{ if(dump) dumpElementln("BLOCKDATA"); }
+		if(dump) dumpElementln("BLOCKDATA");
 	      readNextBlock(marker);
 	      throw new StreamCorruptedException("Unexpected blockData");
 	    }
@@ -278,7 +275,29 @@
 	      
 	      if (osc.realClassIsExternalizable)
 		{
-		  Externalizable obj = osc.newInstance();
+		  Externalizable obj = null;
+		  
+		  try
+		    {
+		      obj = (Externalizable)clazz.newInstance();
+		    }
+		  catch (InstantiationException e)
+		    {
+		      throw new ClassNotFoundException
+			("Instance of " + clazz + " could not be created");
+		    }
+		  catch (IllegalAccessException e)
+		    {
+		      throw new ClassNotFoundException
+			("Instance of " + clazz + " could not be created because class or "
+			 + "zero-argument constructor is not accessible");
+		    }
+		  catch (NoSuchMethodError e)
+		    {
+		      throw new ClassNotFoundException
+			("Instance of " + clazz
+			 + " could not be created because zero-argument constructor is not defined");
+		    }
 		  
 		  int handle = assignNewHandle(obj);
 		  
@@ -332,10 +351,10 @@
 			      ("No end of block data seen for class with readObject (ObjectInputStream) method.");
 			  if(dump) dumpElementln("yes");
 			}
-// 		      catch (EOFException e)
-// 			{
-// 			  if(dump) dumpElementln("no, got EOFException");
-// 			}
+		      catch (EOFException e)
+			{
+			  if(dump) dumpElementln("no, got EOFException");
+			}
 		      catch (IOException e)
 			{
 			  if(dump) dumpElementln("no, got IOException");
@@ -350,7 +369,6 @@
 	      this.currentObject = null;
 	      this.currentObjectStreamClass = null;
 	      ret_val = processResolution(osc, obj, handle);
-		  
 	      break;
 	    }
 
@@ -379,8 +397,6 @@
 	
 	this.isDeserializing = was_deserializing;
 	
-	depth -= 2;
-	
 	if (! was_deserializing)
 	  {
 	    if (validators.size() > 0)
@@ -1287,10 +1303,10 @@
 
 	  int off = field.getOffset();
 
-	  return (long)(((prim_field_data[off++] & 0xFFL) << 56)
-			| ((prim_field_data[off++] & 0xFFL) << 48)
-			| ((prim_field_data[off++] & 0xFFL) << 40)
-			| ((prim_field_data[off++] & 0xFFL) << 32)
+	  return (long)(((prim_field_data[off++] & 0xFF) << 56)
+			| ((prim_field_data[off++] & 0xFF) << 48)
+			| ((prim_field_data[off++] & 0xFF) << 40)
+			| ((prim_field_data[off++] & 0xFF) << 32)
 			| ((prim_field_data[off++] & 0xFF) << 24)
 			| ((prim_field_data[off++] & 0xFF) << 16)
 			| ((prim_field_data[off++] & 0xFF) << 8)
@@ -1324,10 +1340,10 @@
 	  int off = field.getOffset();
 
 	  return Double.longBitsToDouble
-	    ( (long) (((prim_field_data[off++] & 0xFFL) << 56)
-		      | ((prim_field_data[off++] & 0xFFL) << 48)
-		      | ((prim_field_data[off++] & 0xFFL) << 40)
-		      | ((prim_field_data[off++] & 0xFFL) << 32)
+	    ( (long) (((prim_field_data[off++] & 0xFF) << 56)
+		      | ((prim_field_data[off++] & 0xFF) << 48)
+		      | ((prim_field_data[off++] & 0xFF) << 40)
+		      | ((prim_field_data[off++] & 0xFF) << 32)
 		      | ((prim_field_data[off++] & 0xFF) << 24)
 		      | ((prim_field_data[off++] & 0xFF) << 16)
 		      | ((prim_field_data[off++] & 0xFF) << 8)
@@ -1786,7 +1802,11 @@
    * @param sm SecurityManager instance which should be called.
    * @return The current class loader in the calling stack.
    */
-  private static native ClassLoader currentClassLoader (SecurityManager sm);
+  private static ClassLoader currentClassLoader (SecurityManager sm)
+  {
+    // FIXME: This is too simple.
+    return ClassLoader.getSystemClassLoader ();
+  }
 
   private void callReadMethod (Method readObject, Class klass, Object obj) throws IOException
   {
@@ -1844,9 +1864,6 @@
 
   private static boolean dump = false && Configuration.DEBUG;
 
-  // The nesting depth for debugging output
-  private int depth = 0;
-
   private void dumpElement (String msg)
   {
     System.out.print(msg);
@@ -1855,9 +1872,6 @@
   private void dumpElementln (String msg)
   {
     System.out.println(msg);
-    for (int i = 0; i < depth; i++)
-      System.out.print (" ");
-    System.out.print (Thread.currentThread() + ": ");
   }
 
   static
