--- /home/tromey/gnu/Nightly/classpath/classpath/java/awt/Canvas.java	2004-08-26 02:36:33.000000000 -0600
+++ java/awt/Canvas.java	2002-01-22 16:01:31.000000000 -0700
@@ -37,60 +37,17 @@
 
 package java.awt;
 
-import java.awt.image.BufferStrategy;
 import java.awt.peer.ComponentPeer;
-import java.io.Serializable;
-import javax.accessibility.Accessible;
-import javax.accessibility.AccessibleContext;
-import javax.accessibility.AccessibleRole;
-
-/**
- * The <code>Canvas</code> component provides a blank rectangular
- * area, which the client application can use for drawing and for
- * capturing events.  By overriding the <code>paint()</code> method,
- * the canvas can be used for anything from simple line drawings to
- * full-scale custom components.
- *
- * @author Original author unknown
- * @author Tom Tromey  <tromey@redhat.com>
- * @author Andrew John Hughes  <gnu_andrew@member.fsf.org>
- * @since 1.0
- */
-
-public class Canvas
-  extends Component
-  implements Serializable, Accessible
-{
-
-  /**
-   * Compatible with Sun's JDK.
-   */
-  private static final long serialVersionUID = -2284879212465893870L;
 
-  /**
-   * The graphics configuration associated with the canvas.
-   */
+public class Canvas extends Component implements java.io.Serializable
+{
   transient GraphicsConfiguration graphicsConfiguration;
 
   /**
-   * The buffer strategy associated with this canvas.
-   */
-  transient BufferStrategy bufferStrategy;
-
-  /**
    * Initializes a new instance of <code>Canvas</code>.
    */
-  public Canvas() 
-  { 
-  }
+  public Canvas() { }
 
-  /**
-   * Initializes a new instance of <code>Canvas</code>
-   * with the supplied graphics configuration.
-   *
-   * @param graphicsConfiguration the graphics configuration to use
-   *        for this particular canvas.
-   */
   public Canvas(GraphicsConfiguration graphicsConfiguration)
   {
     this.graphicsConfiguration = graphicsConfiguration;
@@ -114,7 +71,7 @@
   }
 
   /**
-   * Repaints the canvas window.  This method should be overridden by 
+   * Repaints the canvas window.  This method should be overriden by 
    * a subclass to do something useful, as this method simply paints
    * the window with the background color.
    */
@@ -129,83 +86,6 @@
     gfx.fillRect(0, 0, size.width, size.height);
   }
 
-
-  /**
-   * This class provides accessibility support for the canvas.
-   */
-  protected class AccessibleAWTCanvas
-    extends AccessibleAWTComponent
-  {
-
-    /**
-     * Constructor for the accessible canvas.
-     */
-    protected AccessibleAWTCanvas()
-    {
-    }
-
-    /**
-     * Returns the accessible role for the canvas.
-     *
-     * @return an instance of <code>AccessibleRole</code>, describing
-     *         the role of the canvas.
-     */
-    public AccessibleRole getAccessibleRole()
-    {
-      return AccessibleRole.CANVAS;
-    }
-    
-  }
-
-  /**
-   * Gets the AccessibleContext associated with this <code>Canvas</code>.
-   * The context is created, if necessary.
-   *
-   * @return the associated context
-   */
-  public AccessibleContext getAccessibleContext()
-  {
-    /* Create the context if this is the first request */
-    if (accessibleContext == null)
-      {
-        /* Create the context */
-        accessibleContext = new AccessibleAWTCanvas();
-      }
-    return accessibleContext;
-  }
-
-  /**
-   * Returns the buffer strategy used by the canvas.
-   *
-   * @return the buffer strategy.
-   * @since 1.4
-   */
-  public BufferStrategy getBufferStrategy()
-  {
-    return bufferStrategy;
-  }
-
-  /**
-   * Updates the canvas in response to a request to
-   * <code>repaint()</code> it.  The canvas is cleared
-   * with the current background colour, before <code>paint()</code>
-   * is called to add the new contents.  Subclasses
-   * which override this method should either call this
-   * method via <code>super.update(graphics)</code> or re-implement
-   * this behaviour, so as to ensure that the canvas is
-   * clear before painting takes place.
-   *
-   * @param graphics the graphics context.
-   */
-  public void update(Graphics graphics)
-  {
-    Dimension size;
-
-    /* Clear the canvas */
-    size = getSize();
-    graphics.clearRect(0, 0, size.width, size.height);
-    /* Call the paint method */
-    paint(graphics);
-  }
-
+  // Serialization constant
+  private static final long serialVersionUID = -2284879212465893870L;
 }
