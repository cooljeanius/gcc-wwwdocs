--- /home/tromey/gnu/Nightly/classpath/classpath/java/io/ObjectOutputStream.java	2004-07-24 02:24:53.000000000 -0600
+++ java/io/ObjectOutputStream.java	2004-07-22 11:06:28.000000000 -0600
@@ -48,7 +48,6 @@
 
 import gnu.java.io.ObjectIdentityWrapper;
 import gnu.java.lang.reflect.TypeSignature;
-import gnu.java.security.action.SetAccessibleAction;
 import gnu.classpath.Configuration;
 
 /**
@@ -145,13 +144,6 @@
     protocolVersion = defaultProtocolVersion;
     useSubclassMethod = false;
     writeStreamHeader();
-
-    if (Configuration.DEBUG)
-      {
-	String val = System.getProperty("gcj.dumpobjects");
-	if (val != null && !val.equals(""))
-	  dump = true;
-      }
   }
 
   /**
@@ -180,18 +172,10 @@
   {
     if (useSubclassMethod)
       {
-	if (dump)
-	  dumpElementln ("WRITE OVERRIDE: " + obj);
-	  
 	writeObjectOverride(obj);
 	return;
       }
 
-    if (dump)
-      dumpElementln ("WRITE: " + obj);
-    
-    depth += 2;    
-
     boolean was_serializing = isSerializing;
     boolean old_mode = setBlockDataMode(false);
     try
@@ -345,22 +329,14 @@
 		    fieldsAlreadyWritten = false;
 		    if (currentObjectStreamClass.hasWriteMethod())
 		      {
-			if (dump)
-			  dumpElementln ("WRITE METHOD CALLED FOR: " + obj);
 			setBlockDataMode(true);
 			callWriteMethod(obj, currentObjectStreamClass);
 			setBlockDataMode(false);
 			realOutput.writeByte(TC_ENDBLOCKDATA);
-			if (dump)
-			  dumpElementln ("WRITE ENDBLOCKDATA FOR: " + obj);
 		      }
 		    else
-		      {
-			if (dump)
-			  dumpElementln ("WRITE FIELDS CALLED FOR: " + obj);
 		      writeFields(obj, currentObjectStreamClass);
 		  }
-		  }
 
 		currentObject = null;
 		currentObjectStreamClass = null;
@@ -384,22 +360,12 @@
 	setBlockDataMode(false);
 	try
 	  {
-	    if (Configuration.DEBUG)
-	      {
-		e.printStackTrace(System.out);
-	      }
 	    writeObject(e);
 	  }
 	catch (IOException ioe)
 	  {
-	    StreamCorruptedException ex = 
-	      new StreamCorruptedException
-	      (ioe + " thrown while exception was being written to stream.");
-	    if (Configuration.DEBUG)
-	      {
-		ex.printStackTrace(System.out);
-	      }
-	    throw ex;
+	    throw new StreamCorruptedException
+	      ("Exception " + ioe + " thrown while exception was being written to stream.");
 	  }
 
 	reset (true);
@@ -409,10 +375,6 @@
       {
 	isSerializing = was_serializing;
 	setBlockDataMode(old_mode);
-	depth -= 2;
-
-	if (dump)
-	  dumpElementln ("END: " + obj);
       }
   }
 
@@ -1209,9 +1171,6 @@
 	field_name = fields[i].getName();
 	type = fields[i].getType();
 
-	if (dump)
-	  dumpElementln ("WRITE FIELD: " + field_name + " type=" + type);
-
 	if (type == Boolean.TYPE)
 	  realOutput.writeBoolean(getBooleanField(obj, osc.forClass(), field_name));
 	else if (type == Byte.TYPE)
@@ -1515,14 +1474,20 @@
       }    
   }
 
-  private Field getField (Class klass, String name)
+  private static Field getField (Class klass, String name)
     throws java.io.InvalidClassException
   {
     try
       {
 	final Field f = klass.getDeclaredField(name);
-	setAccessible.setMember(f);
-	AccessController.doPrivileged(setAccessible);
+	AccessController.doPrivileged(new PrivilegedAction()
+	  {
+	    public Object run()
+	    {
+	      f.setAccessible(true);
+	      return null;
+	    }
+	  });
 	return f;
       }
     catch (java.lang.NoSuchFieldException e)
@@ -1532,23 +1497,21 @@
       }
   }
 
-  private Method getMethod (Class klass, String name, Class[] args)
+  private static Method getMethod (Class klass, String name, Class[] args)
     throws java.lang.NoSuchMethodException
   {
     final Method m = klass.getDeclaredMethod(name, args);
-    setAccessible.setMember(m);
-    AccessController.doPrivileged(setAccessible);
+    AccessController.doPrivileged(new PrivilegedAction()
+      {
+	public Object run()
+	{
+	  m.setAccessible(true);
+	  return null;
+	}
+      });
     return m;
   }
 
-  private void dumpElementln (String msg)
-  {
-    for (int i = 0; i < depth; i++)
-      System.out.print (" ");
-    System.out.print (Thread.currentThread() + ": ");
-    System.out.println(msg);
-  }
-
   // this value comes from 1.2 spec, but is used in 1.1 as well
   private final static int BUFFER_SIZE = 1024;
 
@@ -1570,13 +1533,6 @@
   private Hashtable OIDLookupTable;
   private int protocolVersion;
   private boolean useSubclassMethod;
-  private SetAccessibleAction setAccessible = new SetAccessibleAction();
-
-  // The nesting depth for debugging output
-  private int depth = 0;
-
-  // Set if we're generating debugging dumps
-  private boolean dump = false;
 
   static
   {
