--- /home/tromey/gnu/Nightly/classpath/classpath/java/awt/datatransfer/Clipboard.java	2002-12-23 05:45:46.000000000 -0700
+++ java/awt/datatransfer/Clipboard.java	2004-09-13 02:34:37.000000000 -0600
@@ -39,102 +39,76 @@
 package java.awt.datatransfer;
 
 /**
-  * This class allows data to be transferred using a cut and paste type
-  * mechanism.
-  *
-  * @author Aaron M. Renn (arenn@urbanophile.com)
-  */
-public class Clipboard
-{
-
-/*
- * Instance Variables
- */
-
-/**
-  * The data being transferred.
-  */
-protected Transferable contents;
-
-/**
-  * The owner of this clipboard.
-  */
-protected ClipboardOwner owner;
-
-// The clipboard name
-private String name;
-
-/*************************************************************************/
-
-/*
- * Constructors
- */
-
-/**
-  * Initializes a new instance of <code>Clipboard</code> with the
-  * specified name.
-  *
-  * @param name The clipboard name.
-  */
-public 
-Clipboard(String name)
-{
-  this.name = name;
-}
-
-/*************************************************************************/
-
-/*
- * Instance Methods
+ * This class allows data to be transferred using a cut and paste type
+ * mechanism.
+ *
+ * @author Aaron M. Renn (arenn@urbanophile.com)
  */
-
-/**
-  * Returns the name of the clipboard.
-  */
-public String
-getName()
-{
-  return(name);
-}
-
-/*************************************************************************/
-
-/**
-  * Returns the contents of the clipboard.
-  *
-  * @param requestor The object requesting the contents.
-  *
-  * @exception IllegalStateException If the clipboard is currently unavailable
-  */
-public synchronized Transferable
-getContents(Object requestor)
-{
-  return(contents);
-}
-
-/*************************************************************************/
-
-/**
-  * Sets the content and owner of this clipboard.
-  * If the given owner is different from the current owner
-  * then lostOwnership is called on the current owner.
-  * XXX - is this called with the old or new contents.
-  *
-  * @param contents The new clipboard contents.
-  * @param owner The new clipboard owner
-  *
-  * @exception IllegalStateException If the clipboard is currently unavailable
-  */
-public synchronized void
-setContents(Transferable contents, ClipboardOwner owner)
+public class Clipboard
 {
-  if (this.owner != owner)
-    if (this.owner != null)
-      this.owner.lostOwnership(this, contents);
+  /**
+   * The data being transferred.
+   */
+  protected Transferable contents;
+
+  /**
+   * The owner of this clipboard.
+   */
+  protected ClipboardOwner owner;
+
+  // The clipboard name
+  private String name;
+
+  /**
+   * Initializes a new instance of <code>Clipboard</code> with the
+   * specified name.
+   *
+   * @param name The clipboard name.
+   */
+  public Clipboard(String name)
+  {
+    this.name = name;
+  }
+
+  /**
+    * Returns the name of the clipboard.
+    */
+  public String getName()
+  {
+    return name;
+  }
+
+  /**
+   * Returns the contents of the clipboard.
+   *
+   * @param requestor The object requesting the contents.
+   *
+   * @exception IllegalStateException If the clipboard is currently unavailable
+   */
+  public synchronized Transferable getContents(Object requestor)
+  {
+    return contents;
+  }
+
+  /**
+   * Sets the content and owner of this clipboard.
+   * If the given owner is different from the current owner
+   * then lostOwnership is called on the current owner.
+   * XXX - is this called with the old or new contents.
+   *
+   * @param contents The new clipboard contents.
+   * @param owner The new clipboard owner
+   *
+   * @exception IllegalStateException If the clipboard is currently unavailable
+   */
+  public synchronized void setContents(Transferable contents, ClipboardOwner owner)
+  {
+    if (this.owner != owner)
+      if (this.owner != null)
+        this.owner.lostOwnership(this, contents);
  
-  this.owner = owner;
-  this.contents = contents;
+    this.owner = owner;
+    this.contents = contents;
+  }
 }
 
-} // class Clipboard
-
