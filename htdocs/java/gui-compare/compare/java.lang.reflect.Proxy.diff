--- /home/tromey/gnu/Nightly/classpath/classpath/java/lang/reflect/Proxy.java	2004-07-10 02:22:16.000000000 -0600
+++ java/lang/reflect/Proxy.java	2004-07-22 11:06:30.000000000 -0600
@@ -722,8 +722,8 @@
   private static final class ProxyData
   {
     /**
-     * The package this class is in *including the trailing dot* or "" for
-     * the unnamed (aka default) package.
+     * The package this class is in.  Possibly null, meaning the unnamed
+     * package.
      */
     String pack;
 
@@ -769,17 +769,18 @@
     }
 
     /**
-     * Return the name of a package (including the trailing dot)
-     * given the name of a class.
-     * Returns "" if no package.  We use this in preference to
+     * Return the name of a package given the name of a class.
+     * Returns null if no package.  We use this in preference to
      * using Class.getPackage() to avoid problems with ClassLoaders
      * that don't set the package.
      */
-    private static String getPackage(Class k)
+    static String getPackage(Class k)
     {
       String name = k.getName();
       int idx = name.lastIndexOf('.');
-      return name.substring(0, idx + 1);
+      if (idx >= 0)
+	return name.substring(0, idx);
+      return null;
     }
 
     /**
@@ -960,7 +961,8 @@
       // access_flags
       putU2(Modifier.SUPER | Modifier.FINAL | Modifier.PUBLIC);
       // this_class
-      qualName = (data.pack + "$Proxy" + data.id);
+      qualName = ((data.pack == null ? "" : data.pack + '.')
+                  + "$Proxy" + data.id);
       putU2(classInfo(TypeSignature.getEncodingOfClass(qualName, false)));
       // super_class
       putU2(classInfo("java/lang/reflect/Proxy"));
@@ -1323,26 +1325,34 @@
 
       try
         {
+          // XXX Do we require more native support here?
+
           Class vmClassLoader = Class.forName("java.lang.VMClassLoader");
           Class[] types = {ClassLoader.class, String.class,
                            byte[].class, int.class, int.class,
                            ProtectionDomain.class };
           Method m = vmClassLoader.getDeclaredMethod("defineClass", types);
-          // We can bypass the security check of setAccessible(true), since
-	  // we're in the same package.
-          m.flag = true;
 
+          // Bypass the security check of setAccessible(true), since this
+          // is trusted code. But note the comment above about the security
+          // risk of doing this outside a synchronized block.
+          m.flag = true;
           Object[] args = {loader, qualName, bytecode, new Integer(0),
                            new Integer(bytecode.length),
                            Object.class.getProtectionDomain() };
           Class clazz = (Class) m.invoke(null, args);
+          m.flag = false;
 
           // Finally, initialize the m field of the proxy class, before
           // returning it.
+
+          // No security risk here, since clazz has not been exposed yet,
+          // so user code cannot grab the same reflection object.
           Field f = clazz.getDeclaredField("m");
           f.flag = true;
           // we can share the array, because it is not publicized
           f.set(null, methods);
+          f.flag = false;
 
           return clazz;
         }
