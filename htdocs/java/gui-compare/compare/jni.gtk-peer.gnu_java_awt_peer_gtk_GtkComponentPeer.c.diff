--- /home/tromey/gnu/Nightly/classpath/classpath/native/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkComponentPeer.c	2004-07-23 02:24:16.000000000 -0600
+++ jni/gtk-peer/gnu_java_awt_peer_gtk_GtkComponentPeer.c	2004-07-31 02:23:40.000000000 -0600
@@ -473,6 +473,63 @@
 }
 
 JNIEXPORT void JNICALL
+Java_gnu_java_awt_peer_gtk_GtkComponentPeer_gtkWidgetSetParent
+  (JNIEnv *env, jobject obj, jobject parent)
+{
+  void *ptr;
+  void *parent_ptr;
+  GtkWidget *widget;
+  GtkWidget *parent_widget;
+
+  ptr = NSA_GET_PTR (env, obj);
+  parent_ptr = NSA_GET_PTR (env, parent);
+
+  gdk_threads_enter ();
+
+  widget = GTK_WIDGET (ptr);
+  parent_widget = GTK_WIDGET (parent_ptr);
+
+  if (GTK_IS_WINDOW (parent_widget))
+    {
+      GList *children = gtk_container_children 
+        (GTK_CONTAINER (GTK_BIN (parent_widget)->child));
+
+      if (GTK_IS_MENU_BAR (children->data))
+	gtk_layout_put (GTK_LAYOUT (children->next->data), widget, 0, 0);
+      else
+	gtk_layout_put (GTK_LAYOUT (children->data), widget, 0, 0);
+    }
+  else
+    if (GTK_IS_SCROLLED_WINDOW (parent_widget))
+      {
+        gtk_scrolled_window_add_with_viewport 
+          (GTK_SCROLLED_WINDOW (parent_widget), widget);
+        gtk_viewport_set_shadow_type (GTK_VIEWPORT (widget->parent), 
+                                      GTK_SHADOW_NONE);
+
+      }
+    else
+      gtk_layout_put (GTK_LAYOUT (parent_widget), widget, 0, 0);
+
+  gdk_threads_leave ();
+}
+
+JNIEXPORT void JNICALL
+Java_gnu_java_awt_peer_gtk_GtkComponentPeer_gtkWidgetSetSensitive
+  (JNIEnv *env, jobject obj, jboolean sensitive)
+{
+  void *ptr;
+
+  ptr = NSA_GET_PTR (env, obj);
+
+  gdk_threads_enter ();
+
+  gtk_widget_set_sensitive (GTK_WIDGET (ptr), sensitive);
+
+  gdk_threads_leave ();
+}
+
+JNIEXPORT void JNICALL
 Java_gnu_java_awt_peer_gtk_GtkComponentPeer_gtkWidgetRequestFocus
   (JNIEnv *env, jobject obj)
 {
@@ -525,11 +582,11 @@
   event->key.send_event = 0;
   event->key.time = (guint32) when;
 
-  if (mods & AWT_SHIFT_MASK)
+  if (mods & AWT_SHIFT_DOWN_MASK)
     event->key.state |= GDK_SHIFT_MASK;
-  if (mods & AWT_CTRL_MASK)
+  if (mods & AWT_CTRL_DOWN_MASK)
     event->key.state |= GDK_CONTROL_MASK;
-  if (mods & AWT_ALT_MASK)
+  if (mods & AWT_ALT_DOWN_MASK)
     event->key.state |= GDK_MOD1_MASK;
 
   /* This hack is needed because the AWT has no notion of num lock.
@@ -680,19 +737,33 @@
 
   gdk_threads_enter ();
 
-  /* Save the widget's current size request. */
-  gtk_widget_size_request (GTK_WIDGET (ptr), &current_req);
+  /* Widgets that extend GtkWindow such as GtkFileChooserDialog may have
+     a default size.  These values seem more useful then the natural
+     requisition values, particularly for GtkFileChooserDialog. */
+  if (GTK_IS_WINDOW (ptr))
+    {
+      gint width, height;
+      gtk_window_get_default_size (GTK_WINDOW (ptr), &width, &height);
 
-  /* Get the widget's "natural" size request. */
-  gtk_widget_set_size_request (GTK_WIDGET (ptr), -1, -1);
-  gtk_widget_size_request (GTK_WIDGET (ptr), &natural_req);
-
-  /* Reset the widget's size request. */
-  gtk_widget_set_size_request (GTK_WIDGET (ptr),
-			       current_req.width, current_req.height);
+      dims[0] = width;
+      dims[1] = height;
+    }
+  else
+    {
+      /* Save the widget's current size request. */
+      gtk_widget_size_request (GTK_WIDGET (ptr), &current_req);
+
+      /* Get the widget's "natural" size request. */
+      gtk_widget_set_size_request (GTK_WIDGET (ptr), -1, -1);
+      gtk_widget_size_request (GTK_WIDGET (ptr), &natural_req);
+
+      /* Reset the widget's size request. */
+      gtk_widget_set_size_request (GTK_WIDGET (ptr),
+			           current_req.width, current_req.height);
 
-  dims[0] = natural_req.width;
-  dims[1] = natural_req.height;
+      dims[0] = natural_req.width;
+      dims[1] = natural_req.height;
+    }
 
   gdk_threads_leave ();
 
@@ -911,45 +982,6 @@
   return NULL;
 }
 
-#define WIDGET_CLASS(w)  GTK_WIDGET_CLASS (GTK_OBJECT (w)->klass)
-
-void
-set_parent (GtkWidget *widget, GtkContainer *parent)
-{
-  if (GTK_IS_WINDOW (parent))
-    {
-      GList *children = gtk_container_children 
-	                  (GTK_CONTAINER (GTK_BIN (parent)->child));
-
-      if (GTK_IS_MENU_BAR (children->data))
-	gtk_layout_put (GTK_LAYOUT (children->next->data), widget, 0, 0);
-      else /* GTK_IS_LAYOUT (children->data) */
-	gtk_layout_put (GTK_LAYOUT (children->data), widget, 0, 0);
-    }
-  else
-    if (GTK_IS_SCROLLED_WINDOW (parent))
-      {
-/*  	if (WIDGET_CLASS (widget)->set_scroll_adjustments_signal) */
-/*  	  gtk_container_add (GTK_CONTAINER (parent), widget); */
-/*  	else */
-/*  	  { */
-	    gtk_scrolled_window_add_with_viewport 
-	      (GTK_SCROLLED_WINDOW (parent), widget);
-	    gtk_viewport_set_shadow_type (GTK_VIEWPORT (widget->parent), 
-					  GTK_SHADOW_NONE);
-/*  	  } */
-
-      }
-/*        gtk_layout_put  */
-/*  	(GTK_LAYOUT (GTK_BIN (parent)->child), widget, 0, 0); */
-
-/*      if (GTK_IS_SCROLLED_WINDOW (parent)) */
-/*        gtk_layout_put  */
-/*  	(GTK_LAYOUT (GTK_BIN (GTK_BIN (parent)->child)->child), widget, 0, 0); */
-    else
-      gtk_layout_put (GTK_LAYOUT (parent), widget, 0, 0);
-}
-
 JNIEXPORT jboolean JNICALL 
 Java_gnu_java_awt_peer_gtk_GtkComponentPeer_isEnabled 
   (JNIEnv *env, jobject obj)
@@ -981,105 +1013,6 @@
   return retval;
 }
 
-JNIEXPORT void JNICALL 
-Java_gnu_java_awt_peer_gtk_GtkComponentPeer_set__Ljava_lang_String_2Ljava_lang_String_2
-  (JNIEnv *env, jobject obj, jstring jname, jstring jvalue)
-{
-  const char *name;
-  const char *value;
-  void *ptr;
-
-  ptr = NSA_GET_PTR (env, obj);
-  name = (*env)->GetStringUTFChars (env, jname, NULL);
-  value = (*env)->GetStringUTFChars (env, jvalue, NULL);
-
-  gdk_threads_enter();
-  g_object_set(ptr, name, value, NULL);
-  gdk_threads_leave();
-
-  (*env)->ReleaseStringUTFChars (env, jname, name);
-  (*env)->ReleaseStringUTFChars (env, jvalue, value);
-}
-
-JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkComponentPeer_set__Ljava_lang_String_2Z
-  (JNIEnv *env, jobject obj, jstring jname, jboolean value)
-{
-  const char *name;
-  void *ptr;
-
-  ptr = NSA_GET_PTR (env, obj);
-
-  name = (*env)->GetStringUTFChars (env, jname, NULL);
-
-  gdk_threads_enter();
-  g_object_set(ptr, name, value, NULL);
-  gdk_threads_leave();
-
-  (*env)->ReleaseStringUTFChars (env, jname, name);
-}
-
-JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkComponentPeer_set__Ljava_lang_String_2I
-  (JNIEnv *env, jobject obj, jstring jname, jint value)
-{
-  const char *name;
-  void *ptr;
-
-  ptr = NSA_GET_PTR (env, obj);
-  name = (*env)->GetStringUTFChars (env, jname, NULL);
-
-  gdk_threads_enter();                          
-  g_object_set(ptr, name, value, NULL);
-  gdk_threads_leave();
-
-  (*env)->ReleaseStringUTFChars (env, jname, name);
-}
-
-JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkComponentPeer_set__Ljava_lang_String_2F
-  (JNIEnv *env, jobject obj, jstring jname, jfloat value)
-{
-  const char *name;
-  void *ptr;
-
-  ptr = NSA_GET_PTR (env, obj);
-  name = (*env)->GetStringUTFChars (env, jname, NULL);
-
-  gdk_threads_enter();                          
-  g_object_set(ptr, name, value, NULL);
-  gdk_threads_leave();
-
-  (*env)->ReleaseStringUTFChars (env, jname, name);
-}
-
-JNIEXPORT void JNICALL 
-Java_gnu_java_awt_peer_gtk_GtkComponentPeer_set__Ljava_lang_String_2Ljava_lang_Object_2
-  (JNIEnv *env, jobject obj1, jstring jname, jobject obj2)
-{
-  const char *name;
-  void *ptr1, *ptr2;
-
-  ptr1 = NSA_GET_PTR (env, obj1);
-  ptr2 = NSA_GET_PTR (env, obj2);
-  
-  name = (*env)->GetStringUTFChars (env, jname, NULL);
-
-  /* special case to catch where we need to set the parent */
-  if (!strcmp (name, "parent"))
-    {
-      gdk_threads_enter ();
-      set_parent (GTK_WIDGET (ptr1), GTK_CONTAINER (ptr2));
-      gdk_threads_leave ();
-
-      (*env)->ReleaseStringUTFChars (env, jname, name);
-      return;
-    }
-
-  gdk_threads_enter();                          
-  g_object_set(ptr1, name, ptr2, NULL);
-  gdk_threads_leave();
-
-  (*env)->ReleaseStringUTFChars (env, jname, name);
-}
-
 static gboolean
 filter_expose_event_handler (GtkWidget *widget, GdkEvent *event, jobject peer)
 {
@@ -1111,7 +1044,6 @@
   GList *children;
   void *ptr = NSA_GET_PTR (env, obj);
   jobject *gref = NSA_GET_GLOBAL_REF (env, obj);
-  gulong hid;
 
   g_assert (gref);
 
@@ -1145,9 +1077,10 @@
     {
       filterobj = GTK_OBJECT(ptr);
     }
-  hid = g_signal_handler_find(filterobj,
-                              G_SIGNAL_MATCH_FUNC,
-                              0, 0, NULL, *pre_event_handler, NULL);
+
+  gulong hid = g_signal_handler_find(filterobj,
+                                     G_SIGNAL_MATCH_FUNC,
+                                     0, 0, NULL, *pre_event_handler, NULL);
   if (hid > 0)
   {
     g_signal_handler_block(filterobj, hid);
@@ -1166,7 +1099,6 @@
   GList *children;
   void *ptr = NSA_GET_PTR (env, obj);
   jobject *gref = NSA_GET_GLOBAL_REF (env, obj);
-  gulong hid;
 
   g_assert (gref);
 
@@ -1203,9 +1135,9 @@
 
   g_signal_handlers_disconnect_by_func (filterobj,
                                         *filter_expose_event_handler, *gref);
-  hid = g_signal_handler_find(filterobj,
-                              G_SIGNAL_MATCH_FUNC,
-                              0, 0, NULL, *pre_event_handler, NULL);
+  gulong hid = g_signal_handler_find(filterobj,
+                                     G_SIGNAL_MATCH_FUNC,
+                                     0, 0, NULL, *pre_event_handler, NULL);
   if (hid > 0)
   {
     g_signal_handler_unblock(filterobj, hid);
