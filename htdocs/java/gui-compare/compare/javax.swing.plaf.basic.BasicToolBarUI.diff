--- /home/tromey/gnu/Nightly/classpath/classpath/javax/swing/plaf/basic/BasicToolBarUI.java	2004-07-23 02:24:12.000000000 -0600
+++ javax/swing/plaf/basic/BasicToolBarUI.java	2004-07-22 11:06:57.000000000 -0600
@@ -96,40 +96,40 @@
   private static Border rolloverBorder;
 
   /** The last known BorderLayout constraint before floating. */
-    protected String constraintBeforeFloating;
+  protected String constraintBeforeFloating;
 
   /** The last known orientation of the JToolBar before floating. */
   private int lastGoodOrientation;
 
   /** The color of the border when it is dockable. */
-    protected Color dockingBorderColor;
+  protected Color dockingBorderColor;
 
   /** The background color of the JToolBar when it is dockable. */
-    protected Color dockingColor;
+  protected Color dockingColor;
 
   /** The docking listener responsible for mouse events on the JToolBar. */
-    protected MouseInputListener dockingListener;
+  protected MouseInputListener dockingListener;
 
   /** The window used for dragging the JToolBar. */
-    protected BasicToolBarUI.DragWindow dragWindow;
+  protected BasicToolBarUI.DragWindow dragWindow;
 
   /** The color of the border when it is not dockable. */
-    protected Color floatingBorderColor;
+  protected Color floatingBorderColor;
 
   /** The background color of the JToolBar when it is not dockable. */
-    protected Color floatingColor;
+  protected Color floatingColor;
 
   /** The index of the focused component. */
-    protected int focusedCompIndex;
+  protected int focusedCompIndex;
 
   /** The PropertyChangeListener for the JToolBar. */
-    protected PropertyChangeListener propertyListener;
+  protected PropertyChangeListener propertyListener;
 
   /** The JToolBar this UI delegate is responsible for. */
-    protected JToolBar toolBar;
+  protected JToolBar toolBar;
 
   /** The Container listener for the JToolBar. */
-    protected ContainerListener toolBarContListener;
+  protected ContainerListener toolBarContListener;
 
   /** The Focus listener for the JToolBar. */
   protected FocusListener toolBarFocusListener;
@@ -161,9 +161,9 @@
    * @param b The JToolBar to represent with this UI.
    */
   public BasicToolBarUI(JToolBar b)
-    {
-	super();
-    }
+  {
+    super();
+  }
 
   /**
    * This method returns whether the JToolBar can dock at the given position.
@@ -175,12 +175,12 @@
    * @return Whether the JToolBar can dock.
    */
   protected boolean canDock(Component c, Point p)
-    {
+  {
     if (areaOfClick(c, p) != -1)
       return true;
 
-	return false;
-    }
+    return false;
+  }
 
   /**
    * This helper method returns the position of the JToolBar if it can dock.
@@ -225,10 +225,10 @@
    *
    * @return A new DockingListener for the JToolBar.
    */
-    protected MouseInputListener createDockingListener()
-    {
+  protected MouseInputListener createDockingListener()
+  {
     return new DockingListener(toolBar);
-    }
+  }
 
   /**
    * This method creates a new DragWindow for the given JToolBar.
@@ -237,10 +237,10 @@
    *
    * @return A new DragWindow.
    */
-    protected BasicToolBarUI.DragWindow createDragWindow(JToolBar toolbar)
-    {
+  protected BasicToolBarUI.DragWindow createDragWindow(JToolBar toolbar)
+  {
     return new DragWindow();
-    }
+  }
 
   /**
    * This method creates a new floating frame for the JToolBar. By default,
@@ -251,11 +251,11 @@
    *
    * @return A new floating frame.
    */
-    protected JFrame createFloatingFrame(JToolBar toolbar)
-    {
+  protected JFrame createFloatingFrame(JToolBar toolbar)
+  {
     // FIXME: Though deprecated, this should still work.
-      return null;
-    }
+    return null;
+  }
 
   /**
    * This method creates a new floating window for the JToolBar. This is the
@@ -265,21 +265,21 @@
    *
    * @return A new floating window.
    */
-    protected RootPaneContainer createFloatingWindow(JToolBar toolbar)
-    {
+  protected RootPaneContainer createFloatingWindow(JToolBar toolbar)
+  {
     // This one is used by default though.
     return new ToolBarDialog();
-    }
+  }
 
   /**
    * This method creates a new WindowListener for the JToolBar.
    *
    * @return A new WindowListener.
    */
-    protected WindowListener createFrameListener()
-    {
+  protected WindowListener createFrameListener()
+  {
     return new FrameListener();
-    }
+  }
 
   /**
    * This method creates a new nonRolloverBorder for JButtons when the
@@ -287,20 +287,20 @@
    *
    * @return A new NonRolloverBorder.
    */
-    protected Border createNonRolloverBorder()
-    {
+  protected Border createNonRolloverBorder()
+  {
     return new EtchedBorderUIResource();
-    }
+  }
 
   /**
    * This method creates a new PropertyChangeListener for the JToolBar.
    *
    * @return A new PropertyChangeListener.
    */
-    protected PropertyChangeListener createPropertyListener()
-    {
+  protected PropertyChangeListener createPropertyListener()
+  {
     return new PropertyListener();
-    }
+  }
 
   /**
    * This method creates a new rollover border for JButtons when the
@@ -308,8 +308,8 @@
    *
    * @return A new rollover border.
    */
-    protected Border createRolloverBorder()
-    {
+  protected Border createRolloverBorder()
+  {
     return new EtchedBorderUIResource()
       {
 	public void paintBorder(Component c, Graphics g, int x, int y,
@@ -322,27 +322,27 @@
 	    }
 	}
       };
-    }
+  }
 
   /**
    * This method creates a new Container listener for the JToolBar.
    *
    * @return A new Container listener.
    */
-    protected ContainerListener createToolBarContListener()
-    {
+  protected ContainerListener createToolBarContListener()
+  {
     return new ToolBarContListener();
-    }
+  }
 
   /**
    * This method creates a new FocusListener for the JToolBar.
    *
    * @return A new FocusListener for the JToolBar.
    */
-    protected FocusListener createToolBarFocusListener()
-    {
+  protected FocusListener createToolBarFocusListener()
+  {
     return new ToolBarFocusListener();
-    }
+  }
 
   /**
    * This method creates a new UI delegate for the given JComponent.
@@ -351,10 +351,10 @@
    *
    * @return A new UI delegate.
    */
-    public static ComponentUI createUI(JComponent c)
-    {
-	return new BasicToolBarUI((JToolBar) c);
-    }
+  public static ComponentUI createUI(JComponent c)
+  {
+    return new BasicToolBarUI((JToolBar) c);
+  }
 
   /**
    * This method is called to drag the DragWindow around when the JToolBar is
@@ -363,8 +363,8 @@
    * @param position The mouse cursor coordinates relative to the JToolBar.
    * @param origin The screen position of the JToolBar.
    */
-    protected void dragTo(Point position, Point origin)
-    {
+  protected void dragTo(Point position, Point origin)
+  {
     int loc = areaOfClick(origParent,
                           SwingUtilities.convertPoint(toolBar, position,
                                                       origParent));
@@ -396,7 +396,7 @@
       {
 	w = cachedBounds.height;
 	h = cachedBounds.width;
-    }
+      }
 
     Point p = dragWindow.getOffset();
     Insets insets = toolBar.getInsets();
@@ -420,8 +420,8 @@
    * @param origin The screen position of the JToolBar before the drag session
    *        started.
    */
-    protected void floatAt(Point position, Point origin)
-    {
+  protected void floatAt(Point position, Point origin)
+  {
     Point p = new Point(position);
     int aoc = areaOfClick(origParent,
                           SwingUtilities.convertPoint(toolBar, p, origParent));
@@ -440,7 +440,7 @@
       {
 	floatFrame.hide();
 	newParent = origParent;
-    }
+      }
 
     String constraint;
     switch (aoc)
@@ -505,9 +505,9 @@
    * @return The docking color.
    */
   public Color getDockingColor()
-    {
-	return dockingColor;
-    }
+  {
+    return dockingColor;
+  }
 
   /**
    * This method returns the Color which is displayed when over a floating
@@ -516,9 +516,9 @@
    * @return The color which is displayed when over a floating area.
    */
   public Color getFloatingColor()
-    {
-	return floatingColor;
-    }
+  {
+    return floatingColor;
+  }
 
   /**
    * This method returns the maximum size of the given JComponent for this UI.
@@ -528,9 +528,9 @@
    * @return The maximum size for this UI.
    */
   public Dimension getMaximumSize(JComponent c)
-    {
+  {
     return getPreferredSize(c);
-    }
+  }
 
   /**
    * This method returns the minimum size of the given JComponent for this UI.
@@ -540,9 +540,9 @@
    * @return The minimum size for this UI.
    */
   public Dimension getMinimumSize(JComponent c)
-    {
+  {
     return getPreferredSize(c);
-    }
+  }
 
   /**
    * This method returns the preferred size of the given JComponent for this
@@ -553,15 +553,15 @@
    * @return The preferred size for this UI.
    */
   public Dimension getPreferredSize(JComponent c)
-    {
+  {
     return toolBar.getLayout().preferredLayoutSize(c);
-    }
+  }
 
   /**
    * This method installs the needed components for the JToolBar.
    */
-    protected void installComponents()
-    {
+  protected void installComponents()
+  {
     floatFrame = (Window) createFloatingWindow(toolBar);
 
     dragWindow = createDragWindow(toolBar);
@@ -575,13 +575,13 @@
     borders = new Hashtable();
 
     fillHashtable();
-    }
+  }
 
   /**
    * This method installs the defaults as specified by the look and feel.
    */
-    protected void installDefaults()
-    {
+  protected void installDefaults()
+  {
     UIDefaults defaults = UIManager.getLookAndFeelDefaults();
 
     toolBar.setBorder(new ToolBarBorder());
@@ -594,24 +594,24 @@
 
     floatingBorderColor = defaults.getColor("ToolBar.floatingForeground");
     floatingColor = defaults.getColor("ToolBar.floatingBackground");
-    }
+  }
 
   /**
    * This method installs the keyboard actions for the JToolBar as specified
    * by the look and feel.
    */
-    protected void installKeyboardActions()
-    {
+  protected void installKeyboardActions()
+  {
     // FIXME: implement.
-    }
+  }
 
   /**
    * This method installs listeners for the JToolBar.
    *
    * @param toolbar The JToolBar to register listeners for.
    */
-    protected void installListeners(JToolBar toolbar)
-    {
+  protected void installListeners(JToolBar toolbar)
+  {
     dockingListener = createDockingListener();
     toolBar.addMouseListener(dockingListener);
     toolBar.addMouseMotionListener(dockingListener);
@@ -636,13 +636,13 @@
    * @param c The JComponent whose children need to have non rollover borders
    *        installed.
    */
-    protected void installNonRolloverBorders(JComponent c)
-    {
+  protected void installNonRolloverBorders(JComponent c)
+  {
     Component[] components = toolBar.getComponents();
 
     for (int i = 0; i < components.length; i++)
       setBorderToNonRollover(components[i]);
-    }
+  }
 
   /**
    * This method installs normal (or their original) borders for each
@@ -651,13 +651,13 @@
    * @param c The JComponent whose children need to have their original
    *        borders installed.
    */
-    protected void installNormalBorders(JComponent c)
-    {
+  protected void installNormalBorders(JComponent c)
+  {
     Component[] components = toolBar.getComponents();
 
     for (int i = 0; i < components.length; i++)
       setBorderToNormal(components[i]);
-    }
+  }
 
   /**
    * This method install rollover borders for each component inside the given
@@ -666,13 +666,13 @@
    * @param c The JComponent whose children need to have rollover borders
    *        installed.
    */
-    protected void installRolloverBorders(JComponent c)
-    {
+  protected void installRolloverBorders(JComponent c)
+  {
     Component[] components = toolBar.getComponents();
 
     for (int i = 0; i < components.length; i++)
       setBorderToRollover(components[i]);
-    }
+  }
 
   /**
    * This method fills the borders hashtable with a list of components that
@@ -700,20 +700,20 @@
    *
    * @param c The JComponent to install a UI for.
    */
-    public void installUI(JComponent c)
-    {
-	super.installUI(c);
+  public void installUI(JComponent c)
+  {
+    super.installUI(c);
 
-	if (c instanceof JToolBar)
-	{
-	    toolBar = (JToolBar) c;
-	    toolBar.setOpaque(true);
+    if (c instanceof JToolBar)
+      {
+	toolBar = (JToolBar) c;
+	toolBar.setOpaque(true);
 	installDefaults();
 	installComponents();
-	    installListeners(toolBar);
+	installListeners(toolBar);
 	installKeyboardActions();
-	}
-    }
+      }
+  }
 
   /**
    * This method returns whether the JToolBar is floating.
@@ -721,9 +721,9 @@
    * @return Whether the JToolBar is floating.
    */
   public boolean isFloating()
-    {
+  {
     return floatFrame.isVisible();
-    }
+  }
 
   /**
    * This method returns whether rollover borders have been set.
@@ -731,9 +731,9 @@
    * @return Whether rollover borders have been set.
    */
   public boolean isRolloverBorders()
-    {
+  {
     return toolBar.isRollover();
-    }
+  }
 
   /**
    * This method navigates in the given direction giving focus to the next
@@ -741,10 +741,10 @@
    *
    * @param direction The direction to give focus to.
    */
-    protected void navigateFocusedComp(int direction)
-    {
+  protected void navigateFocusedComp(int direction)
+  {
     // FIXME: Implement.
-    }
+  }
 
   /**
    * This method sets the border of the given component to a non rollover
@@ -752,45 +752,45 @@
    *
    * @param c The Component whose border needs to be set.
    */
-    protected void setBorderToNonRollover(Component c)
-    {
+  protected void setBorderToNonRollover(Component c)
+  {
     if (c instanceof JButton)
       {
 	JButton b = (JButton) c;
 	b.setRolloverEnabled(false);
 	b.setBorder(nonRolloverBorder);
       }
-    }
+  }
 
   /**
    * This method sets the border of the given component to its original value.
    *
    * @param c The Component whose border needs to be set.
    */
-    protected void setBorderToNormal(Component c)
-    {
+  protected void setBorderToNormal(Component c)
+  {
     if (c instanceof JButton)
       {
 	JButton b = (JButton) c;
 	Border border = (Border) borders.get(b);
 	b.setBorder(border);
       }
-    }
+  }
 
   /**
    * This method sets the border of the given component to a rollover border.
    *
    * @param c The Component whose border needs to be set.
    */
-    protected void setBorderToRollover(Component c)
-    {
+  protected void setBorderToRollover(Component c)
+  {
     if (c instanceof JButton)
       {
 	JButton b = (JButton) c;
 	b.setRolloverEnabled(true);
 	b.setBorder(rolloverBorder);
       }
-    }
+  }
 
   /**
    * This method sets the docking color.
@@ -798,9 +798,9 @@
    * @param c The docking color.
    */
   public void setDockingColor(Color c)
-    {
-	dockingColor = c;
-    }
+  {
+    dockingColor = c;
+  }
 
   /**
    * This method sets the floating property for the JToolBar.
@@ -822,9 +822,9 @@
    * @param c The floating color.
    */
   public void setFloatingColor(Color c)
-    {
+  {
     floatingColor = c;
-    }
+  }
 
   /**
    * This method sets the floating location of the JToolBar.
@@ -872,7 +872,7 @@
    * This method uninstall UI installed components from the JToolBar.
    */
   protected void uninstallComponents()
-    {
+  {
     installNormalBorders(toolBar);
     borders = null;
     rolloverBorder = null;
@@ -896,21 +896,21 @@
     dockingColor = null;
     floatingBorderColor = null;
     floatingColor = null;
-    }
+  }
 
   /**
    * This method uninstalls keyboard actions installed by the UI.
    */
   protected void uninstallKeyboardActions()
-    {
+  {
     // FIXME: implement.
-    }
+  }
 
   /**
    * This method uninstalls listeners installed by the UI.
    */
   protected void uninstallListeners()
-    {
+  {
     toolBar.removeFocusListener(toolBarFocusListener);
     toolBarFocusListener = null;
 
@@ -923,7 +923,7 @@
     toolBar.removeMouseMotionListener(dockingListener);
     toolBar.removeMouseListener(dockingListener);
     dockingListener = null;
-    }
+  }
 
   /**
    * This method uninstalls the UI.
@@ -931,7 +931,7 @@
    * @param c The JComponent that is having this UI removed.
    */
   public void uninstallUI(JComponent c)
-    {
+  {
     uninstallKeyboardActions();
     uninstallListeners();
     uninstallComponents();
@@ -1038,7 +1038,7 @@
         {
 	  if (e.getX() > insets.left)
 	    return;
-    }
+        }
       else
         {
 	  if (e.getY() > insets.top)
