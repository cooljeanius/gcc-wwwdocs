--- /home/tromey/gnu/Nightly/classpath/classpath/java/sql/Timestamp.java	2004-07-16 02:22:01.000000000 -0600
+++ java/sql/Timestamp.java	2004-07-22 11:06:36.000000000 -0600
@@ -39,7 +39,6 @@
 package java.sql;
 
 import java.text.ParseException;
-import java.text.DecimalFormat;
 import java.text.SimpleDateFormat;
 
 /**
@@ -59,10 +58,8 @@
   /**
    * Used for parsing and formatting this date.
    */
-  private static SimpleDateFormat dateFormat =
+  private static SimpleDateFormat sdf =
     new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
-  private static DecimalFormat decimalFormat = new DecimalFormat("000000000");
-  private static StringBuffer sbuf = new StringBuffer(29);
 
   /**
     * The nanosecond value for this object
@@ -99,7 +96,7 @@
 
     try
       {
-	java.util.Date d = (java.util.Date) dateFormat.parseObject(str);
+	java.util.Date d = (java.util.Date)sdf.parseObject(str);
 
 	if (d == null)
 	  throw new IllegalArgumentException(str);
@@ -136,24 +133,14 @@
 
   /**
    * This method initializes a new instance of this class with the
-   * specified time value representing the number of milliseconds since 
+   * specified time value representing the number of seconds since 
    * Jan 1, 1970 at 12:00 midnight GMT.
    *
    * @param time The time value to intialize this <code>Time</code> to.
    */
   public Timestamp(long date)
   {
-    super(date - (date % 1000));
-    nanos = (int) (date % 1000) * 1000000;
-  }
-
-  /**
-   * Return the value of this Timestamp as the number of milliseconds 
-   * since Jan 1, 1970 at 12:00 midnight GMT.
-   */
-  public long getTime()
-  {
-    return super.getTime() + (nanos / 1000000);
+    super(date);
   }
 
   /**
@@ -163,17 +150,7 @@
    */
   public String toString()
   {
-    synchronized (dateFormat)
-      {
-        sbuf.setLength(0);
-	dateFormat.format(this, sbuf, null);
-	sbuf.append('.');
-	decimalFormat.format(nanos, sbuf, null);
-	int end = sbuf.length() - 1;
-	while (end > 20 && sbuf.charAt(end) == '0')
-	  end--;
-	return sbuf.substring(0, end + 1);
-      }
+    return sdf.format(this) + "." + getNanos();
   }
 
   /**
@@ -205,10 +182,12 @@
    */
   public boolean before(Timestamp ts)
   {
-    long time1 = getTime();
-    long time2 = ts.getTime();
-    if (time1 < time2 || (time1 == time2 && getNanos() < ts.getNanos()))
+    if (ts.getTime() > getTime())
       return true;
+
+    if (ts.getNanos() > getNanos())
+      return true;
+
     return false;
   }
 
@@ -223,10 +202,12 @@
    */
   public boolean after(Timestamp ts)
   {
-    long time1 = getTime();
-    long time2 = ts.getTime();
-    if (time1 > time2 || (time1 == time2 && getNanos() > ts.getNanos()))
+    if (ts.getTime() < getTime())
       return true;
+
+    if (ts.getNanos() < getNanos())
+      return true;
+
     return false;
   }
 
