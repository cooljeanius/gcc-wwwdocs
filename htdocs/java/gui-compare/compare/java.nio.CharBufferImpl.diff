--- /home/tromey/gnu/Nightly/classpath/classpath/java/nio/CharBufferImpl.java	2004-06-21 06:23:59.000000000 -0600
+++ java/nio/CharBufferImpl.java	2004-07-22 11:06:31.000000000 -0600
@@ -1,5 +1,5 @@
 /* CharBufferImpl.java -- 
-   Copyright (C) 2002, 2003, 2004 Free Software Foundation, Inc.
+   Copyright (C) 2002, 2003 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -116,16 +116,10 @@
   }
   
   /**
-   * Reads the <code>char</code> at this buffer's current position,
-   * and then increments the position.
-   *
-   * @exception BufferUnderflowException If there are no remaining
-   * <code>char</code>s in this buffer.
+   * Relative get method. Reads the next <code>char</code> from the buffer.
    */
   public char get ()
   {
-    checkForUnderflow();
-
     char result = backing_buffer [position ()];
     position (position () + 1);
     return result;
@@ -139,7 +133,8 @@
    */
   public CharBuffer put (char value)
   {
-    checkIfReadOnly();
+    if (readOnly)
+      throw new ReadOnlyBufferException ();
 	  	    
     backing_buffer [position ()] = value;
     position (position () + 1);
@@ -150,20 +145,20 @@
    * Absolute get method. Reads the <code>char</code> at position
    * <code>index</code>.
    *
-   * @param index Position to read the <code>char</code> from.
-   *
    * @exception IndexOutOfBoundsException If index is negative or not smaller
    * than the buffer's limit.
    */
   public char get (int index)
   {
-    checkIndex(index);
+    if (index < 0
+        || index >= limit ())
+      throw new IndexOutOfBoundsException ();
     
     return backing_buffer [index];
   }
   
   /**
-   * Absolute put method. Writes <code>value</code> to position
+   * Absolute put method. Writes <code>value</value> to position
    * <code>index</code> in the buffer.
    *
    * @exception IndexOutOfBoundsException If index is negative or not smaller
@@ -172,8 +167,12 @@
    */
   public CharBuffer put (int index, char value)
   {
-    checkIndex(index);
-    checkIfReadOnly();
+    if (index < 0
+        || index >= limit ())
+      throw new IndexOutOfBoundsException ();
+    
+    if (readOnly)
+      throw new ReadOnlyBufferException ();
     	    
     backing_buffer [index] = value;
     return this;
