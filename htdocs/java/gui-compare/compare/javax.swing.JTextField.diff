--- /home/tromey/gnu/Nightly/classpath/classpath/javax/swing/JTextField.java	2004-09-05 02:26:53.000000000 -0600
+++ javax/swing/JTextField.java	2004-09-14 02:22:02.000000000 -0600
@@ -42,6 +42,8 @@
 import java.awt.FontMetrics;
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
+import java.beans.PropertyChangeEvent;
+import java.beans.PropertyChangeListener;
 
 import javax.accessibility.AccessibleStateSet;
 import javax.swing.text.Document;
@@ -84,6 +86,16 @@
 
   private int align;
 
+  private int scrollOffset;
+
+  /** @since 1.3 */
+  private Action action;
+
+  /** @since 1.3 */
+  private String actionCommand;
+  
+  private PropertyChangeListener actionPropertyChangeListener;
+
   /**
    * Creates a new instance of <code>JTextField</code>.
    */
@@ -146,7 +158,7 @@
     setDocument(doc == null ? createDefaultModel() : doc);
 
     if (text != null)
-    setText(text);
+      setText(text);
   }
 
   /**
@@ -242,11 +254,14 @@
 
   public void setHorizontalAlignment(int newAlign)
   {
+    if (align == newAlign)
+      return;
+
     int oldAlign = align;
     align = newAlign;
+    firePropertyChange("horizontalAlignment", oldAlign, newAlign);
     invalidate();
     repaint();
-    firePropertyChange("horizontalAlignment", oldAlign, newAlign);
   }
 
   public void setFont(Font newFont)
@@ -273,4 +288,134 @@
 
     return size;
   }
+
+  /**
+   * Returns the scroll offset in pixels.
+   *
+   * @return the scroll offset
+   */
+  public int getScrollOffset()
+  {
+    return scrollOffset;
+  }
+
+  /**
+   * Sets the scroll offset in pixels.
+   * 
+   * @param offset the scroll offset
+   */
+  public void setScrollOffset(int offset)
+  {
+    scrollOffset = offset;
+  }
+
+  public void postActionEvent()
+  {
+    ActionEvent event = new ActionEvent(this, 0, actionCommand);
+    ActionListener[] listeners = getActionListeners();
+
+    for (int index = 0; index < listeners.length; ++index)
+      listeners[index].actionPerformed(event);
+  }
+  
+  /**
+   * @since 1.3
+   */
+  public Action getAction()
+  {
+    return action;
+  }
+
+  /**
+   * @since 1.3
+   */
+  public void setAction(Action newAction)
+  {
+    if (action == newAction)
+      return;
+
+    if (action != null)
+      {
+	removeActionListener(action);
+	action.removePropertyChangeListener(actionPropertyChangeListener);
+	actionPropertyChangeListener = null;
+      }
+    
+    Action oldAction = action;
+    action = newAction;
+
+    if (action != null)
+      {
+	addActionListener(action);
+	actionPropertyChangeListener =
+	  createActionPropertyChangeListener(action);
+	action.addPropertyChangeListener(actionPropertyChangeListener);
+      }
+    
+    firePropertyChange("horizontalAlignment", oldAction, newAction);
+  }
+
+  /**
+   * @since 1.3
+   */
+  public String getActionCommand()
+  {
+    return actionCommand;
+  }
+
+  /**
+   * @since 1.3
+   */
+  public void setActionCommand(String command)
+  {
+    this.actionCommand = command;
+  }
+
+  /**
+   * @since 1.3
+   */
+  protected PropertyChangeListener createActionPropertyChangeListener(Action action)
+  {
+    return new PropertyChangeListener()
+      {
+	public void propertyChange(PropertyChangeEvent event)
+	{
+	  // Update properties "action" and "horizontalAlignment".
+	  String name = event.getPropertyName();
+
+	  if (name.equals("enabled"))
+	    {
+	      boolean enabled = ((Boolean) event.getNewValue()).booleanValue();
+	      JTextField.this.setEnabled(enabled);
+	    }
+	  else if (name.equals(Action.SHORT_DESCRIPTION))
+	    {
+	      JTextField.this.setToolTipText((String) event.getNewValue());
+	    }
+	}
+      };
+  }
+
+  /**
+   * @since 1.3
+   */
+  protected void configurePropertiesFromAction(Action action)
+  {
+    if (action != null)
+      {
+	setEnabled(action.isEnabled());
+	setToolTipText((String) action.getValue(Action.SHORT_DESCRIPTION));
+      }
+    else
+      {
+	setEnabled(true);      
+	setToolTipText(null);
+      }
+  }
+
+  protected int getColumnWidth()
+  {
+    FontMetrics metrics = getToolkit().getFontMetrics(getFont());
+    return metrics.charWidth('m');
+  }
 }
