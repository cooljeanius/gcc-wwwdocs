--- /home/tromey/gnu/Nightly/classpath/classpath/gnu/java/security/provider/DSAParameters.java	2003-04-24 02:22:05.000000000 -0600
+++ gnu/java/security/provider/DSAParameters.java	2002-08-12 10:10:53.000000000 -0600
@@ -1,5 +1,5 @@
 /* DSAParameters.java --- DSA Parameters Implementation
-   Copyright (C) 1999,2003 Free Software Foundation, Inc.
+   Copyright (C) 1999 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -38,28 +38,15 @@
 
 package gnu.java.security.provider;
 
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
 import java.io.IOException;
-
 import java.math.BigInteger;
-
 import java.security.AlgorithmParametersSpi;
 import java.security.InvalidAlgorithmParameterException;
 import java.security.spec.AlgorithmParameterSpec;
 import java.security.spec.DSAParameterSpec;
 import java.security.spec.InvalidParameterSpecException;
-
-import java.util.ArrayList;
-import java.util.List;
 import java.util.Random;
-
-import gnu.java.io.ASN1ParsingException;
-import gnu.java.security.der.DER;
 import gnu.java.security.der.DEREncodingException;
-import gnu.java.security.der.DERReader;
-import gnu.java.security.der.DERValue;
-import gnu.java.security.der.DERWriter;
 
 import gnu.java.security.util.Prime;
 
@@ -89,7 +76,7 @@
 		DSAParameterSpec dsaParamSpec = (DSAParameterSpec)paramSpec;
 		p = dsaParamSpec.getP();
 		q = dsaParamSpec.getQ();
-		g = dsaParamSpec.getG();
+		q = dsaParamSpec.getG();
 	}
 	else
 		throw new InvalidParameterSpecException("Only accepts DSAParameterSpec");
@@ -98,20 +85,16 @@
 public void engineInit(byte[] params)
                             throws IOException
 {
-	DERReader in = new DERReader(params);
-	DERValue val = in.read();
-	if (val.getValue() != DER.CONSTRUCTED_VALUE)
-		throw new ASN1ParsingException("badly formed parameters");
-	try
-		{
-			p = (BigInteger) in.read().getValue();
-			q = (BigInteger) in.read().getValue();
-			g = (BigInteger) in.read().getValue();
-		}
-	catch (Exception x)
-		{
-			throw new ASN1ParsingException("badly formed parameters");
-		}
+	DERReader reader = new DERReader( params );
+	try {
+
+		p = reader.getBigInteger();
+		q = reader.getBigInteger();
+		g = reader.getBigInteger();
+
+	} catch ( DEREncodingException DERee) {
+		throw new IOException("Invalid Format: Only accepts ASN.1");
+	}
 }
 
 public void engineInit(byte[] params, String format)
@@ -134,13 +117,10 @@
 public byte[] engineGetEncoded()
                                     throws IOException
 {
-	ByteArrayOutputStream bout = new ByteArrayOutputStream();
-	ArrayList seq = new ArrayList(3);
-	seq.add(new DERValue(DER.INTEGER, p));
-	seq.add(new DERValue(DER.INTEGER, q));
-	seq.add(new DERValue(DER.INTEGER, g));
-	DERWriter.write(bout, new DERValue(DER.CONSTRUCTED | DER.SEQUENCE, seq));
-	return bout.toByteArray();
+	DERWriter writer = new DERWriter();
+	return writer.joinarrays( writer.writeBigInteger(p), 
+				writer.writeBigInteger(q), 
+				writer.writeBigInteger(g) );
 }
 
 
@@ -155,7 +135,7 @@
 public String engineToString()
 {
 	String lineSeparator = System.getProperty("line.seperator");
-	return ("q: " + q + " p: " + p + " g: " + g);
+	return ("q: " + q + lineSeparator + "p: " + p + lineSeparator + "g:" + g);
 }
 
 }
