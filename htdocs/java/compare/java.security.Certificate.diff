--- /home/tromey/gnu/egcs/classpath/classpath/java/security/Certificate.java	Sun Mar 31 23:08:12 2002
+++ java/security/Certificate.java	Tue Jan 22 16:01:36 2002
@@ -1,5 +1,5 @@
-/* Certificate.java -- deprecated interface for modeling digital certificates
-   Copyright (C) 1998, 2002 Free Software Foundation, Inc.
+/* Certificate.java -- Interface for modeling digital certificates
+   Copyright (C) 1998 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -42,90 +42,84 @@
 import java.io.IOException;
 
 /**
- * This interface models a digital certificate which verifies the
+ * This interface models a digital certificate which verifies the 
  * authenticity of a party.  This class simply allows certificate
  * information to be queried, it does not guarantee that the certificate
  * is valid.
- *
- * <p>This class is deprecated in favor of the new java.security.cert package.
+ * <p>
+ * This class is deprecated in favor of the new java.security.cert package.
  * It exists for backward compatibility only.
+ * 
+ * @deprecated
+ *
+ * @version 0.0
  *
  * @author Aaron M. Renn (arenn@urbanophile.com)
- * @since 1.1
- * @deprecated use {@link java.security.cert} instead
- * @status updated to 1.4
  */
 public interface Certificate
 {
+
   /**
    * This method returns the <code>Principal</code> that is guaranteeing
    * this certificate.
    *
-   * @return the <code>Principal</code> guaranteeing the certificate
-   * @deprecated this entire interface is deprecated
+   * @return The <code>Principal</code> guaranteeing the certificate
    */
-  Principal getGuarantor();
+  public abstract Principal getGuarantor();
 
   /**
    * This method returns the <code>Principal</code> being guaranteed by
    * this certificate.
    *
-   * @return the <code>Principal</code> guaranteed by this certificate
-   * @deprecated this entire interface is deprecated
+   * @return The <code>Principal</code> guaranteed by this certificate.
    */
-  Principal getPrincipal();
+  public abstract Principal getPrincipal();
 
   /**
    * This method returns the public key for the <code>Principal</code> that
    * is being guaranteed.
    *
-   * @return the <code>PublicKey</code> of the Principal being guaranteed
-   * @deprecated this entire interface is deprecated
+   * @return The <code>PublicKey</code> of the <code>Principal</code> being guaranteed
    */
-  PublicKey getPublicKey();
+  public abstract PublicKey getPublicKey();
 
   /**
-   * This method writes the certificate to an <code>OutputStream</code> in
-   * a format that can be understood by the <code>decode</code> method.
+   * This method returns the encoding format of the certificate (e.g., "PGP",
+   * "X.509").  This format is used by the <code>encode</code. and
+   * <code>decode</code> methods.
    *
-   * @param out the <code>OutputStream</code> to write to
-   * @throws KeyException if there is a problem with the certificate
-   * @throws IOException if an error occurs writing to the stream
-   * @see #decode(InputStream)
-   * @see #getFormat()
-   * @deprecated this entire interface is deprecated
+   * @return The encoding format being used
    */
-  void encode(OutputStream out) throws KeyException, IOException;
+  public abstract String getFormat();
 
   /**
-   * This method reads an encoded certificate from an <code>InputStream</code>.
+   * This method writes the certificate to an <code>OutputStream</code> in
+   * a format that can be understood by the <code>decode</code> method.
    *
-   * @param in the <code>InputStream</code> to read from
-   * @throws KeyException if there is a problem with the certificate data
-   * @throws IOException if an error occurs reading from the stream
-   * @see #encode(OutputStream)
-   * @see #getFormat()
-   * @deprecated this entire interface is deprecated
+   * @param out The <code>OutputStream</code> to write to.
+   *
+   * @exception KeyException If there is a problem with the internals of this certificate
+   * @exception IOException If an error occurs writing to the stream.
    */
-  void decode(InputStream in) throws KeyException, IOException;
+  public abstract void
+    encode(OutputStream out) throws KeyException, IOException;
 
   /**
-   * This method returns the encoding format of the certificate (e.g., "PGP",
-   * "X.509").  This format is used by the <code>encode</code> and
-   * <code>decode</code> methods.
+   * This method reads an encoded certificate from an <code>InputStream</code>.
+   *
+   * @param in The <code>InputStream</code> to read from.
    *
-   * @return the encoding format being used
-   * @deprecated this entire interface is deprecated
+   * @param KeyException If there is a problem with the certificate data
+   * @param IOException If an error occurs reading from the stream.
    */
-  String getFormat();
+  public abstract void
+    decode(InputStream in) throws KeyException, IOException;
 
   /**
    * This method returns a <code>String</code> representation of the contents
    * of this certificate.
    *
-   * @param detail true to provided more detailed information
-   * @return the string representation
-   * @deprecated this entire interface is deprecated
+   * @param detail <code>true</code> to provided detailed information about this certificate, <code>false</code> otherwise
    */
-  String toString(boolean detail);
-} // interface Certificate
+  public abstract String toString(boolean detail);
+}
