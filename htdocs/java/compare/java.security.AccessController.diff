--- /home/tromey/gnu/Nightly/classpath/classpath/java/security/AccessController.java	2004-06-08 02:25:14.000000000 -0600
+++ java/security/AccessController.java	2004-04-21 02:18:11.000000000 -0600
@@ -115,15 +115,7 @@
   public static Object doPrivileged(PrivilegedAction action,
 				    AccessControlContext context)
   {
-    VMAccessController.pushContext (context, action.getClass());
-    try
-      {
-        return action.run();
-      }
-    finally
-      {
-        VMAccessController.popContext (action.getClass());
-      }
+    return action.run();
   }
 
   /**
@@ -178,7 +170,6 @@
 				    AccessControlContext context)
     throws PrivilegedActionException
   {
-    VMAccessController.pushContext (context, action.getClass());
 
     try
       {
@@ -188,28 +179,19 @@
       {
 	throw new PrivilegedActionException(e);
       }
-    finally
-      {
-        VMAccessController.popContext (action.getClass());
-      }
   }
 
   /**
    * Returns the complete access control context of the current thread.
-   * The returned object encompasses all {@link ProtectionDomain} objects
-   * for all classes in the current call stack, or the set of protection
-   * domains until the last call to {@link
-   * #doPrivileged(java.security.PrivilegedAction)}.
-   *
-   * <p>Additionally, if a call was made to {@link
-   * #doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)}
-   * that supplied an {@link AccessControlContext}, then that context
-   * will be intersected with the calculated one.
-   *
-   * @return The context.
+   * <p>
+   * XXX - Should this include all the protection domains in the call chain
+   * or only the domains till the last <code>doPrivileged()</code> call?
+   * <p>
+   * XXX - needs native support. Currently returns an empty context.
    */
   public static AccessControlContext getContext()
   {
-    return VMAccessController.getContext();
+    // For now just return an new empty context
+    return new AccessControlContext(new ProtectionDomain[0]);
   }
 }
