--- /home/tromey/gnu/Nightly/classpath/classpath/java/nio/ByteBuffer.java	2003-03-11 10:27:52.000000000 -0700
+++ java/nio/ByteBuffer.java	2003-05-02 02:20:07.000000000 -0600
@@ -46,8 +46,8 @@
 {
   private ByteOrder endian = ByteOrder.BIG_ENDIAN;
 
-  protected int offset;
-  protected byte[] backing_buffer;
+  int offset;
+  byte[] backing_buffer;
   
   /**
    * Allocates a new direct byte buffer.
@@ -84,7 +84,7 @@
     return wrap (array, 0, array.length);
   }
 
-  protected ByteBuffer (int capacity, int limit, int position, int mark)
+  ByteBuffer (int capacity, int limit, int position, int mark)
   {
     super (capacity, limit, position, mark);
   }
@@ -199,7 +199,7 @@
   }
 
   /**
-   * Tells whether or not this buffer is backed by an accessible byte array.
+   * Tells whether or not this buffer is backed by an accessible array.
    */
   public final boolean hasArray ()
   {
@@ -251,7 +251,7 @@
    */
   public int hashCode()
   {
-    // FIXME: Check what SUN calcs here
+    // FIXME: Check what SUN calculates here
     return super.hashCode();
   }
 
@@ -344,7 +344,8 @@
   /**
    * Absolute get method.
    *
-   * @exception IndexOutOfBoundsException FIXME
+   * @exception IndexOutOfBoundsException If index &lt; 0 or index &gt;= this
+   * buffers limit.
    */
   public abstract byte get (int index);
   
@@ -352,7 +353,8 @@
    * Absolute put method.
    *
    * @exception ReadOnlyBufferException If this buffer is read-only
-   * @exception IndexOutOfBoundsException FIXME
+   * @exception IndexOutOfBoundsException If index &lt; 0 or index &gt;= this
+   * buffers limit.
    */
   public abstract ByteBuffer put (int index, byte b);
   
