--- /home/tromey/gnu/Nightly/classpath/classpath/java/awt/image/IndexColorModel.java	2003-06-19 02:34:40.000000000 -0600
+++ java/awt/image/IndexColorModel.java	2002-08-12 10:11:11.000000000 -0600
@@ -39,6 +39,7 @@
 package java.awt.image;
 
 /**
+ *
  * @author C. Brian Jones (cbj@gnu.org) 
  */
 public class IndexColorModel extends ColorModel
@@ -46,6 +47,7 @@
     private int map_size;
     private boolean opaque;
     private int trans = -1;
+
     private int[] rgb;
 
     /**
@@ -61,8 +63,7 @@
      * @param blues the blue component of all colors
      */
     public IndexColorModel(int bits, int size, byte[] reds, byte[] greens,
-                         byte[] blues)
-  {
+			   byte[] blues) {
 	this(bits, size, reds, greens, blues, (byte[])null);
     }
 
@@ -80,8 +81,7 @@
      * @param trans the index of the transparent color
      */
     public IndexColorModel(int bits, int size, byte[] reds, byte[] greens,
-                         byte[] blues, int trans)
-  {
+			   byte[] blues, int trans) {
 	this(bits, size, reds, greens, blues, (byte[])null);
 	this.trans = trans;
     }
@@ -100,31 +100,26 @@
      * @param alphas the alpha component of all colors
      */
     public IndexColorModel(int bits, int size, byte[] reds, byte[] greens,
-                         byte[] blues, byte[] alphas)
-  {
+			   byte[] blues, byte[] alphas) {
 	super(bits);
 	map_size = size;
 	opaque = (alphas == null);
 
 	rgb = new int[size];
-    if (alphas == null)
-      {
-        for (int i = 0; i < size; i++)
-          {
-            rgb[i] = (0xff000000
-                      | ((reds[i] & 0xff) << 16)
-                      | ((greens[i] & 0xff) << 8)
-                      | (blues[i] & 0xff));
+	if (alphas == null) {
+	    for (int i = 0; i < size; i++) {
+		rgb[i] = 0xff000000 | 
+		         ((reds[i] & 0xff) << 16) |
+		         ((greens[i] & 0xff) << 8) |
+		          (blues[i] & 0xff);
 	    }
 	}
-    else
-      {
-        for (int i = 0; i < size; i++)
-          {
-            rgb[i] = ((alphas[i] & 0xff) << 24
-                      | ((reds[i] & 0xff) << 16)
-                      | ((greens[i] & 0xff) << 8)
-                      | (blues[i] & 0xff));
+	else {
+	    for (int i = 0; i < size; i++) {
+		rgb[i] = ((alphas[i] & 0xff) << 24 | 
+		         ((reds[i] & 0xff) << 16) |
+		         ((greens[i] & 0xff) << 8) |
+		          (blues[i] & 0xff));
 	    }
 	}
     }
@@ -142,8 +137,7 @@
      * @param hasAlpha <code>cmap</code> has alpha values
      */
     public IndexColorModel(int bits, int size, byte[] cmap, int start, 
-                          boolean hasAlpha)
-  {
+			   boolean hasAlpha) {
 	this(bits, size, cmap, start, hasAlpha, -1);
     }
 
@@ -161,56 +155,49 @@
      * @param trans the index of the transparent color
      */
     public IndexColorModel(int bits, int size, byte[] cmap, int start, 
-                          boolean hasAlpha, int trans)
-  {
+			   boolean hasAlpha, int trans) {
 	super(bits);
 	map_size = size;
         opaque = !hasAlpha;
 	this.trans = trans;
     }
 
-  public final int getMapSize ()
-  {
+    public final int getMapSize() {
 	return map_size;
     }
 
     /**
      * Get the index of the transparent color in this color model
      */
-  public final int getTransparentPixel ()
-  {
+    public final int getTransparentPixel() {
 	return trans;
     }
 
     /**
      * <br>
      */
-  public final void getReds (byte[] r)
-  {
+    public final void getReds(byte[] r) {
 	getComponents( r, 2 );
     }
 
     /**
      * <br>
      */
-  public final void getGreens (byte[] g)
-  {
+    public final void getGreens(byte[] g) {
 	getComponents( g, 1 );
     }
 
     /**
      * <br>
      */
-  public final void getBlues (byte[] b)
-  {
+    public final void getBlues(byte[] b) {
 	getComponents( b, 0 );
     }
 
     /**
      * <br>
      */
-  public final void getAlphas (byte[] a)
-  {
+    public final void getAlphas(byte[] a) {
 	getComponents( a, 3 );
     }
 
@@ -223,59 +210,54 @@
 
     /**
      * Get the red component of the given pixel.
+     * <br>
      */
-  public final int getRed (int pixel)
-  {
+    public final int getRed(int pixel) {
 	if( pixel < map_size ) 
 	    return  (int)(( generateMask( 2 )  & rgb[pixel]) >> (2 * pixel_bits ) );
-    
 	return 0;
     }
 
     /**
      * Get the green component of the given pixel.
+     * <br>
      */
-  public final int getGreen (int pixel)
-  {
+    public final int getGreen(int pixel) {
 	if( pixel < map_size ) 
 	    return (int)(( generateMask( 1 )  & rgb[pixel]) >> (1 * pixel_bits ) );
-    
 	return 0;
     }
 
     /**
      * Get the blue component of the given pixel.
+     * <br>
      */
-  public final int getBlue (int pixel)
-  {
+    public final int getBlue(int pixel) {
 	if( pixel < map_size ) 
 	    return  (int)( generateMask( 0 )  & rgb[pixel]);
-    
 	return 0;
     }
 
     /**
      * Get the alpha component of the given pixel.
+     * <br>
      */
-  public final int getAlpha (int pixel)
-  {
+    public final int getAlpha(int pixel) {
 	if( pixel < map_size ) 
 	    return  (int)(( generateMask( 3 )  & rgb[pixel]) >> (3 * pixel_bits ) );
-    
 	return 0;
     }
 
     /**
      * Get the RGB color value of the given pixel using the default
      * RGB color model. 
+     * <br>
      *
      * @param pixel a pixel value
      */
-  public final int getRGB (int pixel)
-  {
+    public final int getRGB(int pixel) {
 	if( pixel < map_size ) 
 	    return rgb[pixel];
-    
 	return 0;
     }
     
