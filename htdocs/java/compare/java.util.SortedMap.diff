--- /home/tromey/gnu/Nightly/classpath/classpath/java/util/SortedMap.java	2004-10-28 02:27:38.000000000 -0600
+++ java/util/SortedMap.java	2004-08-02 02:18:35.000000000 -0600
@@ -97,10 +97,10 @@
    * <p>
    *
    * The returned map throws an IllegalArgumentException any time a key is
-   * used which is out of the range of toKey. Note that the endpoint, toKey,
-   * is not included; if you want this value to be included, pass its successor
-   * object in to toKey.  For example, for Integers, you could request
-   * <code>headMap(new Integer(limit.intValue() + 1))</code>.
+   * used which is out of the range of toKey. Note that the endpoint is not
+   * included; if you want the endpoint, pass the successor object in to
+   * toKey.  For example, for Strings, you can request
+   * <code>headMap(limit + "\0")</code>.
    *
    * @param toKey the exclusive upper range of the submap
    * @return the submap
@@ -130,10 +130,9 @@
    * The returned map throws an IllegalArgumentException any time a key is
    * used which is out of the range of fromKey and toKey. Note that the
    * lower endpoint is included, but the upper is not; if you want to
-   * change the inclusion or exclusion of an endpoint, pass its successor
-   * object in instead.  For example, for Integers, you could request
-   * <code>subMap(new Integer(lowlimit.intValue() + 1),
-   * new Integer(highlimit.intValue() + 1))</code> to reverse
+   * change the inclusion or exclusion of an endpoint, pass the successor
+   * object in instead.  For example, for Strings, you can request
+   * <code>subMap(lowlimit + "\0", highlimit + "\0")</code> to reverse
    * the inclusiveness of both endpoints.
    *
    * @param fromKey the inclusive lower range of the submap
@@ -155,10 +154,10 @@
    * <p>
    *
    * The returned map throws an IllegalArgumentException any time a key is
-   * used which is out of the range of fromKey. Note that the endpoint, fromKey, is
-   * included; if you do not want this value to be included, pass its successor object in
-   * to fromKey.  For example, for Integers, you could request
-   * <code>tailMap(new Integer(limit.intValue() + 1))</code>.
+   * used which is out of the range of fromKey. Note that the endpoint is
+   * included; if you do not want the endpoint, pass the successor object in
+   * to fromKey.  For example, for Strings, you can request
+   * <code>tailMap(limit + "\0")</code>.
    *
    * @param fromKey the inclusive lower range of the submap
    * @return the submap
