--- /home/tromey/gnu/egcs/classpath/classpath/java/util/LinkedHashMap.java	Fri Oct 26 16:06:57 2001
+++ java/util/LinkedHashMap.java	Mon Oct 15 23:47:01 2001
@@ -28,6 +28,11 @@
 
 package java.util;
 
+import java.io.IOException;
+import java.io.Serializable;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+
 /**
  * This class provides a hashtable-backed implementation of the
  * Map interface, with predictable traversal order.
@@ -84,7 +89,6 @@
  * @see TreeMap
  * @see Hashtable
  * @since 1.4
- * @status updated to 1.4
  */
 public class LinkedHashMap extends HashMap
 {
@@ -214,8 +218,8 @@
    * Construct a new insertion-ordered LinkedHashMap with a specific
    * inital capacity and default load factor of 0.75.
    *
-   * @param initialCapacity the initial capacity of this HashMap (&gt;= 0)
-   * @throws IllegalArgumentException if (initialCapacity &lt; 0)
+   * @param initialCapacity the initial capacity of this HashMap (>=0)
+   * @throws IllegalArgumentException if (initialCapacity < 0)
    */
   public LinkedHashMap(int initialCapacity)
   {
@@ -227,10 +231,10 @@
    * Construct a new insertion-orderd LinkedHashMap with a specific
    * inital capacity and load factor.
    *
-   * @param initialCapacity the initial capacity (&gt;= 0)
-   * @param loadFactor the load factor (&gt; 0, not NaN)
-   * @throws IllegalArgumentException if (initialCapacity &lt; 0) ||
-   *                                     ! (loadFactor &gt; 0.0)
+   * @param initialCapacity the initial capacity (>=0)
+   * @param loadFactor the load factor (>0, not NaN)
+   * @throws IllegalArgumentException if (initialCapacity < 0) ||
+   *                                     ! (loadFactor > 0.0)
    */
   public LinkedHashMap(int initialCapacity, float loadFactor)
   {
@@ -277,7 +281,7 @@
     LinkedHashEntry e = head;
     while (e != null)
       {
-        if (equals(value, e.value))
+        if (value == null ? e.value == null : value.equals(e.value))
           return true;
         e = e.succ;
       }
@@ -303,7 +307,7 @@
     HashEntry e = buckets[idx];
     while (e != null)
       {
-        if (equals(key, e.key))
+        if (key == null ? e.key == null : key.equals(e.key))
           {
             if (accessOrder)
               {
@@ -372,14 +376,13 @@
     return false;
   }
 
-  /**
-   * Helper method called by <code>put</code>, which creates and adds a
+  /** Helper method called by <code>put</code>, which creates and adds a
    * new Entry, followed by performing bookkeeping (like removeEldestEntry).
    *
    * @param key the key of the new Entry
    * @param value the value
    * @param idx the index in buckets where the new Entry belongs
-   * @param callRemove whether to call the removeEldestEntry method
+   * @param callRemove Whether to call the removeEldestEntry method.
    * @see #put(Object, Object)
    * @see #removeEldestEntry(Map.Entry)
    */
@@ -394,11 +397,6 @@
       remove(head);
   }
 
-  /**
-   * Helper method, called by clone() to reset the doubly-linked list.
-   * @param m the map to add entries from
-   * @see #clone()
-   */
   void putAllInternal(Map m)
   {
     head = null;
@@ -468,8 +466,8 @@
           throw new IllegalStateException();
 
         LinkedHashMap.this.remove(last.key);
-        last = null;
         knownMod++;
+        last = null;
       }
     };
   }
