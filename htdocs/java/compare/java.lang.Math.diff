--- /home/tromey/gnu/Nightly/classpath/classpath/java/lang/Math.java	2003-02-28 02:18:53.000000000 -0700
+++ java/lang/Math.java	2002-02-15 00:17:03.000000000 -0700
@@ -196,7 +196,7 @@
   public static float min(float a, float b)
   {
     // this check for NaN, from JLS 15.21.1, saves a method call
-    if (Float.isNaN (a))
+    if (a != a)
       return a;
     // no need to check if b is NaN; < will work correctly
     // recall that -0.0 == 0.0, but [+-]0.0 - [+-]0.0 behaves special
@@ -216,7 +216,7 @@
   public static double min(double a, double b)
   {
     // this check for NaN, from JLS 15.21.1, saves a method call
-    if (Double.isNaN (a))
+    if (a != a)
       return a;
     // no need to check if b is NaN; < will work correctly
     // recall that -0.0 == 0.0, but [+-]0.0 - [+-]0.0 behaves special
@@ -260,7 +260,7 @@
   public static float max(float a, float b)
   {
     // this check for NaN, from JLS 15.21.1, saves a method call
-    if (Float.isNaN (a))
+    if (a != a)
       return a;
     // no need to check if b is NaN; > will work correctly
     // recall that -0.0 == 0.0, but [+-]0.0 - [+-]0.0 behaves special
@@ -280,7 +280,7 @@
   public static double max(double a, double b)
   {
     // this check for NaN, from JLS 15.21.1, saves a method call
-    if (Double.isNaN (a))
+    if (a != a)
       return a;
     // no need to check if b is NaN; > will work correctly
     // recall that -0.0 == 0.0, but [+-]0.0 - [+-]0.0 behaves special
@@ -575,8 +575,6 @@
    */
   public static int round(float a)
   {
-    if (Float.isNaN (a))
-      return 0;
     return (int) floor(a + 0.5f);
   }
 
@@ -593,8 +591,6 @@
    */
   public static long round(double a)
   {
-    if (Double.isNaN (a))
-      return 0;
     return (long) floor(a + 0.5d);
   }
 
@@ -628,7 +624,7 @@
    */
   public static double toRadians(double degrees)
   {
-    return (degrees * PI) / 180;
+    return degrees * (PI / 180);
   }
 
   /**
@@ -642,6 +638,6 @@
    */
   public static double toDegrees(double rads)
   {
-    return (rads * 180) / PI;
+    return rads * (180 / PI);
   }
 }
