--- /home/tromey/gnu/Nightly/classpath/classpath/java/nio/CharBuffer.java	2004-06-21 06:23:59.000000000 -0600
+++ java/nio/CharBuffer.java	2004-06-08 02:19:55.000000000 -0600
@@ -137,9 +137,8 @@
   }
   
   /**
-   * This method transfers <code>char</code>s from this buffer into the given
-   * destination array. Before the transfer, it checks if there are fewer than
-   * length <code>char</code>s remaining in this buffer. 
+   * This method transfers <code>chars<code> from this buffer into the given
+   * destination array.
    *
    * @param dst The destination array
    * @param offset The offset within the array of the first <code>char</code>
@@ -148,15 +147,12 @@
    * must be non-negative and no larger than dst.length - offset.
    *
    * @exception BufferUnderflowException If there are fewer than length
-   * <code>char</code>s remaining in this buffer.
+   * <code>chars</code> remaining in this buffer.
    * @exception IndexOutOfBoundsException If the preconditions on the offset
    * and length parameters do not hold.
    */
   public CharBuffer get (char[] dst, int offset, int length)
   {
-    checkArraySize(dst.length, offset, length);
-    checkForUnderflow(length);
-
     for (int i = offset; i < offset + length; i++)
       {
         dst [i] = get ();
@@ -166,13 +162,13 @@
   }
 
   /**
-   * This method transfers <code>char</code>s from this buffer into the given
+   * This method transfers <code>chars<code> from this buffer into the given
    * destination array.
    *
    * @param dst The byte array to write into.
    *
    * @exception BufferUnderflowException If there are fewer than dst.length
-   * <code>char</code>s remaining in this buffer.
+   * <code>chars</code> remaining in this buffer.
    */
   public CharBuffer get (char[] dst)
   {
@@ -181,13 +177,12 @@
 
   /**
    * Writes the content of the the <code>CharBUFFER</code> src
-   * into the buffer. Before the transfer, it checks if there is fewer than
-   * <code>src.remaining()</code> space remaining in this buffer.
+   * into the buffer.
    *
    * @param src The source data.
    *
    * @exception BufferOverflowException If there is insufficient space in this
-   * buffer for the remaining <code>char</code>s in the source buffer.
+   * buffer for the remaining <code>chars<code> in the source buffer.
    * @exception IllegalArgumentException If the source buffer is this buffer.
    * @exception ReadOnlyBufferException If this buffer is read-only.
    */
@@ -196,7 +191,8 @@
     if (src == this)
       throw new IllegalArgumentException ();
 
-    checkForOverflow(src.remaining());
+    if (src.remaining () > remaining ())
+      throw new BufferOverflowException ();
 
     if (src.remaining () > 0)
       {
@@ -210,8 +206,7 @@
 
   /**
    * Writes the content of the the <code>char array</code> src
-   * into the buffer. Before the transfer, it checks if there is fewer than
-   * length space remaining in this buffer.
+   * into the buffer.
    *
    * @param src The array to copy into the buffer.
    * @param offset The offset within the array of the first byte to be read;
@@ -220,15 +215,22 @@
    * must be non-negative and no larger than src.length - offset.
    * 
    * @exception BufferOverflowException If there is insufficient space in this
-   * buffer for the remaining <code>char</code>s in the source array.
+   * buffer for the remaining <code>chars<code> in the source array.
    * @exception IndexOutOfBoundsException If the preconditions on the offset
    * and length parameters do not hold
    * @exception ReadOnlyBufferException If this buffer is read-only.
    */
   public CharBuffer put (char[] src, int offset, int length)
   {
-    checkArraySize(src.length, offset, length);
-    checkForOverflow(length);
+    if (offset < 0
+        || offset >= src.length
+        || length < 0
+        || length > (src.length - offset))
+      throw new IndexOutOfBoundsException ();
+     
+    // Put nothing into this buffer when not enough space left.
+    if (length > remaining ())
+      throw new BufferOverflowException ();
 		    
     for (int i = offset; i < offset + length; i++)
       put (src [i]);
@@ -243,7 +245,7 @@
    * @param src The array to copy into the buffer.
    * 
    * @exception BufferOverflowException If there is insufficient space in this
-   * buffer for the remaining <code>char</code>s in the source array.
+   * buffer for the remaining <code>chars<code> in the source array.
    * @exception ReadOnlyBufferException If this buffer is read-only.
    */
   public final CharBuffer put (char[] src)
@@ -273,8 +275,9 @@
     if (backing_buffer == null)
       throw new UnsupportedOperationException ();
 
-    checkIfReadOnly();
-
+    if (isReadOnly ())
+      throw new ReadOnlyBufferException ();
+    
     return backing_buffer;
   }
 
@@ -290,7 +293,8 @@
     if (backing_buffer == null)
       throw new UnsupportedOperationException ();
 
-    checkIfReadOnly();
+    if (isReadOnly ())
+      throw new ReadOnlyBufferException ();
     
     return array_offset;
   }
@@ -358,7 +362,7 @@
    * and then increments the position.
    *
    * @exception BufferUnderflowException If there are no remaining
-   * <code>char</code>s in this buffer.
+   * <code>chars</code> in this buffer.
    */
   public abstract char get ();
 
@@ -367,7 +371,7 @@
    * and then increments the position.
    *
    * @exception BufferOverflowException If there no remaining 
-   * <code>char</code>s in this buffer.
+   * <code>chars</code> in this buffer.
    * @exception ReadOnlyBufferException If this buffer is read-only.
    */
   public abstract CharBuffer put (char b);
