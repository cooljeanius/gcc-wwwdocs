--- /home/tromey/gnu/classpath/classpath/java/lang/ClassNotFoundException.java	Sat Mar  2 12:13:11 2002
+++ java/lang/ClassNotFoundException.java	Tue Jan 22 16:01:33 2002
@@ -1,5 +1,6 @@
-/* ClassNotFoundException.java -- thrown when class definition cannot be found
-   Copyright (C) 1998, 2002 Free Software Foundation, Inc.
+/* ClassNotFoundException.java -- exception thrown when attempting to load
+   a class when no definition for the class can be found.
+   Copyright (C) 1998 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -7,7 +8,7 @@
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2, or (at your option)
 any later version.
-
+ 
 GNU Classpath is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
@@ -38,88 +39,137 @@
 
 package java.lang;
 
+import java.io.ObjectOutputStream;
+import java.io.ObjectInputStream;
+import java.io.IOException;
+import java.io.PrintStream;
+import java.io.PrintWriter;
+
 /**
- * Thrown when a class is requested by reflection, but the class definition
- * cannot be found. This exception is often chained from another Throwable.
+ * Exceptions may be thrown by one part of a Java program and caught
+ * by another in order to deal with exceptional conditions.  This 
+ * exception can by thrown by specific methods of <code>ClassLoader</code>
+ * and <code>Class</code> when attempting to load a class when no definition
+ * for the specified class can be found.
  *
+ * @since JDK 1.0
+ * 
  * @author Brian Jones
- * @author Eric Blake <ebb9@email.byu.edu>
- * @see Class#forName(String)
- * @see ClassLoader#findSystemClass(String)
- * @see ClassLoader#loadClass(String, boolean)
- * @status updated to 1.4
  */
 public class ClassNotFoundException extends Exception
 {
-  /**
-   * Compatible with JDK 1.0+.
-   */
-  private static final long serialVersionUID = 9176873029745254542L;
+  static final long serialVersionUID = 9176873029745254542L;
 
+  private Throwable ex = null;
+  
   /**
-   * The cause of this exception (duplicates the one stored in Throwable).
-   *
-   * @serial the exception cause
-   * @since 1.2
-   */
-  private final Throwable ex;
-
-  /**
-   * Create an exception without a message. Note that this initializes the
-   * cause to null.
+   * Create an exception without a message.
    */
   public ClassNotFoundException()
-  {
-    this(null, null);
-  }
+    {
+      super();
+    }
 
   /**
-   * Create an exception with a message. Note that this initializes the
-   * cause to null.
-   *
-   * @param s the message
+   * Create an exception with a message.
    */
   public ClassNotFoundException(String s)
-  {
-    this(s, null);
-  }
+    {
+      super(s);
+    }
 
   /**
-   * Create an exception with a message and chain it to the exception
+   * Create an exception with a message and include the exception 
    * which occurred while loading the class.
    *
-   * @param s the message
-   * @param ex the chained exception
-   * @since 1.2
-   */
-  public ClassNotFoundException(String s, Throwable ex)
-  {
-    super(s, ex);
-    this.ex = ex;
-  }
-
-  /**
-   * Returns the exception which occurred while loading the class,
-   * otherwise returns null. This is a legacy method; the preferred choice
-   * now is {@link Throwable#getCause()}.
+   * @param ex the exception which occurred while loading the class
    *
-   * @return the cause of this exception
-   * @since 1.2
+   * @since JDK 1.2
    */
-  public Throwable getException()
-  {
-    return ex;
-  }
+  public ClassNotFoundException(String s, Throwable ex)
+    {
+      super(s);
+      this.ex = ex;
+    }
 
   /**
-   * Returns the exception which occurred while loading the class,
+   * Returns the exception which occurred while loading the class, 
    * otherwise returns null.
-   *
-   * @return the cause of this exception
-   * @since 1.4
+   * 
+   * @since JDK 1.2
    */
-  public Throwable getCause()
-  {
-    return ex;
-  }
+  public Throwable getException()
+    {
+      return ex;
+    }
+
+  /**
+   * Print a stack trace of the exception that occurred.
+   */
+  public void printStackTrace()
+    {
+      if (ex == null)
+        {
+          super.printStackTrace();
+        }
+      else
+        {
+          ex.printStackTrace();
+        }
+    }
+
+  /**
+   * Print a stack trace of the exception that occurred to 
+   * the specified <code>PrintStream</code>.
+   */
+  public void printStackTrace(PrintStream ps)
+    {
+      if (ex == null)
+        {
+          super.printStackTrace(ps);
+        }
+      else
+        {
+          ex.printStackTrace(ps);
+        }
+    }
+
+  /**
+   * Print a stack trace of the exception that occurred to 
+   * the specified <code>PrintWriter</code>.
+   */
+  public void printStackTrace(PrintWriter pw)
+    {
+      if (ex == null)
+        {
+          super.printStackTrace(pw);
+        }
+      else
+        {
+          ex.printStackTrace(pw);
+        }
+    }
+
+  /**
+   * Serialize the object in a manner binary compatible with the JDK 1.2
+   */
+  private void writeObject(java.io.ObjectOutputStream s) 
+    throws IOException
+    {
+      ObjectOutputStream.PutField oFields;
+      oFields = s.putFields();
+      oFields.put("ex", this.ex);
+      s.writeFields(); 
+    }
+
+  /**
+   * Deserialize the object in a manner binary compatible with the JDK 1.2
+   */    
+  private void readObject(java.io.ObjectInputStream s)
+    throws IOException, ClassNotFoundException
+    {
+      ObjectInputStream.GetField oFields;
+      oFields = s.readFields();
+      ex = (Throwable)oFields.get("ex", (Throwable)null);
+    }
 }
