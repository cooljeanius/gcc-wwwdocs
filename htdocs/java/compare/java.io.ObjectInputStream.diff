--- /home/tromey/gnu/Nightly/classpath/classpath/java/io/ObjectInputStream.java	2003-12-03 02:20:26.000000000 -0700
+++ java/io/ObjectInputStream.java	2003-12-17 02:18:16.000000000 -0700
@@ -47,6 +47,7 @@
 import java.util.Hashtable;
 import java.util.Vector;
 
+
 import gnu.java.io.ObjectIdentityWrapper;
 import gnu.java.lang.reflect.TypeSignature;
 import java.lang.reflect.Field;
@@ -98,11 +99,10 @@
     this.blockDataInput = new DataInputStream (this);
     this.realInputStream = new DataInputStream (in);
     this.nextOID = baseWireHandle;
-    this.objectLookupTable = new Hashtable();
-    this.validators = new Vector();
-    this.classLookupTable = new Hashtable();
+    this.objectLookupTable = new Hashtable ();
+    this.validators = new Vector ();
     setBlockDataMode (true);
-    readStreamHeader();
+    readStreamHeader ();
   }
 
 
@@ -203,7 +203,7 @@
 	      Class cl = resolveProxyClass(intfs);
 	      setBlockDataMode(oldmode);
 	      
-	      ObjectStreamClass osc = lookupClass (cl);
+	      ObjectStreamClass osc = lookupClass(cl);
 	      assignNewHandle (osc);
 	      
 	      if (!is_consumed)
@@ -332,7 +332,7 @@
 	      int handle = assignNewHandle (obj);
 	      this.currentObject = obj;
 	      ObjectStreamClass[] hierarchy =
-		inputGetObjectStreamClasses (clazz);
+		inputGetObjectStreamClasses(clazz);
 	      
 	      for (int i=0; i < hierarchy.length; i++)
 		{
@@ -455,10 +455,10 @@
 	  new ObjectStreamField (field_name, class_name);
       }
 	      
-    Class clazz = resolveClass (osc);
+    Class clazz = resolveClass(osc);
     boolean oldmode = setBlockDataMode (true);
-    osc.setClass (clazz, lookupClass (clazz.getSuperclass()));
-    classLookupTable.put (clazz, osc);
+    osc.setClass (clazz, lookupClass(clazz.getSuperclass()));
+    classLookupTable.put(clazz, osc);
     setBlockDataMode (oldmode);
 	      
     return osc;
@@ -552,16 +552,16 @@
   protected Class resolveClass (ObjectStreamClass osc)
     throws ClassNotFoundException, IOException
   {
-    return Class.forName (osc.getName(), true, currentLoader()); 
+    return Class.forName(osc.getName(), true, currentLoader());
   }
-  
-  private ClassLoader currentLoader ()
+
+  private ClassLoader currentLoader()
   {
     SecurityManager sm = System.getSecurityManager ();
     if (sm == null)
       sm = new SecurityManager () {};
- 
-    return currentClassLoader (sm);
+    
+    return currentClassLoader(sm);
   }
 
   /**
@@ -571,14 +571,14 @@
    * the behaviour detected in the JDK by Kaffe's team.
    *
    * @param clazz Class to lookup in the hash table or for which
-   * we must build a descriptor. 
+   * we must build a descriptor.
    * @return A valid instance of ObjectStreamClass corresponding
    * to the specified class.
    */
   private ObjectStreamClass lookupClass (Class clazz)
   {
     ObjectStreamClass oclazz;
-    
+
     oclazz = (ObjectStreamClass) classLookupTable.get(clazz);
     if (oclazz == null)
       return ObjectStreamClass.lookup (clazz);
@@ -607,23 +607,23 @@
     if (osc == null)
       return new ObjectStreamClass[0];
     else
-    {
-      Vector oscs = new Vector ();
-
-      while (osc != null)
       {
-	oscs.addElement (osc);
-	osc = osc.getSuper ();
-      }
+        Vector oscs = new Vector();
 
-      int count = oscs.size ();
-      ObjectStreamClass[] sorted_oscs = new ObjectStreamClass[ count ];
+        while (osc != null)
+          {
+            oscs.addElement(osc);
+            osc = osc.getSuper();
+	  }
 
-      for (int i = count - 1; i >= 0; i--)
-	sorted_oscs[ count - i - 1 ] = (ObjectStreamClass)oscs.elementAt (i);
+        int count = oscs.size();
+	ObjectStreamClass[] sorted_oscs = new ObjectStreamClass[count];
 
-      return sorted_oscs;
-    }
+        for (int i = count - 1; i >= 0; i--)
+          sorted_oscs[count - i - 1] = (ObjectStreamClass) oscs.elementAt(i);
+
+        return sorted_oscs;
+      }
   }
 
   /**
@@ -774,142 +774,52 @@
 
   public boolean readBoolean () throws IOException
   {
-    boolean switchmode = true;
-    boolean oldmode = this.readDataFromBlock;
-    if (!oldmode || this.blockDataBytes - this.blockDataPosition >= 1)
-      switchmode = false;
-    if (switchmode)
-      oldmode = setBlockDataMode (true);
-    boolean value = this.dataInputStream.readBoolean ();
-    if (switchmode)
-      setBlockDataMode (oldmode);
-    return value;
+    return this.dataInputStream.readBoolean ();
   }
 
   public byte readByte () throws IOException
   {
-    boolean switchmode = true;
-    boolean oldmode = this.readDataFromBlock;
-    if (!oldmode || this.blockDataBytes - this.blockDataPosition >= 1)
-      switchmode = false;
-    if (switchmode)
-      oldmode = setBlockDataMode (true);
-    byte value = this.dataInputStream.readByte ();
-    if (switchmode)
-      setBlockDataMode (oldmode);
-    return value;
+    return this.dataInputStream.readByte ();
   }
 
   public int readUnsignedByte () throws IOException
   {
-    boolean switchmode = true;
-    boolean oldmode = this.readDataFromBlock;
-    if (!oldmode || this.blockDataBytes - this.blockDataPosition >= 1)
-      switchmode = false;
-    if (switchmode)
-      oldmode = setBlockDataMode (true);
-    int value = this.dataInputStream.readUnsignedByte ();
-    if (switchmode)
-      setBlockDataMode (oldmode);
-    return value;
+    return this.dataInputStream.readUnsignedByte ();
   }
 
   public short readShort () throws IOException
   {
-    boolean switchmode = true;
-    boolean oldmode = this.readDataFromBlock;
-    if (!oldmode || this.blockDataBytes - this.blockDataPosition >= 2)
-      switchmode = false;
-    if (switchmode)
-      oldmode = setBlockDataMode (true);
-    short value = this.dataInputStream.readShort ();
-    if (switchmode)
-      setBlockDataMode (oldmode);
-    return value;
+    return this.dataInputStream.readShort ();
   }
 
   public int readUnsignedShort () throws IOException
   {
-    boolean switchmode = true;
-    boolean oldmode = this.readDataFromBlock;
-    if (!oldmode || this.blockDataBytes - this.blockDataPosition >= 2)
-      switchmode = false;
-    if (switchmode)
-      oldmode = setBlockDataMode (true);
-    int value = this.dataInputStream.readUnsignedShort ();
-    if (switchmode)
-      setBlockDataMode (oldmode);
-    return value;
+    return this.dataInputStream.readUnsignedShort ();
   }
 
   public char readChar () throws IOException
   {
-    boolean switchmode = true;
-    boolean oldmode = this.readDataFromBlock;
-    if (!oldmode || this.blockDataBytes - this.blockDataPosition >= 2)
-      switchmode = false;
-    if (switchmode)
-      oldmode = setBlockDataMode (true);
-    char value = this.dataInputStream.readChar ();
-    if (switchmode)
-      setBlockDataMode (oldmode);
-    return value;
+    return this.dataInputStream.readChar ();
   }
 
   public int readInt () throws IOException
   {
-    boolean switchmode = true;
-    boolean oldmode = this.readDataFromBlock;
-    if (!oldmode || this.blockDataBytes - this.blockDataPosition >= 4)
-      switchmode = false;
-    if (switchmode)
-      oldmode = setBlockDataMode (true);
-    int value = this.dataInputStream.readInt ();
-    if (switchmode)
-      setBlockDataMode (oldmode);
-    return value;
+    return this.dataInputStream.readInt ();
   }
 
   public long readLong () throws IOException
   {
-    boolean switchmode = true;
-    boolean oldmode = this.readDataFromBlock;
-    if (!oldmode || this.blockDataBytes - this.blockDataPosition >= 8)
-      switchmode = false;
-    if (switchmode)
-      oldmode = setBlockDataMode (true);
-    long value = this.dataInputStream.readLong ();
-    if (switchmode)
-      setBlockDataMode (oldmode);
-    return value;
+    return this.dataInputStream.readLong ();
   }
 
   public float readFloat () throws IOException
   {
-    boolean switchmode = true;
-    boolean oldmode = this.readDataFromBlock;
-    if (!oldmode || this.blockDataBytes - this.blockDataPosition >= 4)
-      switchmode = false;
-    if (switchmode)
-      oldmode = setBlockDataMode (true);
-    float value = this.dataInputStream.readFloat ();
-    if (switchmode)
-      setBlockDataMode (oldmode);
-    return value;
+    return this.dataInputStream.readFloat ();
   }
 
   public double readDouble () throws IOException
   {
-    boolean switchmode = true;
-    boolean oldmode = this.readDataFromBlock;
-    if (!oldmode || this.blockDataBytes - this.blockDataPosition >= 8)
-      switchmode = false;
-    if (switchmode)
-      oldmode = setBlockDataMode (true);
-    double value = this.dataInputStream.readDouble ();
-    if (switchmode)
-      setBlockDataMode (oldmode);
-    return value;
+    return this.dataInputStream.readDouble ();
   }
 
   public void readFully (byte data[]) throws IOException
@@ -1369,7 +1279,7 @@
   {
     ObjectStreamField[] stream_fields = stream_osc.fields;
     ObjectStreamField[] real_fields =
-      lookupClass (stream_osc.forClass ()).fields;
+      lookupClass(stream_osc.forClass()).fields;
 
     boolean default_initialize, set_value;
     String field_name = null;
@@ -1569,13 +1479,16 @@
    * @param sm SecurityManager instance which should be called.
    * @return The current class loader in the calling stack.
    */
-  private static native ClassLoader currentClassLoader (SecurityManager sm);
+  private static ClassLoader currentClassLoader (SecurityManager sm)
+  {
+    // FIXME: This is too simple.
+    return ClassLoader.getSystemClassLoader ();
+  }
 
   private static Field getField (Class klass, String name)
     throws java.lang.NoSuchFieldException
   {
     final Field f = klass.getDeclaredField(name);
-    
     AccessController.doPrivileged(new PrivilegedAction()
       {
 	public Object run()
