--- /home/tromey/gnu/Nightly/classpath/classpath/java/nio/channels/Selector.java	2004-04-13 02:20:24.000000000 -0600
+++ java/nio/channels/Selector.java	2002-11-18 07:31:39.000000000 -0700
@@ -1,4 +1,4 @@
-/* Selector.java --
+/* Selector.java -- 
    Copyright (C) 2002 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
@@ -41,7 +41,6 @@
 import java.nio.channels.spi.SelectorProvider;
 import java.util.Set;
 
-
 /**
  * @author Michael Koch
  * @since 1.4
@@ -54,81 +53,81 @@
   protected Selector()
   {
   }
-
+ 
   /**
    * Opens a selector.
-   *
+   * 
    * @exception IOException If an error occurs
    */
-  public static Selector open() throws IOException
+  public static Selector open () throws IOException
   {
-    return SelectorProvider.provider().openSelector();
+    return SelectorProvider.provider ().openSelector ();
   }
 
   /**
    * Closes the selector.
-   *
+   * 
    * @exception IOException If an error occurs
    */
-  public abstract void close() throws IOException;
-
+  public abstract void close () throws IOException;
+  
   /**
    * Tells whether the selector is open or not.
    */
-  public abstract boolean isOpen();
-
+  public abstract boolean isOpen ();
+  
   /**
    * Returns this selector's key set.
-   *
+   * 
    * @exception ClosedSelectorException If this selector is closed.
    */
-  public abstract Set keys();
-
+  public abstract Set keys ();
+ 
   /**
    * Returns the SelectorProvider that created the selector.
    */
-  public abstract SelectorProvider provider();
-
+  public abstract SelectorProvider provider ();
+  
   /**
    * Selects a set of keys whose corresponding channels are ready
    * for I/O operations.
-   *
+   * 
    * @exception ClosedSelectorException If this selector is closed.
    * @exception IOException If an error occurs
    */
-  public abstract int select() throws IOException;
-
+  public abstract int select () throws IOException;
+  
   /**
    * Selects a set of keys whose corresponding channels are ready
    * for I/O operations.
    *
    * @param timeout The timeout to use.
-   *
+   * 
    * @exception ClosedSelectorException If this selector is closed.
    * @exception IllegalArgumentException If the timeout value is negative.
    * @exception IOException If an error occurs
    */
-  public abstract int select(long timeout) throws IOException;
-
+  public abstract int select (long timeout) throws IOException;
+  
   /**
    * Returns this selector's selected-key set.
-   *
+   * 
    * @exception ClosedSelectorException If this selector is closed.
    */
-  public abstract Set selectedKeys();
-
+  public abstract Set selectedKeys ();
+  
   /**
    * Selects a set of keys whose corresponding channels are ready
    * for I/O operations.
-   *
+   * 
    * @exception ClosedSelectorException If this selector is closed.
    * @exception IOException If an error occurs
    */
-  public abstract int selectNow() throws IOException;
-
+  public abstract int selectNow () throws IOException;
+  
   /**
    * Causes the first selection operation that has not yet returned to
    * return immediately.
    */
-  public abstract Selector wakeup();
+  public abstract Selector wakeup ();
 }
