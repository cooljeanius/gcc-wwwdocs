--- /home/tromey/gnu/classpath/classpath/java/util/jar/JarFile.java	Fri Nov 29 21:37:14 2002
+++ java/util/jar/JarFile.java	Tue Jan 22 15:40:41 2002
@@ -67,22 +67,18 @@
 
   /**
    * The manifest of this file, if any, otherwise null.
-   * Read when first needed.
+   * Read by the constructor.
    */
-  private Manifest manifest;
+  private final Manifest manifest;
 
-  /** Wether to verify the manifest and all entries. */
+  /** Wether to verify the manifest and all entries */
   private boolean verify;
 
-  /** Wether the has already been loaded. */
-  private boolean manifestRead = false;
-
   // Constructors
 
   /**
-   * Creates a new JarFile. All jar entries are verified (when a Manifest file
-   * for this JarFile exists). You need to actually open and read the complete
-   * jar entry (with <code>getInputStream()</code>) to check its signature.
+   * Creates a new JarFile, tries to read the manifest and if the manifest
+   * exists verifies it.
    *
    * @param fileName the name of the file to open
    * @exception FileNotFoundException if the fileName cannot be found
@@ -94,10 +90,8 @@
   }
 
   /**
-   * Creates a new JarFile. If verify is true then all jar entries are
-   * verified (when a Manifest file for this JarFile exists). You need to
-   * actually open and read the complete jar entry
-   * (with <code>getInputStream()</code>) to check its signature.
+   * Creates a new JarFile, tries to read the manifest and if the manifest
+   * exists and verify is true verfies it.
    *
    * @param fileName the name of the file to open
    * @param verify checks manifest and entries when true and a manifest
@@ -109,12 +103,14 @@
     FileNotFoundException, IOException
   {
     super(fileName);
+    manifest = readManifest();
+    if (verify)
+      verify();
   }
 
   /**
-   * Creates a new JarFile. All jar entries are verified (when a Manifest file
-   * for this JarFile exists). You need to actually open and read the complete
-   * jar entry (with <code>getInputStream()</code>) to check its signature.
+   * Creates a new JarFile, tries to read the manifest and if the manifest
+   * exists verifies it.
    *
    * @param file the file to open as a jar file
    * @exception FileNotFoundException if the file does not exits
@@ -126,10 +122,8 @@
   }
 
   /**
-   * Creates a new JarFile. If verify is true then all jar entries are
-   * verified (when a Manifest file for this JarFile exists). You need to
-   * actually open and read the complete jar entry
-   * (with <code>getInputStream()</code>) to check its signature.
+   * Creates a new JarFile, tries to read the manifest and if the manifest
+   * exists and verify is true verfies it.
    *
    * @param file the file to open to open as a jar file
    * @param verify checks manifest and entries when true and a manifest
@@ -141,13 +135,13 @@
     IOException
   {
     super(file);
+    manifest = readManifest();
+    if (verify)
+      verify();
   }
 
   /**
-   * Creates a new JarFile with the indicated mode. If verify is true then
-   * all jar entries are verified (when a Manifest file for this JarFile
-   * exists). You need to actually open and read the complete jar entry
-   * (with <code>getInputStream()</code>) to check its signature.
+   * Creates a new JarFile with the indicated mode, tries to read the
    * manifest and if the manifest exists and verify is true verfies it.
    *
    * @param file the file to open to open as a jar file
@@ -165,6 +159,9 @@
     FileNotFoundException, IOException, IllegalArgumentException
   {
     super(file, mode);
+    manifest = readManifest();
+    if (verify)
+      verify();
   }
 
   // Methods
@@ -244,16 +241,6 @@
     {
       ZipEntry zip = (ZipEntry) entries.nextElement();
       JarEntry jar = new JarEntry(zip);
-      Manifest manifest;
-      try
-	{
-	  manifest = getManifest();
-	}
-      catch (IOException ioe)
-	{
-	  manifest = null;
-	}
-
       if (manifest != null)
 	{
 	  jar.attr = manifest.getAttributes(jar.getName());
@@ -274,16 +261,6 @@
     if (entry != null)
       {
 	JarEntry jarEntry = new JarEntry(entry);
-	Manifest manifest;
-	try
-	  {
-	    manifest = getManifest();
-	  }
-	catch (IOException ioe)
-	  {
-	    manifest = null;
-	  }
-
 	if (manifest != null)
 	  {
 	    jarEntry.attr = manifest.getAttributes(name);
@@ -324,11 +301,8 @@
    * Returns the manifest for this JarFile or null when the JarFile does not
    * contain a manifest file.
    */
-  public Manifest getManifest() throws IOException
+  public Manifest getManifest()
   {
-    if (!manifestRead)
-      manifest = readManifest();
-
     return manifest;
   }
 }
