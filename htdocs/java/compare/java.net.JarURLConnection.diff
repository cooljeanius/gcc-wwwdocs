--- /home/tromey/gnu/Nightly/classpath/classpath/java/net/JarURLConnection.java	2004-04-18 02:22:20.000000000 -0600
+++ java/net/JarURLConnection.java	2003-12-21 02:18:14.000000000 -0700
@@ -7,7 +7,7 @@
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2, or (at your option)
 any later version.
-
+ 
 GNU Classpath is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
@@ -35,22 +35,24 @@
 obligated to do so.  If you do not wish to do so, delete this
 exception statement from your version. */
 
+
 package java.net;
 
 import java.io.IOException;
-import java.security.cert.Certificate;
 import java.util.jar.Attributes;
 import java.util.jar.JarEntry;
 import java.util.jar.JarFile;
+import java.util.jar.JarInputStream;
 import java.util.jar.Manifest;
-
+import java.util.zip.ZipEntry;
+import java.security.cert.Certificate;
 
 /**
  * This abstract class represents a common superclass for implementations
  * of jar URL's.  A jar URL is a special type of URL that allows JAR
  * files on remote systems to be accessed.  It has the form:
  * <p>
- * jar:&lt;standard URL pointing to jar filei&gt;!/file/within/jarfile
+ * jar:<standard URL pointing to jar file>!/file/within/jarfile
  * <p> for example:
  * <p>
  * jar:http://www.urbanophile.com/java/foo.jar!/com/urbanophile/bar.class
@@ -94,29 +96,30 @@
   /**
    * Creates a JarURLConnection from an URL object
    *
-   * @param url The URL object for this connection.
+   * @param URL url The URL object for this connection.
    *
    * @exception MalformedURLException If url is invalid
    *
    * @specnote This constructor is protected since JDK 1.4
    */
-  protected JarURLConnection(URL url) throws MalformedURLException
+  protected JarURLConnection (URL url)
+    throws MalformedURLException
   {
-    super(url);
+    super (url);
 
-    if (! url.getProtocol().equals("jar"))
-      throw new MalformedURLException(url + ": Not jar protocol.");
+    if (!url.getProtocol().equals ("jar"))
+      throw new MalformedURLException (url + ": Not jar protocol.");
 
     String spec = url.getFile();
-    int bang = spec.indexOf("!/");
+    int bang = spec.indexOf ("!/");
     if (bang == -1)
-      throw new MalformedURLException(url + ": No `!/' in spec.");
+      throw new MalformedURLException (url + ": No `!/' in spec.");
 
     // Extract the url for the jar itself.
-    jarFileURL = new URL(spec.substring(0, bang));
+    jarFileURL = new URL (spec.substring (0, bang));
 
     // Get the name of the entry, if any.
-    entryName = spec.length() == (bang + 2) ? null : spec.substring(bang + 2);
+    entryName = spec.length() == (bang + 2) ? null : spec.substring (bang + 2);
   }
 
   /**
@@ -125,7 +128,7 @@
    *
    * @return The remote URL
    */
-  public URL getJarFileURL()
+  public URL getJarFileURL ()
   {
     return jarFileURL;
   }
@@ -137,23 +140,60 @@
    *
    * @return The entry name.
    */
-  public String getEntryName()
+  public String getEntryName ()
   {
     return entryName;
   }
 
   /**
-   * Returns the entry in this jar file specified by the URL.
-   *
+   * Returns the entry in this jar file specified by the URL.  
+   * 
    * @return The jar entry
    *
    * @exception IOException If an error occurs
    */
-  public JarEntry getJarEntry() throws IOException
+  public JarEntry getJarEntry () throws IOException
   {
-    JarFile jarFile = getJarFile();
+    JarFile jarfile = null;
 
-    return jarFile != null ? jarFile.getJarEntry(entryName) : null;
+    if (entryName == null)
+      return null;
+
+    if (! doInput)
+      throw new ProtocolException("Can't open JarEntry if doInput is false");
+
+    try
+      {
+	jarfile = getJarFile ();
+      }
+    catch (IOException x)
+      {
+	/* ignore */
+      }
+    
+    if (jarfile == null)
+      {
+	JarInputStream zis = new JarInputStream(
+			jarFileURLConnection.getInputStream ());
+
+	// This is hideous, we're doing a linear search for the thing...
+	for (ZipEntry ent = zis.getNextEntry (); 
+	     ent != null; 
+	     ent = zis.getNextEntry ())
+	  {
+	    if (entryName.equals (ent.getName()))
+	      {
+		return new JarEntry (ent);
+	      }
+	  }
+      }
+
+    else
+      {
+	return jarfile.getJarEntry (entryName);
+      }
+
+    return null;
   }
 
   /**
@@ -163,7 +203,7 @@
    *
    * @exception IOException If an error occurs
    */
-  public abstract JarFile getJarFile() throws IOException;
+  public abstract JarFile getJarFile () throws IOException;
 
   /**
    * Returns an array of Certificate objects for the jar file entry specified
@@ -173,10 +213,10 @@
    *
    * @exception IOException If an error occurs
    */
-  public Certificate[] getCertificates() throws IOException
+  public Certificate[] getCertificates () throws IOException
   {
     JarEntry entry = getJarEntry();
-
+    
     return entry != null ? entry.getCertificates() : null;
   }
 
@@ -188,10 +228,10 @@
    *
    * @exception IOException If an error occurs
    */
-  public Attributes getMainAttributes() throws IOException
+  public Attributes getMainAttributes () throws IOException
   {
     Manifest manifest = getManifest();
-
+    
     return manifest != null ? manifest.getMainAttributes() : null;
   }
 
@@ -204,7 +244,7 @@
    *
    * @exception IOException If an error occurs
    */
-  public Attributes getAttributes() throws IOException
+  public Attributes getAttributes () throws IOException
   {
     JarEntry entry = getJarEntry();
 
@@ -219,7 +259,7 @@
    *
    * @exception IOException If an error occurs
    */
-  public Manifest getManifest() throws IOException
+  public Manifest getManifest () throws IOException
   {
     JarFile file = getJarFile();
 
