--- /home/tromey/gnu/Nightly/classpath/classpath/java/awt/Component.java	2004-01-28 02:27:12.000000000 -0700
+++ java/awt/Component.java	2003-11-13 02:18:10.000000000 -0700
@@ -869,14 +869,9 @@
    */
   public void show()
   {
-    // We must set visible before showing the peer.  Otherwise the
-    // peer could post paint events before visible is true, in which
-    // case lightweight components are not initially painted --
-    // Container.paint first calls isShowing () before painting itself
-    // and its children.
-    this.visible = true;
     if (peer != null)
       peer.setVisible(true);
+    this.visible = true;
   }
 
   /**
@@ -1702,9 +1697,6 @@
    */
   public void paint(Graphics g)
   {
-    // Paint the heavyweight peer
-    if (!isLightweight() && peer != null)
-      peer.paint(g);
   }
 
   /**
@@ -1722,15 +1714,6 @@
    */
   public void update(Graphics g)
   {
-    if (!isLightweight())
-      {
-        Rectangle clip = g.getClipBounds();
-        if (clip == null)
-          g.clearRect(0, 0, width, height);
-        else
-          g.clearRect(clip.x, clip.y, clip.width, clip.height);
-      }
-
     paint(g);
   }
 
@@ -1744,6 +1727,8 @@
   {
     if (! visible)
       return;
+    if (peer != null)
+      peer.paint(g);
     paint(g);
   }
 
@@ -2797,6 +2782,8 @@
 
     if (e instanceof FocusEvent)
       processFocusEvent((FocusEvent) e);
+    else if (e instanceof PaintEvent)
+      processPaintEvent((PaintEvent) e);
     else if (e instanceof MouseWheelEvent)
       processMouseWheelEvent((MouseWheelEvent) e);
     else if (e instanceof MouseEvent)
@@ -4233,6 +4220,41 @@
   }
 
   /**
+   * Does the work for a paint event.
+   *
+   * @param event the event to process
+   */
+  private void processPaintEvent(PaintEvent event)
+  {
+    // Can't do graphics without peer
+    if (peer == null)
+      return;
+
+    Graphics gfx = getGraphics();
+    try
+      {
+	Shape clip = event.getUpdateRect();
+	gfx.setClip(clip);
+
+	switch (event.id)
+	  {
+	  case PaintEvent.PAINT:
+	    paint(gfx);
+	    break;
+	  case PaintEvent.UPDATE:
+	    update(gfx);
+	    break;
+	  default:
+	    throw new IllegalArgumentException("unknown paint event");
+	  }
+      }
+    finally
+      {
+	gfx.dispose();
+      }
+  }
+
+  /**
    * This method is used to implement transferFocus(). CHILD is the child
    * making the request. This is overridden by Container; when called for an
    * ordinary component there is no child and so we always return null.
