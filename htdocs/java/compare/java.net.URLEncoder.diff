--- /home/tromey/gnu/Nightly/classpath/classpath/java/net/URLEncoder.java	2004-04-13 02:20:24.000000000 -0600
+++ java/net/URLEncoder.java	2003-07-23 02:19:01.000000000 -0600
@@ -7,7 +7,7 @@
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2, or (at your option)
 any later version.
-
+ 
 GNU Classpath is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
@@ -39,30 +39,29 @@
 
 import java.io.UnsupportedEncodingException;
 
-
 /*
  * Written using on-line Java Platform 1.2/1.4 API Specification, as well
  * as "The Java Class Libraries", 2nd edition (Addison-Wesley, 1998).
  * Status:  Believed complete and correct.
  */
 
-/**
- * This utility class contains static methods that converts a
- * string into a fully encoded URL string in x-www-form-urlencoded
- * format.  This format replaces certain disallowed characters with
- * encoded equivalents.  All upper case and lower case letters in the
- * US alphabet remain as is, the space character (' ') is replaced with
- * '+' sign, and all other characters are converted to a "%XX" format
- * where XX is the hexadecimal representation of that character in a
- * certain encoding (by default, the platform encoding, though the
- * standard is "UTF-8").
- * <p>
- * This method is very useful for encoding strings to be sent to CGI scripts
- *
- * @author Aaron M. Renn (arenn@urbanophile.com)
- * @author Warren Levy <warrenl@cygnus.com>
- * @author Mark Wielaard (mark@klomp.org)
- */
+ /**
+  * This utility class contains static methods that converts a 
+  * string into a fully encoded URL string in x-www-form-urlencoded
+  * format.  This format replaces certain disallowed characters with
+  * encoded equivalents.  All upper case and lower case letters in the
+  * US alphabet remain as is, the space character (' ') is replaced with
+  * '+' sign, and all other characters are converted to a "%XX" format
+  * where XX is the hexadecimal representation of that character in a
+  * certain encoding (by default, the platform encoding, though the
+  * standard is "UTF-8").
+  * <p>
+  * This method is very useful for encoding strings to be sent to CGI scripts
+  *
+  * @author Aaron M. Renn (arenn@urbanophile.com)
+  * @author Warren Levy <warrenl@cygnus.com>
+  * @author Mark Wielaard (mark@klomp.org)
+  */
 public class URLEncoder
 {
   /**
@@ -83,11 +82,11 @@
       {
 	// We default to 8859_1 for compatibility with the same
 	// default elsewhere in the library.
-	return encode(s, System.getProperty("file.encoding", "8859_1"));
+        return encode(s, System.getProperty("file.encoding", "8859_1"));
       }
     catch (UnsupportedEncodingException uee)
       {
-	// Should never happen since default should always be supported
+        // Should never happen since default should always be supported
 	return s;
       }
   }
@@ -115,42 +114,42 @@
 
     StringBuffer result = new StringBuffer(length);
     while (true)
-      {
-	while (i < length && isSafe(s.charAt(i)))
+    {
+      while ( i < length && isSafe(s.charAt(i)) )
+	i++;
+
+      // Safe character can just be added
+      result.append(s.substring(start, i));
+
+      // Are we done?
+      if (i >= length)
+	return result.toString();
+      else if (s.charAt(i) == ' ')
+        {
+	  result.append('+');  // Replace space char with plus symbol.
 	  i++;
-
-	// Safe character can just be added
-	result.append(s.substring(start, i));
-
-	// Are we done?
-	if (i >= length)
-	  return result.toString();
-	else if (s.charAt(i) == ' ')
-	  {
-	    result.append('+'); // Replace space char with plus symbol.
+	}
+      else
+	{
+	  // Get all unsafe characters
+	  start = i;
+	  char c;
+	  while ( i < length && (c = s.charAt(i)) != ' ' && !isSafe(c) )
 	    i++;
-	  }
-	else
-	  {
-	    // Get all unsafe characters
-	    start = i;
-	    char c;
-	    while (i < length && (c = s.charAt(i)) != ' ' && ! isSafe(c))
-	      i++;
-
-	    // Convert them to %XY encoded strings
-	    String unsafe = s.substring(start, i);
-	    byte[] bytes = unsafe.getBytes(encoding);
-	    for (int j = 0; j < bytes.length; j++)
-	      {
-		result.append('%');
-		int val = bytes[j];
-		result.append(hex.charAt((val & 0xf0) >> 4));
-		result.append(hex.charAt(val & 0x0f));
-	      }
-	  }
-	start = i;
-      }
+
+	  // Convert them to %XY encoded strings
+	  String unsafe = s.substring(start,i);
+	  byte bytes[] = unsafe.getBytes(encoding);
+	  for (int j = 0; j < bytes.length; j++)
+	    {
+	      result.append('%');
+	      int val = bytes[j];
+	      result.append(hex.charAt((val & 0xf0) >> 4));
+	      result.append(hex.charAt(val & 0x0f));
+	    }
+	}
+      start = i;
+    }
   }
 
   /**
@@ -161,18 +160,17 @@
    */
   private static boolean isSafe(char c)
   {
-    return ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')
-           || (c >= '0' && c <= '9') || c == '-' || c == '_' || c == '.'
-           || c == '*');
+    return  ((c >= 'a' && c <= 'z') ||
+	     (c >= 'A' && c <= 'Z') ||
+	     (c >= '0' && c <= '9') ||
+	     c == '-' || c == '_' || c == '.' || c == '*');
   }
 
   /**
    * Private constructor that does nothing. Included to avoid a default
    * public constructor being created by the compiler.
    */
-  private URLEncoder()
-  {
-  }
+  private URLEncoder() { }
 
   /**
    * Used to convert to hex.  We don't use Integer.toHexString, since
@@ -181,4 +179,4 @@
    * leading 0.
    */
   private static final String hex = "0123456789ABCDEF";
-}
+} // class URLEncoder
