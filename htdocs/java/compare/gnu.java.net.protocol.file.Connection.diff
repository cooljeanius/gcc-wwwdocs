--- /home/tromey/gnu/Nightly/classpath/classpath/gnu/java/net/protocol/file/Connection.java	2004-02-12 02:21:39.000000000 -0700
+++ gnu/java/net/protocol/file/Connection.java	2004-07-23 02:18:42.000000000 -0600
@@ -50,10 +50,9 @@
 import java.net.URL;
 import java.net.URLConnection;
 import java.security.Permission;
-import java.util.AbstractSet;
-import java.util.Iterator;
-import java.util.Set;
-import java.util.NoSuchElementException;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.Locale;
 
 /**
  * This subclass of java.net.URLConnection models a URLConnection via
@@ -66,9 +65,11 @@
 public class Connection extends URLConnection
 {
   /**
-   * Default permission for a file
+   * HTTP-style DateFormat, used to format the last-modified header.
    */
-  private static final String DEFAULT_PERMISSION = "read";
+  private static SimpleDateFormat dateFormat
+    = new SimpleDateFormat("EEE, dd MMM yyyy hh:mm:ss 'GMT'",
+                           new Locale ("En", "Us", "Unix"));
 
   /**
    * This is a File object for this connection
@@ -86,18 +87,11 @@
   private OutputStream outputStream;
   
   /**
-   * FilePermission to read the file
-   */
-  private FilePermission permission;
-
-  /**
    * Calls superclass constructor to initialize.
    */
   public Connection(URL url)
   {
     super (url);
-
-    permission = new FilePermission(getURL().getFile(), DEFAULT_PERMISSION);
   }
   
   /**
@@ -160,45 +154,73 @@
   }
 
   /**
-   * Get the last modified time of the resource.
-   *
-   * @return the time since epoch that the resource was modified.
+   *  Get an http-style header field. Just handle a few common ones. 
    */
-  public long getLastModified()
+  public String getHeaderField(String field)
   {
     try
       {
 	if (!connected)
 	  connect();
 
-	return file.lastModified();
+	if (field.equals("content-type"))
+          return guessContentTypeFromName(file.getName());
+	else if (field.equals("content-length"))
+          return Long.toString(file.length());
+	else if (field.equals("last-modified"))
+	  {
+	    synchronized (dateFormat)
+	      {
+        	return dateFormat.format(new Date(file.lastModified()));
+	      }
+	  }
       }
     catch (IOException e)
       {
-	return -1;
+        // Fall through.
       }
+    return null;
   }
 
   /**
    * Get the length of content.
-   *
    * @return the length of the content.
    */
   public int getContentLength()
   {
     try
       {
+ 	if (!connected)
+ 	  connect();
+
+	return (int) file.length();
+      }
+    catch (IOException e)
+      {
+ 	return -1;
+      }
+  }
+
+  /**
+   * Get the last modified time of the resource.
+   *
+   * @return the time since epoch that the resource was modified.
+   */
+  public long getLastModified()
+  {
+    try
+      {
 	if (!connected)
 	  connect();
-        
-	return (int) file.length();
+
+	return file.lastModified();
       }
     catch (IOException e)
       {
 	return -1;
       }
   }
-  
+
   /**
    * This method returns a <code>Permission</code> object representing the
    * permissions required to access this URL.  This method returns a
@@ -209,107 +231,6 @@
    */
   public Permission getPermission() throws IOException
   {
-    return permission;
-  }
-
-  /**
-   * Does the resource pointed to actually exist?
-   */
-  public final boolean exists()
-  {
-    if (file == null)
-      return false;
-
-    return file.exists();
-  }
-
-  /**
-   * Is the resource pointed to a directory?
-   */
-  public final boolean isDirectory()
-  {
-    return file.isDirectory();
-  }
-  
-  /**
-   * Get a listing of the directory, if it is a directory.
-   *
-   * @return a set which can supply an iteration of the
-   * contents of the directory.
-   *
-   * @throws IllegalStateException if this is not pointing
-   * to a directory.
-   */
-  public Set getListing()
-  {
-    if (!file.isDirectory())
-      throw new IllegalStateException ("this is not a directory");
-    
-    final File[] directoryList = file.listFiles();
-    return new AbstractSet()
-      {
-	File[] dirList = directoryList;
-
-	public int size()
-	{
-	  return dirList.length;
-	}
-
-	public Iterator iterator()
-	{
-	  return new Iterator()
-	    {
-	      int index = 0;
-
-	      public boolean hasNext()
-	      {
-		return index < dirList.length;
-	      }
-
-	      public Object next()
-	      {
-		try
-		  {
-		    String value = dirList [index++].getName();
-		    return value;
-		  }
-		catch (ArrayIndexOutOfBoundsException e)
-		  {
-		    throw new NoSuchElementException ("no more content");
-		  }
-	      }
-
-	      public void remove()
-	      {
-		try
-		  {
-		    File[] newDirList = new File [dirList.length - 1];
-		    int realIndex = index - 1;
-                    
-		    if (realIndex < 1)
-		      {
-			System.arraycopy (dirList, 1, newDirList, 0,
-                                          dirList.length - 1);
-			index--;
-		      }
-		    else
-		      {
-			System.arraycopy (dirList, 0, newDirList, 0, realIndex);
-                        
-			if (index < dirList.length - 1)
-			  System.arraycopy (dirList, index,
-					    newDirList, realIndex,
-                                            dirList.length - realIndex);
-		      }
-		    dirList = newDirList;
-		  }
-		catch (ArrayIndexOutOfBoundsException e)
-		  {
-		    throw new NoSuchElementException("no more content");
-		  }
-	      }
-	    };
-	}
-      };
+    return new FilePermission(getURL().getFile(), "read");
   }
 }
