--- /home/tromey/gnu/egcs/classpath/classpath/java/util/Stack.java	Fri Oct 26 16:06:57 2001
+++ java/util/Stack.java	Tue Oct 16 09:14:35 2001
@@ -32,30 +32,24 @@
  * "The Java Language Specification", ISBN 0-201-63451-1
  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.
  * Status:  Believed complete and correct
+ */
 
 /**
  * Stack provides a Last In First Out (LIFO) data type, commonly known
- * as a Stack.  Stack itself extends Vector and provides the additional
- * methods for stack manipulation (push, pop, peek). You can also seek for
- * the 1-based position of an element on the stack.
+ * as a Stack.  
+ *
+ * Stack itself extends Vector and provides the additional methods
+ * for stack manipulation (push, pop, peek). 
  *
  * @author Warren Levy <warrenl@cygnus.com>
- * @author Eric Blake <ebb9@email.byu.edu>
- * @see List
- * @see AbstractList
- * @see LinkedList
- * @since 1.0
- * @status updated to 1.4
+ * @date August 20, 1998.
  */
 public class Stack extends Vector
 {
-  // We could use Vector methods internally for the following methods,
+  // Could use Vector methods internally for the following methods
   // but have used Vector fields directly for efficiency (i.e. this
   // often reduces out duplicate bounds checking).
 
-  /**
-   * Compatible with JDK 1.0+.
-   */
   private static final long serialVersionUID = 1224463164541339165L;
 
   /**
@@ -63,15 +57,16 @@
    */
   public Stack()
   {
+    super();
   }
 
   /**
    * Pushes an Object onto the top of the stack.  This method is effectively
-   * the same as addElement(item).
+   * the same as addElement(item)
    *
    * @param item the Object to push onto the stack
-   * @return the Object pushed onto the stack
-   * @see Vector#addElement(Object)
+   * @returns the Object pushed onto the stack
+   * @see java.util.Vector#addElement(java.util.Object)
    */
   public Object push(Object item)
   {
@@ -85,29 +80,26 @@
 
   /**
    * Pops an item from the stack and returns it.  The item popped is
-   * removed from the Stack.
+   * removed from the Stack
    *
-   * @return the Object popped from the stack
-   * @throws EmptyStackException if the stack is empty
+   * @returns the Object popped from the stack
    */
   public synchronized Object pop()
   {
     if (elementCount == 0)
       throw new EmptyStackException();
 
-    modCount++;
     Object obj = elementData[--elementCount];
 
-    // Set topmost element to null to assist the gc in cleanup.
+    // Set topmost element to null to assist the gc in cleanup
     elementData[elementCount] = null;
     return obj;
   }
 
   /**
-   * Returns the top Object on the stack without removing it.
+   * Returns the top Object on the stack without removing it
    *
-   * @return the top Object on the stack
-   * @throws EmptyStackException if the stack is empty
+   * @returns the top Object on the stack
    */
   public synchronized Object peek()
   {
@@ -118,11 +110,11 @@
   }
 
   /**
-   * Tests if the stack is empty.
+   * Tests if the stack is empty
    *
-   * @return true if the stack contains no items, false otherwise
+   * @returns true if the stack contains no items, false otherwise
    */
-  public synchronized boolean empty()
+  public boolean empty()
   {
     return elementCount == 0;
   }
@@ -130,18 +122,18 @@
   /**
    * Returns the position of an Object on the stack, with the top
    * most Object being at position 1, and each Object deeper in the
-   * stack at depth + 1.
+   * stack at depth + 1
    *
    * @param o The object to search for
-   * @return The 1 based depth of the Object, or -1 if the Object
-   *         is not on the stack
+   * @returns The 1 based depth of the Object, or -1 if the Object 
+   * is not on the stack.
    */
   public synchronized int search(Object o)
   {
-    int i = elementCount;
-    while (--i >= 0)
-      if (equals(o, elementData[i]))
+    for (int i = elementCount-1; i >=0; --i)
+      if (elementData[i].equals(o))
         return elementCount - i;
+
     return -1;
   }
 }
