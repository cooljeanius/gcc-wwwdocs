--- /home/tromey/gnu/egcs/classpath/classpath/java/lang/reflect/Member.java	Sun Oct 21 10:39:27 2001
+++ java/lang/reflect/Member.java	Sun Sep 30 12:18:30 2001
@@ -1,4 +1,4 @@
-/* java.lang.reflect.Member - common query methods in reflection
+/* java.lang.reflect.Member
    Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
@@ -7,7 +7,7 @@
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2, or (at your option)
 any later version.
-
+ 
 GNU Classpath is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
@@ -27,63 +27,55 @@
 
 package java.lang.reflect;
 
+/* Written using "Java Class Libraries", 2nd edition.
+ * Status:  Believed complete and correct.
+ */
+
 /**
- * Member is an interface that represents any member of a class (field or
- * method) or a constructor. You can get information about the declaring
- * class, name or modifiers of the member with this interface.
+ * Member is an interface that represents any member of a class.
+ * i.e. a field, a method or a constructor.
+ * You can get information about the declaring class, name or modifiers of
+ * the member with this interface.
  *
- * @author John Keiser
- * @author Per Bothner <bothner@cygnus.com>
- * @author Eric Blake <ebb9@email.byu.edu>
- * @see Class
- * @see Field
- * @see Method
- * @see Constructor
- * @since 1.1
- * @status updated to 1.4
+ * @author  John Keiser
+ * @author Per Bothner <bothner@cygnus.com> 
  */
-public interface Member
-{
-  /**
-   * Represents all members, whether public, private, protected or
-   * package-protected, but only which are declared in this class.
-   * Used in SecurityManager.checkMemberAccess() to determine the
-   * type of members to access.
-   * @see SecurityManager#checkMemberAccess()
-   */
-  int DECLARED = 1;
-
-  /**
-   * Represents public members only, but includes all inherited members.
-   *  Used in SecurityManager.checkMemberAccess() to determine the type of
-   * members to access.
-   * @see SecurityManager#checkMemberAccess()
-   */
-  int PUBLIC = 0;
-
-  /**
-   * Gets the class that declared this member. This is not the class where
-   * this method was called, or even the class where this Member object
-   * came to life, but the class that declares the member this represents.
-   *
-   * @return the class that declared this member
-   */
-  Class getDeclaringClass();
-
-  /**
-   * Gets the simple name of this member. This will be a valid Java
-   * identifier, with no qualification.
-   *
-   * @return the name of this member
-   */
-  String getName();
-
-  /**
-   * Gets the modifiers this member uses.  Use the <code>Modifier</code>
-   * class to interpret the values.
-   *
-   * @return an integer representing the modifiers to this Member
-   * @see Modifier
-   */
-  int getModifiers();
+public interface Member {
+    /**
+     * Represents all members, whether public, private, protected or
+     * package-protected.
+     * Used in java.lang.SecurityManager.checkMemberAccess() to determine the
+     * type of members to access.
+     */
+    static final int DECLARED = 1;
+
+    /**
+     * Represents public members only.  Used inr
+     * java.lang.SecurityManager.checkMemberAccess() to determine the type of
+     * members to access.
+     */
+    static final int PUBLIC = 0;
+
+    /**
+     * Gets the class that declared this member.
+     * <STRONG>It is unclear whether this returns the class that actually
+     * syntactically declared the member, or the class where the
+     * <code>Member</code> object was gotten from.</STRONG>
+     * @return the class that declared this member.
+     */
+    Class getDeclaringClass();
+
+    /**
+     * Gets the modifiers this member uses.  Use the <code>Modifier</code>
+     * class to interpret the values.
+     * @see Modifier
+     * @return an integer representing the modifiers to this Member.
+     */
+    int getModifiers();
+
+    /**
+     * Gets the name of this member.
+     * @return the name of this member.
+     */
+    String getName();
 }
