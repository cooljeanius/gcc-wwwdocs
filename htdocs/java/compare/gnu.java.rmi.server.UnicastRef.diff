--- /home/tromey/gnu/classpath/classpath/gnu/java/rmi/server/UnicastRef.java	Thu Oct 31 12:43:09 2002
+++ gnu/java/rmi/server/UnicastRef.java	Mon Sep 30 16:13:27 2002
@@ -1,5 +1,5 @@
 /*
-  Copyright (c) 1996, 1997, 1998, 1999, 2002 Free Software Foundation, Inc.
+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -62,8 +62,6 @@
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
 
-import java.lang.reflect.InvocationTargetException;
-
 public class UnicastRef
 	implements RemoteRef, ProtocolConstants {
 
@@ -71,10 +69,9 @@
 UnicastConnectionManager manager;
 
 /**
- * Used by serialization, and let subclass capable of having default constructor
+ * Used by serialization.
  */
-//private 
-UnicastRef() {
+private UnicastRef() {
 }
 
 public UnicastRef(ObjID objid, String host, int port, RMIClientSocketFactory csf) {
@@ -87,21 +84,6 @@
 }
 
 public Object invoke(Remote obj, Method method, Object[] params, long opnum) throws Exception {
-    // Check if client and server are in the same VM, then local call can be used to
-    // replace remote call, but it's somewhat violating remote semantic.
-    Object svrobj = manager.serverobj;
-    if(svrobj != null){
-        //local call
-		Object ret = null;
-		try{
-		    ret = method.invoke(svrobj, params);
-		}catch(InvocationTargetException e){
-		    throw (Exception)e.getTargetException();
-		}
-		//System.out.println("\n\n ***** local call: " + method + "\nreturn: " + ret + "\n\n");
-		return ret;
-	}
-	//System.out.println("***************** remote call:" + manager.serverPort);
 	return (invokeCommon(obj, method, params, -1, opnum));
 }
 
@@ -125,7 +107,18 @@
 		objid.write(out);
 		out.writeInt(opnum);
 		out.writeLong(hash);
-		
+		/*
+		if (params != null) {
+			for (int i = 0; i < params.length; i++) {
+				if (params[i] instanceof UnicastRemoteObject) {
+					out.writeObject(UnicastRemoteObject.exportObject((UnicastRemoteObject)params[i]));
+				}
+				else {
+					out.writeObject(params[i]);
+				}
+			}
+		}
+		*/
 		// must handle primitive class and their wrapper classes
 		Class clss[] = method.getParameterTypes();
 	    for(int i = 0; i < clss.length; i++)
@@ -144,30 +137,26 @@
 	UID ack;
 	try {
 		din = conn.getDataInputStream();
-		
-		if ((returncode = din.readUnsignedByte()) != MESSAGE_CALL_ACK) {
-		    conn.disconnect();
-			throw new RemoteException("Call not acked:" + returncode);
+		if (din.readUnsignedByte() != MESSAGE_CALL_ACK) {
+			throw new RemoteException("Call not acked");
 		}
 
 		in = conn.getObjectInputStream();
+
 		returncode = in.readUnsignedByte();
 		ack = UID.read(in);
-
+		//returnval = in.readObject();
 		Class cls = method.getReturnType();
         if(cls == Void.TYPE){
             returnval = null;
-            in.readObject();
         }else
             returnval = ((RMIObjectInputStream)in).readValue(cls);
-
 	}
 	catch (IOException e3) {
-	    //for debug: e3.printStackTrace();
 		throw new RemoteException("call return failed: ", e3);
 	}
 
-    /* if DGCAck is necessary??
+    /* if DGCAck is necessary
     //According to RMI wire protocol, send a DGCAck 
     // to indicate receiving return value
     dout.writeByte(MESSAGE_DGCACK);
@@ -177,7 +166,7 @@
     
 	manager.discardConnection(conn);
 
-	if (returncode != RETURN_ACK && returnval != null) {
+	if (returncode != RETURN_ACK) {
 		throw (Exception)returnval;
 	}
 
@@ -188,18 +177,7 @@
  * @deprecated
  */
 public RemoteCall newCall(RemoteObject obj, Operation[] op, int opnum, long hash) throws RemoteException {
-    UnicastConnection conn;
-    
-	try {
-		conn = manager.getConnection();
-	}
-	catch (IOException e1) {
-		throw new RemoteException("connection failed to host: " + manager.serverName, e1);
-	}
-
-    //obj: useless?
-
-	return (new UnicastRemoteCall(conn, objid, opnum, hash));
+	return (new UnicastRemoteCall(obj, opnum, hash));
 }
 
 /**
@@ -207,19 +185,15 @@
  */
 public void invoke(RemoteCall call) throws Exception {
 	UnicastRemoteCall c = (UnicastRemoteCall)call;
-	call.executeCall();
+	Object ret = invokeCommon((Remote)c.getObject(), (Method)null, c.getArguments(), c.getOpnum(), c.getHash());
+	c.setReturnValue(ret);
 }
 
 /**
  * @deprecated
  */
 public void done(RemoteCall call) throws RemoteException {
-	UnicastRemoteCall c = (UnicastRemoteCall)call;
-	try{
-	    c.done();
-	} catch(IOException e){}
-    UnicastConnection conn = c.getConnection();
-	manager.discardConnection(conn);
+	/* Does nothing */
 }
 
 public void writeExternal(ObjectOutput out) throws IOException {
