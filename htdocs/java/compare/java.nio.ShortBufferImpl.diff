--- /home/tromey/gnu/Nightly/classpath/classpath/java/nio/ShortBufferImpl.java	2004-06-21 06:24:00.000000000 -0600
+++ java/nio/ShortBufferImpl.java	2004-04-21 02:18:10.000000000 -0600
@@ -1,5 +1,5 @@
 /* ShortBufferImpl.java -- 
-   Copyright (C) 2002, 2003, 2004 Free Software Foundation, Inc.
+   Copyright (C) 2002, 2003 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -98,16 +98,10 @@
   }
 
   /**
-   * Reads the <code>short</code> at this buffer's current position,
-   * and then increments the position.
-   *
-   * @exception BufferUnderflowException If there are no remaining
-   * <code>short</code>s in this buffer.
+   * Relative get method. Reads the next <code>short</code> from the buffer.
    */
   public short get ()
   {
-    checkForUnderflow();
-
     short result = backing_buffer [position ()];
     position (position () + 1);
     return result;
@@ -116,16 +110,14 @@
   /**
    * Relative put method. Writes <code>value</code> to the next position
    * in the buffer.
-   *
-   * @exception BufferOverflowException If there no remaining 
-   * space in this buffer.
+   * 
    * @exception ReadOnlyBufferException If this buffer is read-only.
    */
   public ShortBuffer put (short value)
   {
-    checkIfReadOnly();
-    checkForOverflow();
-
+    if (readOnly)
+      throw new ReadOnlyBufferException ();
+	  	    
     backing_buffer [position ()] = value;
     position (position () + 1);
     return this;
@@ -140,8 +132,6 @@
    */
   public short get (int index)
   {
-    checkIndex(index);
-
     return backing_buffer [index];
   }
   
@@ -155,9 +145,9 @@
    */
   public ShortBuffer put (int index, short value)
   {
-    checkIfReadOnly();
-    checkIndex(index);
-
+    if (readOnly)
+      throw new ReadOnlyBufferException ();
+    	    
     backing_buffer [index] = value;
     return this;
   }
