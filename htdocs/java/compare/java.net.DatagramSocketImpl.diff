--- /home/tromey/gnu/egcs/classpath/classpath/java/net/DatagramSocketImpl.java	Sun Feb 10 17:34:21 2002
+++ java/net/DatagramSocketImpl.java	Tue Jan 22 16:01:35 2002
@@ -1,5 +1,5 @@
 /* DatagramSocketImpl.java -- Abstract class for UDP socket implementations
-   Copyright (C) 1998, 1999 2000, 2001, 2002 Free Software Foundation, Inc.
+   Copyright (C) 1998, 1999 2000, 2001 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -7,7 +7,7 @@
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2, or (at your option)
 any later version.
-
+ 
 GNU Classpath is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
@@ -45,8 +45,10 @@
  * Written using on-line Java Platform 1.2 API Specification, as well
  * as "The Java Class Libraries", 2nd edition (Addison-Wesley, 1998).
  * Status:  Believed complete and correct.
- *
- * <p>This abstract class models a datagram socket implementation.  An
+ */
+
+/**
+ * This abstract class models a datagram socket implementation.  An
  * actual implementation class would implement these methods, probably
  * via redirecting them to native code.
  *
@@ -62,7 +64,7 @@
   protected int localPort;
 
   /**
-   * The FileDescriptor object for this object.
+   * The FileDescriptor object for this object. 
    */
   protected FileDescriptor fd;
 
@@ -82,7 +84,7 @@
    * @exception SocketException If an error occurs
    */
   protected abstract void bind(int lport, InetAddress laddr)
-    throws SocketException;
+  	throws SocketException;
 
   /**
    * This methods closes the socket
@@ -121,7 +123,7 @@
 
   /**
    * Receives a packet of data from the network  Will block until a packet
-   * arrives.  The packet info in populated into the passed in
+   * arrives.  The packet info in populated into the passed in 
    * DatagramPacket object.
    *
    * @param p A place to store the incoming packet.
@@ -150,7 +152,7 @@
    */
   protected abstract byte getTTL() throws IOException;
 
-  /**
+ /**
    * Sets the Time to Live (TTL) setting on this socket to the specified
    * value.
    *
@@ -177,7 +179,7 @@
    */
   protected abstract void join(InetAddress inetaddr) throws IOException;
 
-  /**
+ /**
    * Causes the socket to leave the specified multicast group.
    *
    * @param inetaddr The multicast address to leave
@@ -201,36 +203,4 @@
   {
     return localPort;
   }
-
-  /**
-   * Sets the specified option on a socket to the passed in object.  For
-   * options that take an integer argument, the passed in object is an
-   * <code>Integer</code>.  For options that are set to on or off, the
-   * value passed will be a <code>Boolean</code>.   The <code>option_id</code> 
-   * parameter is one of the defined constants in the superinterface.
-   *
-   * @param option_id The identifier of the option
-   * @param val The value to set the option to
-   *
-   * @exception SocketException If an error occurs
-   * @XXX This redeclaration from SocketOptions is a workaround to a gcj bug.
-   */
-  public abstract void setOption(int option_id, Object val)
-    throws SocketException;
-
-  /**
-   * Returns the current setting of the specified option.  The 
-   * <code>Object</code> returned will be an <code>Integer</code> for options 
-   * that have integer values.  For options that are set to on or off, a 
-   * <code>Boolean</code> will be returned.   The <code>option_id</code>
-   * is one of the defined constants in the superinterface.
-   *
-   * @param option_id The option identifier
-   *
-   * @return The current value of the option
-   *
-   * @exception SocketException If an error occurs
-   * @XXX This redeclaration from SocketOptions is a workaround to a gcj bug.
-   */
-  public abstract Object getOption(int option_id) throws SocketException;
 }
