--- /home/tromey/gnu/Nightly/classpath/classpath/java/net/DatagramSocketImpl.java	2004-04-13 02:20:23.000000000 -0600
+++ java/net/DatagramSocketImpl.java	2003-06-13 02:27:35.000000000 -0600
@@ -1,5 +1,5 @@
 /* DatagramSocketImpl.java -- Abstract class for UDP socket implementations
-   Copyright (C) 1998, 1999 2000, 2001,
+   Copyright (C) 1998, 1999 2000, 2001, 
                  2002, 2003 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
@@ -36,11 +36,11 @@
 obligated to do so.  If you do not wish to do so, delete this
 exception statement from your version. */
 
+
 package java.net;
 
-import java.io.FileDescriptor;
 import java.io.IOException;
-
+import java.io.FileDescriptor;
 
 /**
  * This abstract class models a datagram socket implementation.  An
@@ -58,6 +58,7 @@
  */
 public abstract class DatagramSocketImpl implements SocketOptions
 {
+
   /**
    * The local port to which this socket is bound
    */
@@ -102,7 +103,7 @@
    * Takes a peek at the next packet received in order to retrieve the
    * address of the sender
    *
-   * @param i The <code>InetAddress</code> to fill in with the information
+   * @param i The <code>InetAddress</code> to fill in with the information 
    *          about the sender if the next packet
    *
    * @return The port number of the sender of the packet
@@ -117,19 +118,19 @@
   /**
    * Takes a peek at the next packet received.  This packet is not consumed.
    * With the next peekData/receive operation this packet will be read again.
-   *
+   * 
    * @param p The <code>DatagramPacket</code> to fill in with the data sent.
    *
    * @return The port number of the sender of the packet.
-   *
+   * 
    * @exception IOException If an error occurs
    * @exception PortUnreachableException May be thrown if the socket is
    * connected to a currently unreachable destination. Note, there is no
    * guarantee that the exception will be thrown.
-   *
+   * 
    * @since 1.4
    */
-  protected abstract int peekData(DatagramPacket p) throws IOException;
+  protected abstract int peekData (DatagramPacket p) throws IOException;
 
   /**
    * Transmits the specified packet of data to the network.  The destination
@@ -168,18 +169,17 @@
    *
    * @since 1.4
    */
-  protected void connect(InetAddress address, int port)
-    throws SocketException
+  protected void connect (InetAddress address, int port) throws SocketException
   {
     // This method has to be overwritten by real implementations
   }
 
   /**
    * Disconnects the socket.
-   *
+   * 
    * @since 1.4
    */
-  protected void disconnect()
+  protected void disconnect ()
   {
     // This method has to be overwritten by real implementations
   }
@@ -199,11 +199,8 @@
    * This method returns the current Time to Live (TTL) setting on this
    * socket.  <b>Use <code>getTimeToLive()</code></b> instead.
    *
-   * @return the current time-to-live
-   * 
    * @exception IOException If an error occurs
-   * 
-   * @deprecated // FIXME: when ?
+   * @deprecated
    */
   protected abstract byte getTTL() throws IOException;
 
@@ -221,8 +218,6 @@
    * This method returns the current Time to Live (TTL) setting on this
    * socket.
    *
-   * @return the current time-to-live
-   * 
    * @exception IOException If an error occurs
    */
   protected abstract int getTimeToLive() throws IOException;
@@ -247,37 +242,35 @@
 
   /**
    * Causes this socket to join the specified multicast group on a specified
-   * device
-   *
+   * device 
+   * 
    * @param mcastaddr The address to leave
    * @param netIf The specified network interface to join the group at
    *
    * @exception IOException If an error occurs
-   *
+   * 
    * @since 1.4
    */
-  protected abstract void joinGroup(SocketAddress mcastaddr,
-                                    NetworkInterface netIf)
+  protected abstract void joinGroup (SocketAddress mcastaddr,
+		                     NetworkInterface netIf)
     throws IOException;
 
   /**
    * Leaves a multicast group
-   *
+   * 
    * @param mcastaddr The address to join
    * @param netIf The specified network interface to leave the group at
    *
    * @exception IOException If an error occurs
-   *
+   * 
    * @since 1.4
    */
-  protected abstract void leaveGroup(SocketAddress mcastaddr,
-                                     NetworkInterface netIf)
+  protected abstract void leaveGroup (SocketAddress mcastaddr,
+		                      NetworkInterface netIf)
     throws IOException;
-
+  
   /**
    * Returns the FileDescriptor for this socket
-   * 
-   * @return the file descriptor associated with this socket
    */
   protected FileDescriptor getFileDescriptor()
   {
@@ -286,8 +279,6 @@
 
   /**
    * Returns the local port this socket is bound to
-   *
-   * @return the local port
    */
   protected int getLocalPort()
   {
