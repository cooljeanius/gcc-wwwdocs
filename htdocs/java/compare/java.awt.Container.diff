--- /home/tromey/gnu/Nightly/classpath/classpath/java/awt/Container.java	2004-01-28 02:27:12.000000000 -0700
+++ java/awt/Container.java	2004-01-22 02:21:49.000000000 -0700
@@ -1,5 +1,5 @@
 /* Container.java -- parent container class in AWT
-   Copyright (C) 1999, 2000, 2002, 2003, 2004 Free Software Foundation
+   Copyright (C) 1999, 2000, 2002, 2003 Free Software Foundation
 
 This file is part of GNU Classpath.
 
@@ -663,9 +663,8 @@
   {
     if (!isShowing())
       return;
-    // Visit heavyweights as well, in case they were
-    // erased when we cleared the background for this container.
-    visitChildren(g, GfxPaintVisitor.INSTANCE, false);
+    super.paint(g);
+    visitChildren(g, GfxPaintVisitor.INSTANCE, true);
   }
 
   /**
@@ -679,6 +678,11 @@
    */
   public void update(Graphics g)
   {
+    Rectangle clip = g.getClipBounds();
+    if (clip == null)
+      g.clearRect(0, 0, width, height);
+    else
+      g.clearRect(clip.x, clip.y, clip.width, clip.height);
     super.update(g);
   }
 
@@ -1200,12 +1204,8 @@
         for (int i = ncomponents - 1; i >= 0; --i)
           {
             Component comp = component[i];
-            // If we're visiting heavyweights as well,
-            // don't recurse into Containers here. This avoids
-            // painting the same nested child multiple times.
             boolean applicable = comp.isVisible()
-              && (comp.isLightweight()
-                  || !lightweightOnly && ! (comp instanceof Container));
+              && (comp.isLightweight() || !lightweightOnly);
 
             if (applicable)
               visitChild(gfx, visitor, comp);
@@ -1516,7 +1516,7 @@
           (ACCESSIBLE_CHILD_PROPERTY, e.getChild(), null);
       }
     } // class AccessibleContainerHandler
-  } // class AccessibleAWTContainer
+  } // class AccessibleAWTPanel
 } // class Container
 
 /**
@@ -1562,26 +1562,26 @@
     Component candidate = mouseEventTarget;
 
     boolean candidate_is_container_with_children = 
-      ((candidate != null)
-       && (candidate instanceof Container)
-       && (((Container)candidate).getComponentCount () > 0));
+	    ((candidate != null)
+	     && (candidate instanceof Container)
+	     && (((Container)candidate).getComponentCount () > 0));
 
     boolean candidate_does_not_contain_point =
-      ((candidate != null)
-       && (! candidate.contains (x - candidate.getX (),
+	    ((candidate != null)
+	     && (! candidate.contains (x - candidate.getX (),
                                  y - candidate.getY ())));
 
     if (candidate == null
         || candidate_is_container_with_children
         || candidate_does_not_contain_point)
-      {
+  {
         // Try to reacquire.
         candidate = nativeContainer.findComponentAt (x, y);
-      }
+  }
 
     if (mouseEventTarget != null
         && mouseEventTarget != candidate)
-      {
+  {
         int nx = x - mouseEventTarget.getX ();
         int ny = y - mouseEventTarget.getY ();
         MouseEvent exited = new MouseEvent (mouseEventTarget, 
@@ -1594,15 +1594,15 @@
                                             me.getButton ());
         mouseEventTarget.dispatchEvent (exited); 
         mouseEventTarget = null;
-      }
+  }
 
     if (candidate != null)
-      {
+	    {
         // Possibly set new state.
         if (candidate.isLightweight() 
             && candidate != nativeContainer
             && candidate != mouseEventTarget)
-	  {
+  {
 			
             mouseEventTarget = candidate;
 			
@@ -1620,41 +1620,31 @@
                                                  me.getButton ());
             mouseEventTarget.dispatchEvent (entered);
           }
-      }
+	    }
   }
 
   boolean handleEvent (AWTEvent e)
   {
     if ((eventMask & e.getID ()) == 0)
-      return false;
+	    return false;
 
     if (e instanceof MouseEvent)
-      {
+  {
         MouseEvent me = (MouseEvent) e;
         acquireComponentForMouseEvent (me);
 
-        // Avoid dispatching an ENTERED event twice
-        if (mouseEventTarget != null
-            && e.getID() != MouseEvent.MOUSE_ENTERED)
+        if (mouseEventTarget != null)
           {
-            // Calculate point translation for the event target.
-            // We use absolute location on screen rather than relative
-            // location because the event target might be a nested child.
-            Point parentLocation = nativeContainer.getLocationOnScreen();
-            Point childLocation = mouseEventTarget.getLocationOnScreen();
-            me.translatePoint(parentLocation.x - childLocation.x,
-                              parentLocation.y - childLocation.y);
-
             Component oldSource = (Component) me.getSource ();
             me.setSource (mouseEventTarget);
             mouseEventTarget.dispatchEvent (me);
             me.setSource (oldSource);
           }
-      }
+	    }
     else if (e instanceof KeyEvent && focus != null)
-      {
+  {
         focus.processKeyEvent ((KeyEvent) e);
-      }
+	    }
       
     return e.isConsumed();
   }
