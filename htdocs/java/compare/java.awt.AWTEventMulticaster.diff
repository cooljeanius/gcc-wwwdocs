--- /home/tromey/gnu/classpath/classpath/java/awt/AWTEventMulticaster.java	Sun Mar 31 23:07:57 2002
+++ java/awt/AWTEventMulticaster.java	Tue Jan 22 16:01:31 2002
@@ -1,5 +1,4 @@
-/* AWTEventMulticaster.java -- allows multicast chaining of listeners
-   Copyright (C) 1999, 2000, 2002 Free Software Foundation
+/* Copyright (C) 1999, 2000, 2002  Free Software Foundation
 
 This file is part of GNU Classpath.
 
@@ -38,87 +37,60 @@
 
 package java.awt;
 
-import java.awt.event.ActionEvent;
-import java.awt.event.ActionListener;
-import java.awt.event.AdjustmentEvent;
-import java.awt.event.AdjustmentListener;
-import java.awt.event.ComponentEvent;
-import java.awt.event.ComponentListener;
-import java.awt.event.ContainerEvent;
-import java.awt.event.ContainerListener;
-import java.awt.event.FocusEvent;
-import java.awt.event.FocusListener;
-import java.awt.event.HierarchyBoundsListener;
-import java.awt.event.HierarchyEvent;
-import java.awt.event.HierarchyListener;
-import java.awt.event.InputMethodEvent;
-import java.awt.event.InputMethodListener;
-import java.awt.event.ItemEvent;
-import java.awt.event.ItemListener;
-import java.awt.event.KeyEvent;
-import java.awt.event.KeyListener;
-import java.awt.event.MouseEvent;
-import java.awt.event.MouseListener;
-import java.awt.event.MouseMotionListener;
-import java.awt.event.MouseWheelEvent;
-import java.awt.event.MouseWheelListener;
-import java.awt.event.TextEvent;
-import java.awt.event.TextListener;
-import java.awt.event.WindowEvent;
-import java.awt.event.WindowFocusListener;
-import java.awt.event.WindowListener;
-import java.awt.event.WindowStateListener;
-import java.io.IOException;
-import java.io.ObjectOutputStream;
-import java.io.Serializable;
-import java.lang.reflect.Array;
-import java.util.ArrayList;
+import java.awt.event.*;
 import java.util.EventListener;
+import java.io.ObjectOutputStream;
 
-/**
- * This class is used to implement a chain of event handlers.  Dispatching
- * using this class is thread safe.  Here is a quick example of how to
- * add and delete listeners using this class.  For this example, we will
- * assume are firing <code>AdjustmentEvent</code>'s.  However, this
- * same approach is useful for all events in the <code>java.awt.event</code>
- * package, and more if this class is subclassed.
- *
- * <p><code>
- * AdjustmentListener al;
- * public void addAdjustmentListener(AdjustmentListener listener)
- * {
- *   al = AWTEventMulticaster.add(al, listener);
- * }
- * public void removeAdjustmentListener(AdjustmentListener listener)
- * {
- *   al = AWTEventMulticaster.remove(al, listener);
- * }
- * </code>
- *
- * <p>When it come time to process an event, simply call <code>al</code>,
- * assuming it is not <code>null</code>, and all listeners in the chain will
- * be fired.
- *
- * <p>The first time <code>add</code> is called it is passed
- * <code>null</code> and <code>listener</code> as its arguments.  This
- * starts building the chain.  This class returns <code>listener</code>
- * which becomes the new <code>al</code>.  The next time, <code>add</code>
- * is called with <code>al</code> and <code>listener</code> and the
- * new listener is then chained to the old.
- *
- * @author Bryce McKinlay
- * @author Aaron M. Renn <arenn@urbanophile.com>
- * @author Eric Blake <ebb9@email.byu.edu>
- * @since 1.1
- * @status updated to 1.4
+/* Written using on-line Java 2 Platform Standard Edition v1.3 API 
+ * Specification, as well as "The Java Class Libraries", 2nd edition 
+ * (Addison-Wesley, 1998).
+ * Status:  Believed complete and correct to J2SE 1.3, except for 
+ * serialization support methods, save() and saveInternal(), which are 
+ * stubbed.
  */
-public class AWTEventMulticaster
-  implements ComponentListener, ContainerListener, FocusListener, KeyListener,
-             MouseListener, MouseMotionListener, WindowListener,
-             WindowFocusListener, WindowStateListener, ActionListener,
-             ItemListener, AdjustmentListener, TextListener,
-             InputMethodListener, HierarchyListener, HierarchyBoundsListener,
-             MouseWheelListener
+
+/**
+  * This class is used to implement a chain of event handlers.  Dispatching
+  * using this class is thread safe.  Here is a quick example of how to
+  * add and delete listeners using this class.  For this example, we will
+  * assume are firing <code>AdjustableEvent</code>'s.  However, this 
+  * same approach is useful for all events in the <code>java.awt.event</code>
+  * package, and more if this class is subclassed.
+  * <p>
+  * <code> 
+  * AdjustmentListener al;
+  * 
+  * public void 
+  * addAdjustmentListener(AdjustmentListener listener)
+  * {
+  *   al = AWTEventMulticaster.add(al, listener);
+  * }
+  *
+  * public void
+  * removeAdjustmentListener(AdjustmentListener listener)
+  * {
+  *   al = AWTEventMulticaster.remove(al, listener);
+  * }
+  * </code>
+  * <p>
+  * When it come time to process an event, simply call <code>al</code>,
+  * assuming it is not <code>null</code>.
+  * <p>
+  * The first time <code>add</code> is called it is passed
+  * <code>null</code> and <code>listener</code> as its arguments.  This
+  * starts building the chain.  This class returns <code>listener</code>
+  * which becomes the new <code>al</code>.  The next time, <code>add</code>
+  * is called with <code>al</code> and <code>listener</code> and the
+  * new listener is then chained to the old.
+  *
+  * @author Bryce McKinlay
+  * @author Aaron M. Renn (arenn@urbanophile.com)
+  */
+public class AWTEventMulticaster implements ComponentListener, 
+  ContainerListener, FocusListener, KeyListener, MouseListener,
+  MouseMotionListener, WindowListener, ActionListener, ItemListener, 
+  AdjustmentListener, TextListener, InputMethodListener, HierarchyListener, 
+  HierarchyBoundsListener
 {
   /**
    * A variable in the event chain.
@@ -126,32 +98,72 @@
   protected final EventListener a;
 
   /**
-   * A variable in the event chain.
+   * A variable in the event chain
    */
   protected final EventListener b;
 
   /**
    * Initializes a new instance of <code>AWTEventMulticaster</code> with
-   * the specified event listener parameters. The parameters should not be
-   * null, although it is not required to enforce this with a
-   * NullPointerException.
+   * the specified event listener parameters.
    *
-   * @param a the "a" listener object
-   * @param b the "b" listener object
+   * @param a The "a" listener object.
+   * @param b The "b" listener object.
    */
-  protected AWTEventMulticaster(EventListener a, EventListener b)
+  protected AWTEventMulticaster(EventListener a,
+                        	EventListener b)
   {
     this.a = a;
     this.b = b;
   }
 
   /**
-   * Removes one instance of the specified listener from this multicaster
-   * chain. This descends recursively if either child is a multicaster, and
-   * returns a multicaster chain with the old listener removed.
+   * Chain <code>EventListener</code> b to a.
+   *
+   * @param a - Listener to chain to.
+   * @param b - Listener to chain.
+   *
+   * @return Latest entry in the chain.
+   */
+  protected static EventListener addInternal(EventListener a, EventListener b)
+  {
+    if (a == null)
+      return b;
+    else if (b == null)
+      return a;
+    else return new AWTEventMulticaster(a, b);
+  }
+
+  /**
+   * Removes the listener <code>old</code> from the listener <code>lis</code>.
+   *
+   * @param lis The listener to remove <code>old</code> from.
+   * @param old The listener to remove.
+   *
+   * @return The resulting listener after the remove operation.
+   */
+  protected static EventListener removeInternal(EventListener l, 
+						EventListener oldl)
+  {
+    if (l == oldl)
+      return null;
+    else if (l instanceof AWTEventMulticaster)
+      {
+	AWTEventMulticaster mc = (AWTEventMulticaster) l;
+	return mc.remove(oldl);
+      }
+    return l;
+  }
+
+  /**
+   * Removes the specified object from this multicaster object.  If the
+   * object to remove is not part of this multicaster, then the remove
+   * method on the parent multicaster (if it exists) is called and a 
+   * new multicaster object is returned based on that object and this
+   * multicaster's non-parent object.
+   *
+   * @param old The object to remove from this multicaster.
    *
-   * @param oldl the object to remove from this multicaster
-   * @return the resulting multicaster with the specified listener removed
+   * @return The resulting multicaster with the specified listener removed.
    */
   protected EventListener remove(EventListener oldl)
   {
@@ -160,369 +172,361 @@
       return b;
     if (b == oldl)
       return a;
+
     // If a and/or b are Multicaster's, search them recursively.
     if (a instanceof AWTEventMulticaster)
       {
-        EventListener newa = ((AWTEventMulticaster) a).remove(oldl);
-        if (newa != a)
-          return new AWTEventMulticaster(newa, b);
-      }
+        AWTEventMulticaster mc = (AWTEventMulticaster) a;
+	EventListener newa = mc.remove(oldl);
+	if (newa != a)
+	  return new AWTEventMulticaster (newa, b);
+      }    
     if (b instanceof AWTEventMulticaster)
       {
-        EventListener newb = ((AWTEventMulticaster) b).remove(oldl);
-        if (newb != b)
-          return new AWTEventMulticaster(a, newb);
+        AWTEventMulticaster mc = (AWTEventMulticaster) a;
+	EventListener newb = mc.remove(oldl);
+	if (newb != b)
+	  return new AWTEventMulticaster (a, newb);
       }
+
     // oldl was not found.
     return this;
   }
 
   /**
-   * Handles this event by dispatching it to the "a" and "b" listener
-   * instances.
+   * Chain <code>ActionListener</code> b to a.
+   *
+   * @param a - Listener to chain to.
+   * @param b - Listener to chain.
    *
-   * @param event the event to handle
+   * @return Latest entry in the chain.
    */
-  public void componentResized(ComponentEvent e)
+  public static ActionListener add(ActionListener a, ActionListener b)
   {
-    ((ComponentListener) a).componentResized(e);
-    ((ComponentListener) b).componentResized(e);
+    return (ActionListener) addInternal(a, b);
   }
 
   /**
-   * Handles this event by dispatching it to the "a" and "b" listener
-   * instances.
+   * Chain <code>AdjustmentListener</code> b to a.
+   *
+   * @param a - Listener to chain to.
+   * @param b - Listener to chain.
    *
-   * @param event the event to handle
+   * @return Latest entry in the chain.
    */
-  public void componentMoved(ComponentEvent e)
+  public static AdjustmentListener add(AdjustmentListener a, 
+				       AdjustmentListener b)
   {
-    ((ComponentListener) a).componentMoved(e);
-    ((ComponentListener) b).componentMoved(e);
-  }
+    return (AdjustmentListener) addInternal(a, b);
+  }				       
 
   /**
-   * Handles this event by dispatching it to the "a" and "b" listener
-   * instances.
+   * Chain <code>ComponentListener</code> b to a.
+   *
+   * @param a - Listener to chain to.
+   * @param b - Listener to chain.
    *
-   * @param event the event to handle
+   * @return Latest entry in the chain.
    */
-  public void componentShown(ComponentEvent e)
+  public static ComponentListener add(ComponentListener a, ComponentListener b)
   {
-    ((ComponentListener) a).componentShown(e);
-    ((ComponentListener) b).componentShown(e);
+    return (ComponentListener) addInternal(a, b);
   }
 
   /**
-   * Handles this event by dispatching it to the "a" and "b" listener
-   * instances.
+   * Chain <code>ContainerListener</code> b to a.
+   *
+   * @param a - Listener to chain to.
+   * @param b - Listener to chain.
    *
-   * @param event the event to handle
+   * @return Latest entry in the chain.
    */
-  public void componentHidden(ComponentEvent e)
+  public static ContainerListener add(ContainerListener a, ContainerListener b)
   {
-    ((ComponentListener) a).componentHidden(e);
-    ((ComponentListener) b).componentHidden(e);
+    return (ContainerListener) addInternal(a, b);
   }
 
   /**
-   * Handles this event by dispatching it to the "a" and "b" listener
-   * instances.
+   * Chain <code>FocusListener</code> b to a.
+   *
+   * @param a - Listener to chain to.
+   * @param b - Listener to chain.
    *
-   * @param event the event to handle
+   * @return Latest entry in the chain.
    */
-  public void componentAdded(ContainerEvent e)
+  public static FocusListener add(FocusListener a, FocusListener b) 
   {
-    ((ContainerListener) a).componentAdded(e);
-    ((ContainerListener) b).componentAdded(e);
+    return (FocusListener) addInternal(a, b);
   }
 
-  /**
-   * Handles this event by dispatching it to the "a" and "b" listener
-   * instances.
-   *
-   * @param event the event to handle
-   */
-  public void componentRemoved(ContainerEvent e)
+  public static HierarchyBoundsListener add(HierarchyBoundsListener a, 
+					    HierarchyBoundsListener b)
   {
-    ((ContainerListener) a).componentRemoved(e);
-    ((ContainerListener) b).componentRemoved(e);
+    return (HierarchyBoundsListener) addInternal(a, b);
   }
 
-  /**
-   * Handles this event by dispatching it to the "a" and "b" listener
-   * instances.
-   *
-   * @param event the event to handle
-   */
-  public void focusGained(FocusEvent e)
+  public static HierarchyListener add(HierarchyListener a, HierarchyListener b)
   {
-    ((FocusListener) a).focusGained(e);
-    ((FocusListener) b).focusGained(e);
+    return (HierarchyListener) addInternal(a, b);
   }
 
-  /**
-   * Handles this event by dispatching it to the "a" and "b" listener
-   * instances.
-   *
-   * @param event the event to handle
-   */
-  public void focusLost(FocusEvent e)
+  public static InputMethodListener add(InputMethodListener a, 
+					InputMethodListener b)
   {
-    ((FocusListener) a).focusLost(e);
-    ((FocusListener) b).focusLost(e);
+    return (InputMethodListener) addInternal(a, b);
   }
 
   /**
-   * Handles this event by dispatching it to the "a" and "b" listener
-   * instances.
+   * Chain <code>ItemListener</code> b to a.
+   *
+   * @param a - Listener to chain to.
+   * @param b - Listener to chain.
    *
-   * @param event the event to handle
+   * @return Latest entry in the chain.
    */
-  public void keyTyped(KeyEvent e)
+  public static ItemListener add(ItemListener a, ItemListener b)
   {
-    ((KeyListener) a).keyTyped(e);
-    ((KeyListener) b).keyTyped(e);
+    return (ItemListener) addInternal(a, b);
   }
 
   /**
-   * Handles this event by dispatching it to the "a" and "b" listener
-   * instances.
+   * Chain <code>KeyListener</code> b to a.
    *
-   * @param event the event to handle
+   * @param a - Listener to chain to.
+   * @param b - Listener to chain.
+   *
+   * @return Latest entry in the chain.
    */
-  public void keyPressed(KeyEvent e)
+  public static KeyListener add(KeyListener a, KeyListener b)
   {
-    ((KeyListener) a).keyPressed(e);
-    ((KeyListener) b).keyPressed(e);
+    return (KeyListener) addInternal(a, b);
   }
 
   /**
-   * Handles this event by dispatching it to the "a" and "b" listener
-   * instances.
+   * Chain <code>MouseListener</code> b to a.
    *
-   * @param event the event to handle
+   * @param a - Listener to chain to.
+   * @param b - Listener to chain.
+   *
+   * @return Latest entry in the chain.
    */
-  public void keyReleased(KeyEvent e)
+  public static MouseListener add(MouseListener a, MouseListener b)
   {
-    ((KeyListener) a).keyReleased(e);
-    ((KeyListener) b).keyReleased(e);
+    return (MouseListener) addInternal(a, b);
   }
 
   /**
-   * Handles this event by dispatching it to the "a" and "b" listener
-   * instances.
+   * Chain <code>MouseMotionListener</code> b to a.
+   *
+   * @param a - Listener to chain to.
+   * @param b - Listener to chain.
    *
-   * @param event the event to handle
+   * @return Latest entry in the chain.
    */
-  public void mouseClicked(MouseEvent e)
+  public static MouseMotionListener add(MouseMotionListener a, 
+					MouseMotionListener b)
   {
-    ((MouseListener) a).mouseClicked(e);
-    ((MouseListener) b).mouseClicked(e);
+    return (MouseMotionListener) addInternal(a, b);
   }
 
   /**
-   * Handles this event by dispatching it to the "a" and "b" listener
-   * instances.
+   * Chain <code>AdjustmentListener</code> b to a.
    *
-   * @param event the event to handle
+   * @param a - Listener to chain to.
+   * @param b - Listener to chain.
+   *
+   * @return Latest entry in the chain.
    */
-  public void mousePressed(MouseEvent e)
+  public static TextListener add(TextListener a, TextListener b)
   {
-    ((MouseListener) a).mousePressed(e);
-    ((MouseListener) b).mousePressed(e);
+    return (TextListener) addInternal(a, b);
   }
 
   /**
-   * Handles this event by dispatching it to the "a" and "b" listener
-   * instances.
+   * Chain <code>WindowListener</code> b to a.
+   *
+   * @param a - Listener to chain to.
+   * @param b - Listener to chain.
    *
-   * @param event the event to handle
+   * @return Latest entry in the chain.
    */
-  public void mouseReleased(MouseEvent e)
+  public static WindowListener add(WindowListener a, WindowListener b)
   {
-    ((MouseListener) a).mouseReleased(e);
-    ((MouseListener) b).mouseReleased(e);
+    return (WindowListener) addInternal(a, b);
   }
 
   /**
-   * Handles this event by dispatching it to the "a" and "b" listener
-   * instances.
+   * Removes the listener <code>old</code> from the listener <code>lis</code>.
    *
-   * @param event the event to handle
+   * @param lis The listener to remove <code>old</code> from.
+   * @param old The listener to remove.
+   *
+   * @return The resulting listener after the remove operation.
    */
-  public void mouseEntered(MouseEvent e)
+  public static ActionListener remove(ActionListener l, ActionListener oldl)
   {
-    ((MouseListener) a).mouseEntered(e);
-    ((MouseListener) b).mouseEntered(e);
+    return (ActionListener) removeInternal(l, oldl);
   }
 
   /**
-   * Handles this event by dispatching it to the "a" and "b" listener
-   * instances.
+   * Removes the listener <code>old</code> from the listener <code>lis</code>.
+   *
+   * @param lis The listener to remove <code>old</code> from.
+   * @param old The listener to remove.
    *
-   * @param event the event to handle
+   * @return The resulting listener after the remove operation.
    */
-  public void mouseExited(MouseEvent e)
+  public static AdjustmentListener remove(AdjustmentListener l, 
+					  AdjustmentListener oldl) 
   {
-    ((MouseListener) a).mouseExited(e);
-    ((MouseListener) b).mouseExited(e);
+    return (AdjustmentListener) removeInternal(l, oldl);
   }
 
   /**
-   * Handles this event by dispatching it to the "a" and "b" listener
-   * instances.
+   * Removes the listener <code>old</code> from the listener <code>lis</code>.
+   *
+   * @param lis The listener to remove <code>old</code> from.
+   * @param old The listener to remove.
    *
-   * @param event the event to handle
+   * @return The resulting listener after the remove operation.
    */
-  public void mouseDragged(MouseEvent e)
+  public static ComponentListener remove(ComponentListener l, 
+					 ComponentListener oldl) 
   {
-    ((MouseMotionListener) a).mouseDragged(e);
-    ((MouseMotionListener) b).mouseDragged(e);
+    return (ComponentListener) removeInternal(l, oldl);
   }
 
   /**
-   * Handles this event by dispatching it to the "a" and "b" listener
-   * instances.
+   * Removes the listener <code>old</code> from the listener <code>lis</code>.
+   *
+   * @param lis The listener to remove <code>old</code> from.
+   * @param old The listener to remove.
    *
-   * @param event the event to handle
+   * @return The resulting listener after the remove operation.
    */
-  public void mouseMoved(MouseEvent e)
+  public static ContainerListener remove(ContainerListener l, 
+					 ContainerListener oldl) 
   {
-    ((MouseMotionListener) a).mouseMoved(e);
-    ((MouseMotionListener) b).mouseMoved(e);
+    return (ContainerListener) removeInternal(l, oldl);
   }
 
   /**
-   * Handles this event by dispatching it to the "a" and "b" listener
-   * instances.
+   * Removes the listener <code>old</code> from the listener <code>lis</code>.
+   *
+   * @param lis The listener to remove <code>old</code> from.
+   * @param old The listener to remove.
    *
-   * @param event the event to handle
+   * @return The resulting listener after the remove operation.
    */
-  public void windowOpened(WindowEvent e)
+  public static FocusListener remove(FocusListener l, FocusListener oldl) 
   {
-    ((WindowListener) a).windowOpened(e);
-    ((WindowListener) b).windowOpened(e);
+    return (FocusListener) removeInternal(l, oldl);
   }
 
-  /**
-   * Handles this event by dispatching it to the "a" and "b" listener
-   * instances.
-   *
-   * @param event the event to handle
-   */
-  public void windowClosing(WindowEvent e)
+  public static HierarchyBoundsListener remove(HierarchyBoundsListener l,
+                			       HierarchyBoundsListener oldl) 
   {
-    ((WindowListener) a).windowClosing(e);
-    ((WindowListener) b).windowClosing(e);
+    return (HierarchyBoundsListener) removeInternal(l, oldl);
   }
 
-  /**
-   * Handles this event by dispatching it to the "a" and "b" listener
-   * instances.
-   *
-   * @param event the event to handle
-   */
-  public void windowClosed(WindowEvent e)
+  public static HierarchyListener remove(HierarchyListener l, 
+					 HierarchyListener oldl) 
   {
-    ((WindowListener) a).windowClosed(e);
-    ((WindowListener) b).windowClosed(e);
+    return (HierarchyListener) removeInternal(l, oldl);
   }
 
-  /**
-   * Handles this event by dispatching it to the "a" and "b" listener
-   * instances.
-   *
-   * @param event the event to handle
-   */
-  public void windowIconified(WindowEvent e)
+  public static InputMethodListener remove(InputMethodListener l, 
+					   InputMethodListener oldl) 
   {
-    ((WindowListener) a).windowIconified(e);
-    ((WindowListener) b).windowIconified(e);
+    return (InputMethodListener) removeInternal(l, oldl);
   }
 
   /**
-   * Handles this event by dispatching it to the "a" and "b" listener
-   * instances.
+   * Removes the listener <code>old</code> from the listener <code>lis</code>.
    *
-   * @param event the event to handle
+   * @param lis The listener to remove <code>old</code> from.
+   * @param old The listener to remove.
+   *
+   * @return The resulting listener after the remove operation.
    */
-  public void windowDeiconified(WindowEvent e)
+  public static ItemListener remove(ItemListener l, ItemListener oldl) 
   {
-    ((WindowListener) a).windowDeiconified(e);
-    ((WindowListener) b).windowDeiconified(e);
+    return (ItemListener) removeInternal(l, oldl);
   }
 
   /**
-   * Handles this event by dispatching it to the "a" and "b" listener
-   * instances.
+   * Removes the listener <code>old</code> from the listener <code>lis</code>.
    *
-   * @param event the event to handle
+   * @param lis The listener to remove <code>old</code> from.
+   * @param old The listener to remove.
+   *
+   * @return The resulting listener after the remove operation.
    */
-  public void windowActivated(WindowEvent e)
+  public static KeyListener remove(KeyListener l, KeyListener oldl) 
   {
-    ((WindowListener) a).windowActivated(e);
-    ((WindowListener) b).windowActivated(e);
+    return (KeyListener) removeInternal(l, oldl);
   }
 
   /**
-   * Handles this event by dispatching it to the "a" and "b" listener
-   * instances.
+   * Removes the listener <code>old</code> from the listener <code>lis</code>.
    *
-   * @param event the event to handle
+   * @param lis The listener to remove <code>old</code> from.
+   * @param old The listener to remove.
+   *
+   * @return The resulting listener after the remove operation.
    */
-  public void windowDeactivated(WindowEvent e)
+  public static MouseListener remove(MouseListener l, MouseListener oldl) 
   {
-    ((WindowListener) a).windowDeactivated(e);
-    ((WindowListener) b).windowDeactivated(e);
+    return (MouseListener) removeInternal(l, oldl);
   }
 
   /**
-   * Handles this event by dispatching it to the "a" and "b" listener
-   * instances.
+   * Removes the listener <code>old</code> from the listener <code>lis</code>.
    *
-   * @param event the event to handle
-   * @since 1.4
+   * @param lis The listener to remove <code>old</code> from.
+   * @param old The listener to remove.
+   *
+   * @return The resulting listener after the remove operation.
    */
-  public void windowStateChanged(WindowEvent e)
+  public static MouseMotionListener remove(MouseMotionListener l, 
+					   MouseMotionListener oldl) 
   {
-    ((WindowStateListener) a).windowStateChanged(e);
-    ((WindowStateListener) b).windowStateChanged(e);
+    return (MouseMotionListener) removeInternal(l, oldl);
   }
 
   /**
-   * Handles this event by dispatching it to the "a" and "b" listener
-   * instances.
+   * Removes the listener <code>old</code> from the listener <code>lis</code>.
    *
-   * @param event the event to handle
-   * @since 1.4
+   * @param lis The listener to remove <code>old</code> from.
+   * @param old The listener to remove.
+   *
+   * @return The resulting listener after the remove operation.
    */
-  public void windowGainedFocus(WindowEvent e)
+  public static TextListener remove(TextListener l, TextListener oldl)                                            
   {
-    ((WindowFocusListener) a).windowGainedFocus(e);
-    ((WindowFocusListener) b).windowGainedFocus(e);
+    return (TextListener) removeInternal(l, oldl);
   }
 
   /**
-   * Handles this event by dispatching it to the "a" and "b" listener
-   * instances.
+   * Removes the listener <code>old</code> from the listener <code>lis</code>.
    *
-   * @param event the event to handle
-   * @since 1.4
+   * @param lis The listener to remove <code>old</code> from.
+   * @param old The listener to remove.
+   *
+   * @return The resulting listener after the remove operation.
    */
-  public void windowLostFocus(WindowEvent e)
+  public static WindowListener remove(WindowListener l, WindowListener oldl) 
   {
-    ((WindowFocusListener) a).windowLostFocus(e);
-    ((WindowFocusListener) b).windowLostFocus(e);
+    return (WindowListener) removeInternal(l, oldl);
   }
 
   /**
    * Handles this event by dispatching it to the "a" and "b" listener
    * instances.
    *
-   * @param event the event to handle
+   * @param event The event to handle.
    */
-  public void actionPerformed(ActionEvent e)
+  public void actionPerformed(ActionEvent e) 
   {
     ((ActionListener) a).actionPerformed(e);
     ((ActionListener) b).actionPerformed(e);
@@ -532,21 +536,9 @@
    * Handles this event by dispatching it to the "a" and "b" listener
    * instances.
    *
-   * @param event the event to handle
-   */
-  public void itemStateChanged(ItemEvent e)
-  {
-    ((ItemListener) a).itemStateChanged(e);
-    ((ItemListener) b).itemStateChanged(e);
-  }
-
-  /**
-   * Handles this event by dispatching it to the "a" and "b" listener
-   * instances.
-   *
-   * @param event the event to handle
+   * @param event The event to handle.
    */
-  public void adjustmentValueChanged(AdjustmentEvent e)
+  public void adjustmentValueChanged(AdjustmentEvent e) 
   {
     ((AdjustmentListener) a).adjustmentValueChanged(e);
     ((AdjustmentListener) b).adjustmentValueChanged(e);
@@ -556,654 +548,393 @@
    * Handles this event by dispatching it to the "a" and "b" listener
    * instances.
    *
-   * @param event the event to handle
+   * @param event The event to handle.
    */
-  public void textValueChanged(TextEvent e)
+  public void componentHidden(ComponentEvent e)
   {
-    ((TextListener) a).textValueChanged(e);
-    ((TextListener) b).textValueChanged(e);
+    ((ComponentListener) a).componentHidden(e);
+    ((ComponentListener) b).componentHidden(e);
   }
 
   /**
    * Handles this event by dispatching it to the "a" and "b" listener
    * instances.
    *
-   * @param event the event to handle
-   * @since 1.2
+   * @param event The event to handle.
    */
-  public void inputMethodTextChanged(InputMethodEvent e)
+  public void componentMoved(ComponentEvent e)
   {
-    ((InputMethodListener) a).inputMethodTextChanged(e);
-    ((InputMethodListener) b).inputMethodTextChanged(e);
+    ((ComponentListener) a).componentMoved(e);
+    ((ComponentListener) b).componentMoved(e);
   }
 
   /**
    * Handles this event by dispatching it to the "a" and "b" listener
    * instances.
    *
-   * @param event the event to handle
-   * @since 1.2
+   * @param event The event to handle.
    */
-  public void caretPositionChanged(InputMethodEvent e)
+  public void componentResized(ComponentEvent e)
   {
-    ((InputMethodListener) a).caretPositionChanged(e);
-    ((InputMethodListener) b).caretPositionChanged(e);
+    ((ComponentListener) a).componentResized(e);
+    ((ComponentListener) b).componentResized(e);
   }
 
   /**
    * Handles this event by dispatching it to the "a" and "b" listener
    * instances.
    *
-   * @param event the event to handle
-   * @since 1.3
+   * @param event The event to handle.
    */
-  public void hierarchyChanged(HierarchyEvent e)
+  public void componentShown(ComponentEvent e)
   {
-    ((HierarchyListener) a).hierarchyChanged(e);
-    ((HierarchyListener) b).hierarchyChanged(e);
+    ((ComponentListener) a).componentShown(e);
+    ((ComponentListener) b).componentShown(e);
   }
 
   /**
    * Handles this event by dispatching it to the "a" and "b" listener
    * instances.
    *
-   * @param event the event to handle
-   * @since 1.3
+   * @param event The event to handle.
    */
-  public void ancestorMoved(HierarchyEvent e)
+  public void componentAdded(ContainerEvent e)
   {
-    ((HierarchyBoundsListener) a).ancestorMoved(e);
-    ((HierarchyBoundsListener) b).ancestorMoved(e);
+    ((ContainerListener) a).componentAdded(e);
+    ((ContainerListener) b).componentAdded(e);
   }
 
   /**
    * Handles this event by dispatching it to the "a" and "b" listener
    * instances.
    *
-   * @param event the event to handle
-   * @since 1.3
+   * @param event The event to handle.
    */
-  public void ancestorResized(HierarchyEvent e)
+  public void componentRemoved(ContainerEvent e)
   {
-    ((HierarchyBoundsListener) a).ancestorResized(e);
-    ((HierarchyBoundsListener) b).ancestorResized(e);
+    ((ContainerListener) a).componentRemoved(e);
+    ((ContainerListener) b).componentRemoved(e);
   }
 
   /**
    * Handles this event by dispatching it to the "a" and "b" listener
    * instances.
    *
-   * @param event the event to handle
-   * @since 1.4
-   */
-  public void mouseWheelMoved(MouseWheelEvent e)
-  {
-    ((MouseWheelListener) a).mouseWheelMoved(e);
-    ((MouseWheelListener) b).mouseWheelMoved(e);
-  }
-
-  /**
-   * Chain <code>ComponentListener</code> a and b.
-   *
-   * @param a the "a" listener, may be null
-   * @param b the "b" listener, may be null
-   * @return latest entry in the chain
-   */
-  public static ComponentListener add(ComponentListener a, ComponentListener b)
-  {
-    return (ComponentListener) addInternal(a, b);
-  }
-
-  /**
-   * Chain <code>ContainerListener</code> a and b.
-   *
-   * @param a the "a" listener, may be null
-   * @param b the "b" listener, may be null
-   * @return latest entry in the chain
-   */
-  public static ContainerListener add(ContainerListener a, ContainerListener b)
-  {
-    return (ContainerListener) addInternal(a, b);
-  }
-
-  /**
-   * Chain <code>FocusListener</code> a and b.
-   *
-   * @param a the "a" listener, may be null
-   * @param b the "b" listener, may be null
-   * @return latest entry in the chain
-   */
-  public static FocusListener add(FocusListener a, FocusListener b)
-  {
-    return (FocusListener) addInternal(a, b);
-  }
-
-  /**
-   * Chain <code>KeyListener</code> a and b.
-   *
-   * @param a the "a" listener, may be null
-   * @param b the "b" listener, may be null
-   * @return latest entry in the chain
-   */
-  public static KeyListener add(KeyListener a, KeyListener b)
-  {
-    return (KeyListener) addInternal(a, b);
-  }
-
-  /**
-   * Chain <code>MouseListener</code> a and b.
-   *
-   * @param a the "a" listener, may be null
-   * @param b the "b" listener, may be null
-   * @return latest entry in the chain
-   */
-  public static MouseListener add(MouseListener a, MouseListener b)
-  {
-    return (MouseListener) addInternal(a, b);
-  }
-
-  /**
-   * Chain <code>MouseMotionListener</code> a and b.
-   *
-   * @param a the "a" listener, may be null
-   * @param b the "b" listener, may be null
-   * @return latest entry in the chain
+   * @param event The event to handle.
    */
-  public static MouseMotionListener add(MouseMotionListener a,
-                                        MouseMotionListener b)
-  {
-    return (MouseMotionListener) addInternal(a, b);
-  }
-
-  /**
-   * Chain <code>WindowListener</code> a and b.
-   *
-   * @param a the "a" listener, may be null
-   * @param b the "b" listener, may be null 
-   * @return latest entry in the chain
-   */
-  public static WindowListener add(WindowListener a, WindowListener b)
-  {
-    return (WindowListener) addInternal(a, b);
-  }
-
-  /**
-   * Chain <code>WindowStateListener</code> a and b.
-   *
-   * @param a the "a" listener, may be null
-   * @param b the "b" listener, may be null 
-   * @return latest entry in the chain
-   * @since 1.4
-   */
-  public static WindowStateListener add(WindowStateListener a,
-                                        WindowStateListener b)
-  {
-    return (WindowStateListener) addInternal(a, b);
-  }
-
-  /**
-   * Chain <code>WindowFocusListener</code> a and b.
-   *
-   * @param a the "a" listener, may be null
-   * @param b the "b" listener, may be null 
-   * @return latest entry in the chain
-   * @since 1.4
-   */
-  public static WindowFocusListener add(WindowFocusListener a,
-                                        WindowFocusListener b)
-  {
-    return (WindowFocusListener) addInternal(a, b);
-  }
-
-  /**
-   * Chain <code>ActionListener</code> a and b.
-   *
-   * @param a the "a" listener, may be null
-   * @param b the "b" listener, may be null
-   * @return latest entry in the chain
-   */
-  public static ActionListener add(ActionListener a, ActionListener b)
+  public void focusGained(FocusEvent e)
   {
-    return (ActionListener) addInternal(a, b);
+    ((FocusListener) a).focusGained(e);
+    ((FocusListener) b).focusGained(e);
   }
 
   /**
-   * Chain <code>ItemListener</code> a and b.
+   * Handles this event by dispatching it to the "a" and "b" listener
+   * instances.
    *
-   * @param a the "a" listener, may be null
-   * @param b the "b" listener, may be null
-   * @return latest entry in the chain
+   * @param event The event to handle.
    */
-  public static ItemListener add(ItemListener a, ItemListener b)
+  public void focusLost(FocusEvent e) 
   {
-    return (ItemListener) addInternal(a, b);
+    ((FocusListener) a).focusLost(e);
+    ((FocusListener) b).focusLost(e);
   }
 
   /**
-   * Chain <code>AdjustmentListener</code> a and b.
+   * Handles this event by dispatching it to the "a" and "b" listener
+   * instances.
    *
-   * @param a the "a" listener, may be null
-   * @param b the "b" listener, may be null
-   * @return latest entry in the chain
+   * @param event The event to handle.
    */
-  public static AdjustmentListener add(AdjustmentListener a,
-                                       AdjustmentListener b)
+  public void ancestorMoved(HierarchyEvent e) 
   {
-    return (AdjustmentListener) addInternal(a, b);
+    ((HierarchyBoundsListener) a).ancestorMoved(e);
+    ((HierarchyBoundsListener) b).ancestorMoved(e);
   }
 
   /**
-   * Chain <code>AdjustmentListener</code> a and b.
+   * Handles this event by dispatching it to the "a" and "b" listener
+   * instances.
    *
-   * @param a the "a" listener, may be null
-   * @param b the "b" listener, may be null
-   * @return latest entry in the chain
+   * @param event The event to handle.
    */
-  public static TextListener add(TextListener a, TextListener b)
+  public void ancestorResized(HierarchyEvent e) 
   {
-    return (TextListener) addInternal(a, b);
+    ((HierarchyBoundsListener) a).ancestorResized(e);
+    ((HierarchyBoundsListener) b).ancestorResized(e);
   }
 
   /**
-   * Chain <code>InputMethodListener</code> a and b.
+   * Handles this event by dispatching it to the "a" and "b" listener
+   * instances.
    *
-   * @param a the "a" listener, may be null
-   * @param b the "b" listener, may be null
-   * @return latest entry in the chain
-   * @since 1.2
+   * @param event The event to handle.
    */
-  public static InputMethodListener add(InputMethodListener a,
-                                        InputMethodListener b)
+  public void hierarchyChanged(HierarchyEvent e) 
   {
-    return (InputMethodListener) addInternal(a, b);
+    ((HierarchyListener) a).hierarchyChanged(e);
+    ((HierarchyListener) b).hierarchyChanged(e);
   }
 
   /**
-   * Chain <code>HierarchyListener</code> a and b.
+   * Handles this event by dispatching it to the "a" and "b" listener
+   * instances.
    *
-   * @param a the "a" listener, may be null
-   * @param b the "b" listener, may be null
-   * @return latest entry in the chain
-   * @since 1.3
+   * @param event The event to handle.
    */
-  public static HierarchyListener add(HierarchyListener a, HierarchyListener b)
+  public void caretPositionChanged(InputMethodEvent e)
   {
-    return (HierarchyListener) addInternal(a, b);
+    ((InputMethodListener) a).caretPositionChanged(e);
+    ((InputMethodListener) b).caretPositionChanged(e);
   }
 
   /**
-   * Chain <code>HierarchyBoundsListener</code> a and b.
+   * Handles this event by dispatching it to the "a" and "b" listener
+   * instances.
    *
-   * @param a the "a" listener, may be null
-   * @param b the "b" listener, may be null
-   * @return latest entry in the chain
-   * @since 1.3
+   * @param event The event to handle.
    */
-  public static HierarchyBoundsListener add(HierarchyBoundsListener a,
-                                            HierarchyBoundsListener b)
+  public void inputMethodTextChanged(InputMethodEvent e) 
   {
-    return (HierarchyBoundsListener) addInternal(a, b);
+    ((InputMethodListener) a).inputMethodTextChanged(e);
+    ((InputMethodListener) b).inputMethodTextChanged(e);
   }
 
   /**
-   * Chain <code>MouseWheelListener</code> a and b.
+   * Handles this event by dispatching it to the "a" and "b" listener
+   * instances.
    *
-   * @param a the "a" listener, may be null
-   * @param b the "b" listener, may be null
-   * @return latest entry in the chain
-   * @since 1.4
+   * @param event The event to handle.
    */
-  public static MouseWheelListener add(MouseWheelListener a,
-                                       MouseWheelListener b)
+  public void itemStateChanged(ItemEvent e) 
   {
-    return (MouseWheelListener) addInternal(a, b);
-  }
+    ((ItemListener) a).itemStateChanged(e);
+    ((ItemListener) b).itemStateChanged(e);
+  }  
 
   /**
-   * Removes the listener <code>oldl</code> from the listener <code>l</code>.
+   * Handles this event by dispatching it to the "a" and "b" listener
+   * instances.
    *
-   * @param l the listener chain to reduce
-   * @param oldl the listener to remove
-   * @return the resulting listener chain
+   * @param event The event to handle.
    */
-  public static ComponentListener remove(ComponentListener l,
-                                         ComponentListener oldl)
+  public void keyPressed(KeyEvent e)
   {
-    return (ComponentListener) removeInternal(l, oldl);
+    ((KeyListener) a).keyPressed(e);
+    ((KeyListener) b).keyPressed(e);
   }
 
   /**
-   * Removes the listener <code>oldl</code> from the listener <code>l</code>.
+   * Handles this event by dispatching it to the "a" and "b" listener
+   * instances.
    *
-   * @param l the listener chain to reduce
-   * @param oldl the listener to remove
-   * @return the resulting listener chain
+   * @param event The event to handle.
    */
-  public static ContainerListener remove(ContainerListener l,
-                                         ContainerListener oldl)
+  public void keyReleased(KeyEvent e) 
   {
-    return (ContainerListener) removeInternal(l, oldl);
+    ((KeyListener) a).keyReleased(e);
+    ((KeyListener) b).keyReleased(e);
   }
 
   /**
-   * Removes the listener <code>oldl</code> from the listener <code>l</code>.
+   * Handles this event by dispatching it to the "a" and "b" listener
+   * instances.
    *
-   * @param l the listener chain to reduce
-   * @param oldl the listener to remove
-   * @return the resulting listener chain
+   * @param event The event to handle.
    */
-  public static FocusListener remove(FocusListener l, FocusListener oldl)
+  public void keyTyped(KeyEvent e) 
   {
-    return (FocusListener) removeInternal(l, oldl);
+    ((KeyListener) a).keyTyped(e);
+    ((KeyListener) b).keyTyped(e);
   }
 
   /**
-   * Removes the listener <code>oldl</code> from the listener <code>l</code>.
+   * Handles this event by dispatching it to the "a" and "b" listener
+   * instances.
    *
-   * @param l the listener chain to reduce
-   * @param oldl the listener to remove
-   * @return the resulting listener chain
+   * @param event The event to handle.
    */
-  public static KeyListener remove(KeyListener l, KeyListener oldl)
+  public void mouseClicked(MouseEvent e) 
   {
-    return (KeyListener) removeInternal(l, oldl);
+    ((MouseListener) a).mouseClicked(e);
+    ((MouseListener) b).mouseClicked(e);
   }
 
   /**
-   * Removes the listener <code>oldl</code> from the listener <code>l</code>.
+   * Handles this event by dispatching it to the "a" and "b" listener
+   * instances.
    *
-   * @param l the listener chain to reduce
-   * @param oldl the listener to remove
-   * @return the resulting listener chain
+   * @param event The event to handle.
    */
-  public static MouseListener remove(MouseListener l, MouseListener oldl)
+  public void mouseEntered(MouseEvent e) 
   {
-    return (MouseListener) removeInternal(l, oldl);
+    ((MouseListener) a).mouseEntered(e);
+    ((MouseListener) b).mouseEntered(e);
   }
 
   /**
-   * Removes the listener <code>oldl</code> from the listener <code>l</code>.
+   * Handles this event by dispatching it to the "a" and "b" listener
+   * instances.
    *
-   * @param l the listener chain to reduce
-   * @param oldl the listener to remove
-   * @return the resulting listener chain
+   * @param event The event to handle.
    */
-  public static MouseMotionListener remove(MouseMotionListener l,
-                                           MouseMotionListener oldl)
+  public void mouseExited(MouseEvent e) 
   {
-    return (MouseMotionListener) removeInternal(l, oldl);
+    ((MouseListener) a).mouseExited(e);
+    ((MouseListener) b).mouseExited(e);
   }
 
   /**
-   * Removes the listener <code>oldl</code> from the listener <code>l</code>.
+   * Handles this event by dispatching it to the "a" and "b" listener
+   * instances.
    *
-   * @param l the listener chain to reduce
-   * @param oldl the listener to remove
-   * @return the resulting listener chain
+   * @param event The event to handle.
    */
-  public static WindowListener remove(WindowListener l, WindowListener oldl)
+  public void mousePressed(MouseEvent e) 
   {
-    return (WindowListener) removeInternal(l, oldl);
+    ((MouseListener) a).mousePressed(e);
+    ((MouseListener) b).mousePressed(e);
   }
 
   /**
-   * Removes the listener <code>oldl</code> from the listener <code>l</code>.
+   * Handles this event by dispatching it to the "a" and "b" listener
+   * instances.
    *
-   * @param l the listener chain to reduce
-   * @param oldl the listener to remove
-   * @return the resulting listener chain
-   * @since 1.4
+   * @param event The event to handle.
    */
-  public static WindowStateListener remove(WindowStateListener l,
-                                           WindowStateListener oldl)
+  public void mouseReleased(MouseEvent e) 
   {
-    return (WindowStateListener) removeInternal(l, oldl);
+    ((MouseListener) a).mouseReleased(e);
+    ((MouseListener) b).mouseReleased(e);
   }
 
   /**
-   * Removes the listener <code>oldl</code> from the listener <code>l</code>.
+   * Handles this event by dispatching it to the "a" and "b" listener
+   * instances.
    *
-   * @param l the listener chain to reduce
-   * @param oldl the listener to remove
-   * @return the resulting listener chain
-   * @since 1.4
+   * @param event The event to handle.
    */
-  public static WindowFocusListener remove(WindowFocusListener l,
-                                           WindowFocusListener oldl)
+  public void mouseDragged(MouseEvent e) 
   {
-    return (WindowFocusListener) removeInternal(l, oldl);
+    ((MouseMotionListener) a).mouseDragged(e);
+    ((MouseMotionListener) b).mouseDragged(e);
   }
 
   /**
-   * Removes the listener <code>oldl</code> from the listener <code>l</code>.
+   * Handles this event by dispatching it to the "a" and "b" listener
+   * instances.
    *
-   * @param l the listener chain to reduce
-   * @param oldl the listener to remove
-   * @return the resulting listener chain
+   * @param event The event to handle.
    */
-  public static ActionListener remove(ActionListener l, ActionListener oldl)
+  public void mouseMoved(MouseEvent e) 
   {
-    return (ActionListener) removeInternal(l, oldl);
+    ((MouseMotionListener) a).mouseMoved(e);
+    ((MouseMotionListener) b).mouseMoved(e);
   }
 
   /**
-   * Removes the listener <code>oldl</code> from the listener <code>l</code>.
+   * Handles this event by dispatching it to the "a" and "b" listener
+   * instances.
    *
-   * @param l the listener chain to reduce
-   * @param oldl the listener to remove
-   * @return the resulting listener chain
+   * @param event The event to handle.
    */
-  public static ItemListener remove(ItemListener l, ItemListener oldl)
+  public void textValueChanged(TextEvent e) 
   {
-    return (ItemListener) removeInternal(l, oldl);
+    ((TextListener) a).textValueChanged(e);
+    ((TextListener) b).textValueChanged(e);
   }
 
   /**
-   * Removes the listener <code>oldl</code> from the listener <code>l</code>.
+   * Handles this event by dispatching it to the "a" and "b" listener
+   * instances.
    *
-   * @param l the listener chain to reduce
-   * @param oldl the listener to remove
-   * @return the resulting listener chain
+   * @param event The event to handle.
    */
-  public static AdjustmentListener remove(AdjustmentListener l,
-                                          AdjustmentListener oldl)
+  public void windowActivated(WindowEvent e) 
   {
-    return (AdjustmentListener) removeInternal(l, oldl);
+    ((WindowListener) a).windowActivated(e);
+    ((WindowListener) b).windowActivated(e);
   }
 
   /**
-   * Removes the listener <code>oldl</code> from the listener <code>l</code>.
+   * Handles this event by dispatching it to the "a" and "b" listener
+   * instances.
    *
-   * @param l the listener chain to reduce
-   * @param oldl the listener to remove
-   * @return the resulting listener chain
+   * @param event The event to handle.
    */
-  public static TextListener remove(TextListener l, TextListener oldl)
+  public void windowClosed(WindowEvent e) 
   {
-    return (TextListener) removeInternal(l, oldl);
+    ((WindowListener) a).windowClosed(e);
+    ((WindowListener) b).windowClosed(e);
   }
 
   /**
-   * Removes the listener <code>oldl</code> from the listener <code>l</code>.
+   * Handles this event by dispatching it to the "a" and "b" listener
+   * instances.
    *
-   * @param l the listener chain to reduce
-   * @param oldl the listener to remove
-   * @return the resulting listener chain
-   * @since 1.2
+   * @param event The event to handle.
    */
-  public static InputMethodListener remove(InputMethodListener l,
-                                           InputMethodListener oldl)
+  public void windowClosing(WindowEvent e) 
   {
-    return (InputMethodListener) removeInternal(l, oldl);
+    ((WindowListener) a).windowClosing(e);
+    ((WindowListener) b).windowClosing(e);
   }
 
   /**
-   * Removes the listener <code>oldl</code> from the listener <code>l</code>.
+   * Handles this event by dispatching it to the "a" and "b" listener
+   * instances.
    *
-   * @param l the listener chain to reduce
-   * @param oldl the listener to remove
-   * @return the resulting listener chain
-   * @since 1.3
+   * @param event The event to handle.
    */
-  public static HierarchyListener remove(HierarchyListener l,
-                                         HierarchyListener oldl)
+  public void windowDeactivated(WindowEvent e) 
   {
-    return (HierarchyListener) removeInternal(l, oldl);
+    ((WindowListener) a).windowDeactivated(e);
+    ((WindowListener) b).windowDeactivated(e);
   }
 
   /**
-   * Removes the listener <code>oldl</code> from the listener <code>l</code>.
+   * Handles this event by dispatching it to the "a" and "b" listener
+   * instances.
    *
-   * @param l the listener chain to reduce
-   * @param oldl the listener to remove
-   * @return the resulting listener chain
-   * @since 1.3
+   * @param event The event to handle.
    */
-  public static HierarchyBoundsListener remove(HierarchyBoundsListener l,
-                                               HierarchyBoundsListener oldl)
+  public void windowDeiconified(WindowEvent e) 
   {
-    return (HierarchyBoundsListener) removeInternal(l, oldl);
+    ((WindowListener) a).windowDeiconified(e);
+    ((WindowListener) b).windowDeiconified(e);
   }
 
   /**
-   * Removes the listener <code>oldl</code> from the listener <code>l</code>.
+   * Handles this event by dispatching it to the "a" and "b" listener
+   * instances.
    *
-   * @param l the listener chain to reduce
-   * @param oldl the listener to remove
-   * @return the resulting listener chain
-   * @since 1.4
+   * @param event The event to handle.
    */
-  public static MouseWheelListener remove(MouseWheelListener l,
-                                          MouseWheelListener oldl)
+  public void windowIconified(WindowEvent e) 
   {
-    return (MouseWheelListener) removeInternal(l, oldl);
+    ((WindowListener) a).windowIconified(e);
+    ((WindowListener) b).windowIconified(e);
   }
 
   /**
-   * Chain <code>EventListener</code> a and b.
+   * Handles this event by dispatching it to the "a" and "b" listener
+   * instances.
    *
-   * @param a the "a" listener, may be null
-   * @param b the "b" listener, may be null 
-   * @return latest entry in the chain
+   * @param event The event to handle.
    */
-  protected static EventListener addInternal(EventListener a, EventListener b)
+  public void windowOpened(WindowEvent e) 
   {
-    if (a == null)
-      return b;
-    if (b == null)
-      return a;
-    return new AWTEventMulticaster(a, b);
+    ((WindowListener) a).windowOpened(e);
+    ((WindowListener) b).windowOpened(e);
   }
 
-  /**
-   * Removes the listener <code>oldl</code> from the listener <code>l</code>.
-   *
-   * @param l the listener chain to reduce
-   * @param oldl the listener to remove
-   * @return the resulting listener chain
-   */
-  protected static EventListener removeInternal(EventListener l,
-                                                EventListener oldl)
+  protected static void save(ObjectOutputStream s, String k, EventListener l) 
   {
-    if (l == oldl)
-      return null;
-    if (l instanceof AWTEventMulticaster)
-      return ((AWTEventMulticaster) l).remove(oldl);
-    return l;
+    throw new RuntimeException("Not Implemented");
   }
 
-  /**
-   * Saves all Serializable listeners to a serialization stream.
-   *
-   * @param s the stream to save to
-   * @param k a prefix stream put before each serializable listener
-   * @throws IOException if serialization fails
-   */
   protected void saveInternal(ObjectOutputStream s, String k)
-    throws IOException
   {
-    // This is not documented by Sun, but I think it is correct.
-    if (a instanceof AWTEventMulticaster)
-      ((AWTEventMulticaster) a).saveInternal(s, k);
-    else if (a instanceof Serializable)
-      {
-        s.writeObject(k);
-        s.writeObject(a);
-      }
-    if (b instanceof AWTEventMulticaster)
-      ((AWTEventMulticaster) b).saveInternal(s, k);
-    else if (b instanceof Serializable)
-      {
-        s.writeObject(k);
-        s.writeObject(b);
-      }
-  }
-
-  /**
-   * Saves a Serializable listener chain to a serialization stream.
-   *
-   * @param s the stream to save to
-   * @param k a prefix stream put before each serializable listener
-   * @param l the listener chain to save
-   * @throws IOException if serialization fails
-   */
-  protected static void save(ObjectOutputStream s, String k, EventListener l)
-    throws IOException
-  {
-    // This is not documented by Sun, but I think it is correct.
-    if (l instanceof AWTEventMulticaster)
-      ((AWTEventMulticaster) l).saveInternal(s, k);
-    else if (l instanceof Serializable)
-      {
-        s.writeObject(k);
-        s.writeObject(l);
-      }
-  }
-
-  /**
-   * Returns an array of all chained listeners of the specified type in the
-   * given chain. A null listener returns an empty array, and a listener
-   * which is not an AWTEventMulticaster returns an array of one element. If
-   * no listeners in the chain are of the specified type, an empty array is
-   * returned.
-   *
-   * @param l the listener chain to convert to an array
-   * @param type the type of listeners to collect
-   * @return an array of the listeners of that type in the chain
-   * @throws ClassCastException if type is not assignable from EventListener
-   * @throws NullPointerException if type is null
-   * @throws IllegalArgumentException if type is Void.TYPE
-   * @since 1.4
-   */
-  public static EventListener[] getListeners(EventListener l, Class type)
-  {
-    ArrayList list = new ArrayList();
-    if (l instanceof AWTEventMulticaster)
-      ((AWTEventMulticaster) l).getListeners(list, type);
-    else if (type.isInstance(l))
-      list.add(l);
-    EventListener[] r = (EventListener[]) Array.newInstance(type, list.size());
-    list.toArray(r);
-    return r;
-  }
-
-  /**
-   * Collects all instances of the given type in the chain into the list.
-   *
-   * @param l the list to collect into
-   * @param type the type of listeners to collect
-   * @throws NullPointerException if type is null
-   * @see #getListeners(EventListener, Class)
-   */
-  private void getListeners(ArrayList l, Class type)
-  {
-    if (a instanceof AWTEventMulticaster)
-      ((AWTEventMulticaster) a).getListeners(l, type);
-    else if (type.isInstance(a))
-      l.add(a);
-    if (b instanceof AWTEventMulticaster)
-      ((AWTEventMulticaster) b).getListeners(l, type);
-    else if (type.isInstance(b))
-      l.add(b);
+    throw new RuntimeException("Not Implemented");
   }
-} // class AWTEventMulticaster
+}
