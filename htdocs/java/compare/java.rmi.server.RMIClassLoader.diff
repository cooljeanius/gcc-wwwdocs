--- /home/tromey/gnu/Nightly/classpath/classpath/java/rmi/server/RMIClassLoader.java	2003-09-26 02:21:34.000000000 -0600
+++ java/rmi/server/RMIClassLoader.java	2003-09-27 02:18:13.000000000 -0600
@@ -35,15 +35,22 @@
 this exception to your version of the library, but you are not
 obligated to do so.  If you do not wish to do so, delete this
 exception statement from your version. */
+
 package java.rmi.server;
 
 import java.net.MalformedURLException;
 import java.net.URL;
+import java.net.URLConnection;
 import java.net.URLClassLoader;
+import java.io.IOException;
+import java.io.DataInputStream;
 import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
 import java.util.Hashtable;
 import java.util.Map;
 import java.util.StringTokenizer;
+import java.util.WeakHashMap;
 
 
 /**
@@ -90,70 +97,15 @@
     }
 
     private final String annotation;
-  }
-  
-  /** 
-   * This class is used to identify a cached classloader by its codebase and 
-   * the context classloader that is its parent.
-   */  
-  private static class CacheKey
-  {
-     private String mCodeBase;
-     private ClassLoader mContextClassLoader;
-  	
-     public CacheKey (String theCodebase, ClassLoader theContextClassLoader)
-     {
-       mCodeBase = theCodebase;
-       mContextClassLoader = theContextClassLoader;
-     }
-  	
-    /**
-     * @return true if the codebase and the context classloader are equal
-     */
-    public boolean equals (Object theOther)
-    {
-      if (theOther != null
-          && theOther instanceof CacheKey)
-      {
-      	CacheKey key = (CacheKey) theOther;
-	
-      	return (equals (this.mCodeBase,key.mCodeBase)
-                && equals (this.mContextClassLoader, key.mContextClassLoader));
-        }
-      return false;
-    }
-    
-    /**
-     * Test if the two objects are equal or both null.
-     * @param theOne
-     * @param theOther
-     * @return
-     */
-    private boolean equals (Object theOne, Object theOther)
-    {
-      return theOne != null ? theOne.equals (theOther) : theOther == null;
-    }
-
-    /**
-     * @return hashCode  
-     */
-    public int hashCode()
-    {
-      return ((mCodeBase != null           ? mCodeBase.hashCode()           :  0) 
-              ^(mContextClassLoader != null ? mContextClassLoader.hashCode() : -1));
-    }
-
-    public String toString()
-    {
-      return "[" + mCodeBase + "," + mContextClassLoader + "]"; 
-    }
 
   }
 
   private static Map cacheLoaders; //map annotations to loaders
   private static Map cacheAnnotations; //map loaders to annotations
-  private static String defaultAnnotation;
 
+  //defaultAnnotation is got from system property
+  // "java.rmi.server.defaultAnnotation"
+  private static String defaultAnnotation;
   //URL object for defaultAnnotation
   private static URL defaultCodebase;
 
@@ -180,11 +132,9 @@
 
     if (defaultCodebase != null)
       {
-        defaultLoader = new MyClassLoader (new URL[] { defaultCodebase }, null,
-                                           defaultAnnotation);
-        cacheLoaders.put (new CacheKey (defaultAnnotation,
-                                        Thread.currentThread().getContextClassLoader()),
-                                        defaultLoader);
+        defaultLoader = new MyClassLoader(new URL[]{ defaultCodebase },
+					  null, defaultAnnotation);
+        cacheLoaders.put(defaultAnnotation, defaultLoader);
       }
     }
 
@@ -200,91 +150,49 @@
   public static Class loadClass (String codebases, String name)
     throws MalformedURLException, ClassNotFoundException
   {
+    Class c = null;
     ClassLoader loader = Thread.currentThread().getContextClassLoader();
 
     //try context class loader first
-    try
-    {
-      return loader.loadClass (name);
-    }
-    catch (ClassNotFoundException e)
-    {
-      // class not found in the local classpath
-    }
-
-    if (codebases.length() == 0) //==""
-      {
-        loader = defaultLoader;
-      }
-    else
+    try 
       {
-        loader = getClassLoader(codebases);
+	    c = loader.loadClass(name);       
       }
+    catch(ClassNotFoundException e) {}
 
-    if (loader == null)
-      {
-        //do not throw NullPointerException
-        throw new ClassNotFoundException ("Could not find class (" + name +
-                                          ") at codebase (" + codebases + ")");
-      }
-      
-    return loader.loadClass (name);
-  }
+    if (c != null)
+      return c;
 
-  /**
-   * Gets a classloader for the given codebase and with the current
-   * context classloader as parent.
-   * 
-   * @param codebases
-   * 
-   * @return a classloader for the given codebase
-   * 
-   * @throws MalformedURLException if the codebase contains a malformed URL
-   */
-  private static ClassLoader getClassLoader (String codebases) 
-    throws MalformedURLException
-  {
-    ClassLoader loader;
-    CacheKey loaderKey = new CacheKey
-      (codebases, Thread.currentThread().getContextClassLoader());
-    loader = (ClassLoader) cacheLoaders.get (loaderKey);
-      
-    if (loader == null)
+    if (codebases.length() == 0) //==""
+      loader = defaultLoader;
+    else 
       {
-        //create an entry in cacheLoaders mapping a loader to codebases.
-        // codebases are separated by " "
-        StringTokenizer tok = new StringTokenizer (codebases, " ");
-        ArrayList urls = new ArrayList();
-      
-        while (tok.hasMoreTokens())
-          urls.add (new URL (tok.nextToken()));
-      
-        loader = new MyClassLoader ((URL[]) urls.toArray (new URL [urls.size()]),
-                                    Thread.currentThread().getContextClassLoader(),
-                                    codebases);
-        cacheLoaders.put (loaderKey, loader);
+	loader = (ClassLoader)cacheLoaders.get(codebases);
+	if (loader == null)
+	  {
+	    //create an entry in cacheLoaders mapping a loader to codebases.
+            
+	    // codebases are separated by " "
+	    StringTokenizer tok = new StringTokenizer(codebases, " "); 
+	    ArrayList urls = new ArrayList();
+	    while (tok.hasMoreTokens())
+	      urls.add(new URL(tok.nextToken()));
+  
+	    loader = new MyClassLoader((URL[])urls.toArray(new URL[urls.size()]),
+					null, codebases);
+	    cacheLoaders.put(codebases, loader);
+	  }
       }
-           
-    return loader;
-  }
 
-  /**
-   * Returns a string representation of the network location where a remote
-   * endpoint can get the class-definition of the given class.
-   *
-   * @param cl
-   *
-   * @return a space seperated list of URLs where the class-definition
-   * of cl may be found
-   */
-  public static String getClassAnnotation (Class cl)
+    return loader.loadClass(name);
+  }
+  
+  public static String getClassAnnotation(Class cl)
   {
     ClassLoader loader = cl.getClassLoader();
-
-    if ((loader == null)
-        || (loader == ClassLoader.getSystemClassLoader()))
+    if (loader == null || loader == ClassLoader.getSystemClassLoader())
       {
-        return System.getProperty ("java.rmi.server.codebase");
+	return null; //??
       }
 
     if (loader instanceof MyClassLoader)
@@ -301,27 +209,20 @@
 
     if (loader instanceof URLClassLoader)
       {
-        URL[] urls = ((URLClassLoader) loader).getURLs();
-
-        if (urls.length == 0)
-          {
-            return null;
-          }
-
-        StringBuffer annotation = new StringBuffer (64 * urls.length);
-
-        for (int i = 0; i < urls.length; i++)
-          {
-            annotation.append (urls [i].toExternalForm());
-            annotation.append (' ');
-          }
-
-        s = annotation.toString();
-        cacheAnnotations.put (loader, s);
-        return s;
+	URL[] urls = ((URLClassLoader)loader).getURLs();
+	if(urls.length == 0)
+	  return null;
+
+	StringBuffer annotation = new StringBuffer(64*urls.length);
+	for(int i = 0; i < urls.length; i++)
+	  {
+	    annotation.append(urls[i].toExternalForm());
+	    annotation.append(' ');
+	  }
+	s = annotation.toString();
+	cacheAnnotations.put(loader, s);
       }
-
-    return System.getProperty ("java.rmi.server.codebase");
+    return null;
   }
 
   /**
