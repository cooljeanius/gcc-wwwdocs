--- /home/tromey/gnu/egcs/classpath/classpath/java/rmi/server/RMIClassLoader.java	Sun Feb 10 17:34:21 2002
+++ java/rmi/server/RMIClassLoader.java	Tue Jan 22 16:01:36 2002
@@ -1,5 +1,5 @@
-/* RMIClassLoader.java
-  Copyright (c) 1996, 1997, 1998, 1999, 2002 Free Software Foundation, Inc.
+/*
+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -7,7 +7,7 @@
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2, or (at your option)
 any later version.
-
+ 
 GNU Classpath is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
@@ -44,82 +44,59 @@
 import java.net.MalformedURLException;
 import java.util.StringTokenizer;
 
-public class RMIClassLoader
-{
+public class RMIClassLoader {
+
+static private class MyClassLoader extends ClassLoader {
 
-  static private class MyClassLoader extends ClassLoader
-  {
-    /**
-     * Non-private constructor to reduce bytecode emitted.
-     */
-    MyClassLoader()
-    {
-    }
-
-    Class defineClass(String name, byte[] data)
-    {
-      return defineClass(name, data, 0, data.length);
-    }
-  }
-
-  static private MyClassLoader loader = new MyClassLoader();
-
-  /**
-   * @deprecated
-   */
-  public static Class loadClass(String name)
-    throws MalformedURLException, ClassNotFoundException
-  {
-    return loadClass(System.getProperty("java.rmi.server.codebase"), name);
-  }
-
-  public static Class loadClass(URL codebase, String name)
-    throws MalformedURLException, ClassNotFoundException
-  {
-    URL u = new URL(codebase, name + ".class");
-    try
-      {
-        URLConnection conn = u.openConnection();
-        DataInputStream strm = new DataInputStream(conn.getInputStream());
-        byte data[] = new byte[conn.getContentLength()];
-        strm.readFully(data);
-        return loader.defineClass(name, data);
-      }
-    catch (IOException _)
-      {
-        throw new ClassNotFoundException(name);
-      }
-  }
-
-  public static Class loadClass(String codebase, String name)
-    throws MalformedURLException, ClassNotFoundException
-  {
-    StringTokenizer tok = new StringTokenizer(codebase, ":");
-    while (tok.hasMoreTokens())
-      {
-        try
-          {
-            return loadClass(new URL(tok.nextToken()), name);
-          }
-        catch (ClassNotFoundException _)
-          {
-            // Ignore - try the next one.
-          }
-      }
-    throw new ClassNotFoundException(name);
-  }
-
-  public static String getClassAnnotation(Class cl)
-  {
-    return null; // We don't yet do this.
-  }
-
-  /**
-   * @deprecated
-   */
-  public static Object getSecurityContext(ClassLoader loader)
-  {
-    throw new Error("Not implemented");
-  }
+Class defineClass(String name, byte[] data) {
+	return (defineClass(name, data, 0, data.length));
+}
+}
+static private MyClassLoader loader = new MyClassLoader();
+
+/**
+ * @deprecated
+ */
+public static Class loadClass(String name) throws MalformedURLException, ClassNotFoundException {
+	return (loadClass(System.getProperty("java.rmi.server.codebase"), name));
+}
+
+public static Class loadClass(URL codebase, String name) throws MalformedURLException, ClassNotFoundException {
+	URL u = new URL(codebase, name + ".class");
+	try {
+		URLConnection conn = u.openConnection();
+		DataInputStream strm = new DataInputStream(conn.getInputStream());
+		byte data[] = new byte[conn.getContentLength()];
+		strm.readFully(data);
+		return (loader.defineClass(name, data));
+	}
+	catch (IOException _) {
+		throw new ClassNotFoundException(name);
+	}
+}
+
+public static Class loadClass(String codebase, String name) throws MalformedURLException, ClassNotFoundException {
+	StringTokenizer tok = new StringTokenizer(codebase, ":");
+	while (tok.hasMoreTokens()) {
+		try {
+			return (loadClass(new URL(tok.nextToken()), name));
+		}
+		catch (ClassNotFoundException _) {
+			// Ignore - try the next one.
+		}
+	}
+	throw new ClassNotFoundException(name);
+}
+
+public static String getClassAnnotation(Class cl) {
+	return (null);	// We don't yet do this.
+}
+
+/**
+ * @deprecated
+ */
+public static Object getSecurityContext(ClassLoader loader) {
+	throw new Error("Not implemented");
+}
 
 }
