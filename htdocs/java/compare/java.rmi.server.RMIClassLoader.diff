--- /home/tromey/gnu/Nightly/classpath/classpath/java/rmi/server/RMIClassLoader.java	2003-10-07 02:20:27.000000000 -0600
+++ java/rmi/server/RMIClassLoader.java	2003-09-27 02:18:13.000000000 -0600
@@ -40,11 +40,17 @@
 
 import java.net.MalformedURLException;
 import java.net.URL;
+import java.net.URLConnection;
 import java.net.URLClassLoader;
+import java.io.IOException;
+import java.io.DataInputStream;
 import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
 import java.util.Hashtable;
 import java.util.Map;
 import java.util.StringTokenizer;
+import java.util.WeakHashMap;
 
 
 /**
@@ -91,63 +97,6 @@
     }
 
     private final String annotation;
-  }
-  
-  /** 
-   * This class is used to identify a cached classloader by its codebase and 
-   * the context classloader that is its parent.
-   */  
-  private static class CacheKey
-  {
-     private String mCodeBase;
-     private ClassLoader mContextClassLoader;
-  	
-     public CacheKey (String theCodebase, ClassLoader theContextClassLoader)
-     {
-       mCodeBase = theCodebase;
-       mContextClassLoader = theContextClassLoader;
-     }
-  	
-    /**
-     * @return true if the codebase and the context classloader are equal
-     */
-    public boolean equals (Object theOther)
-    {
-      if (theOther != null
-          && theOther instanceof CacheKey)
-      {
-      	CacheKey key = (CacheKey) theOther;
-	
-      	return (equals (this.mCodeBase,key.mCodeBase)
-                && equals (this.mContextClassLoader, key.mContextClassLoader));
-        }
-      return false;
-    }
-    
-    /**
-     * Test if the two objects are equal or both null.
-     * @param theOne
-     * @param theOther
-     * @return
-     */
-    private boolean equals (Object theOne, Object theOther)
-    {
-      return theOne != null ? theOne.equals (theOther) : theOther == null;
-    }
-
-    /**
-     * @return hashCode  
-     */
-    public int hashCode()
-    {
-      return ((mCodeBase != null           ? mCodeBase.hashCode()           :  0) 
-              ^(mContextClassLoader != null ? mContextClassLoader.hashCode() : -1));
-    }
-
-    public String toString()
-    {
-      return "[" + mCodeBase + "," + mContextClassLoader + "]"; 
-    }
 
   }
 
@@ -157,7 +106,6 @@
   //defaultAnnotation is got from system property
   // "java.rmi.server.defaultAnnotation"
   private static String defaultAnnotation;
-
   //URL object for defaultAnnotation
   private static URL defaultCodebase;
 
@@ -173,22 +121,20 @@
     defaultAnnotation = System.getProperty ("java.rmi.server.defaultAnnotation");
 
     try
-      {
-        if (defaultAnnotation != null)
-          defaultCodebase = new URL (defaultAnnotation);
-      }
+    {
+      if (defaultAnnotation != null)
+        defaultCodebase = new URL (defaultAnnotation);
+    }
     catch (Exception _)
-      {
-        defaultCodebase = null;
-      }
+    {
+      defaultCodebase = null;
+    }
 
     if (defaultCodebase != null)
       {
-        defaultLoader = new MyClassLoader (new URL[] { defaultCodebase }, null,
-                                           defaultAnnotation);
-        cacheLoaders.put (new CacheKey (defaultAnnotation,
-                                        Thread.currentThread().getContextClassLoader()),
-                                        defaultLoader);
+        defaultLoader = new MyClassLoader(new URL[]{ defaultCodebase },
+					  null, defaultAnnotation);
+        cacheLoaders.put(defaultAnnotation, defaultLoader);
       }
     }
 
@@ -204,91 +150,49 @@
   public static Class loadClass (String codebases, String name)
     throws MalformedURLException, ClassNotFoundException
   {
+    Class c = null;
     ClassLoader loader = Thread.currentThread().getContextClassLoader();
 
     //try context class loader first
     try 
       {
-        return loader.loadClass (name);
-      }
-    catch (ClassNotFoundException e)
-      {
-        // class not found in the local classpath
+	    c = loader.loadClass(name);       
       }
+    catch(ClassNotFoundException e) {}
+
+    if (c != null)
+      return c;
 
     if (codebases.length() == 0) //==""
+      loader = defaultLoader;
+    else 
       {
-        loader = defaultLoader;
-      }
-    else
-      {
-        loader = getClassLoader(codebases);
+	loader = (ClassLoader)cacheLoaders.get(codebases);
+	if (loader == null)
+	  {
+	    //create an entry in cacheLoaders mapping a loader to codebases.
+            
+	    // codebases are separated by " "
+	    StringTokenizer tok = new StringTokenizer(codebases, " "); 
+	    ArrayList urls = new ArrayList();
+	    while (tok.hasMoreTokens())
+	      urls.add(new URL(tok.nextToken()));
+  
+	    loader = new MyClassLoader((URL[])urls.toArray(new URL[urls.size()]),
+					null, codebases);
+	    cacheLoaders.put(codebases, loader);
+	  }
       }
 
-    if (loader == null)
-      {
-        //do not throw NullPointerException
-        throw new ClassNotFoundException ("Could not find class (" + name +
-                                          ") at codebase (" + codebases + ")");
-      }
-      
-    return loader.loadClass (name);
-  }
-
-  /**
-   * Gets a classloader for the given codebase and with the current
-   * context classloader as parent.
-   * 
-   * @param codebases
-   * 
-   * @return a classloader for the given codebase
-   * 
-   * @throws MalformedURLException if the codebase contains a malformed URL
-   */
-  private static ClassLoader getClassLoader (String codebases) 
-    throws MalformedURLException
-  {
-    ClassLoader loader;
-    CacheKey loaderKey = new CacheKey
-      (codebases, Thread.currentThread().getContextClassLoader());
-    loader = (ClassLoader) cacheLoaders.get (loaderKey);
-      
-    if (loader == null)
-      {
-        //create an entry in cacheLoaders mapping a loader to codebases.
-        // codebases are separated by " "
-        StringTokenizer tok = new StringTokenizer (codebases, " ");
-        ArrayList urls = new ArrayList();
-      
-        while (tok.hasMoreTokens())
-          urls.add (new URL (tok.nextToken()));
-      
-        loader = new MyClassLoader ((URL[]) urls.toArray (new URL [urls.size()]),
-                                    Thread.currentThread().getContextClassLoader(),
-                                    codebases);
-        cacheLoaders.put (loaderKey, loader);
-      }
-           
-    return loader;
+    return loader.loadClass(name);
   }
- 
-  /**
-   * Returns a string representation of the network location where a remote
-   * endpoint can get the class-definition of the given class.
-   *
-   * @param cl
-   *
-   * @return a space seperated list of URLs where the class-definition
-   * of cl may be found
-   */
-  public static String getClassAnnotation (Class cl)
+  
+  public static String getClassAnnotation(Class cl)
   {
     ClassLoader loader = cl.getClassLoader();
-    
-    if (loader == null
-        || loader == ClassLoader.getSystemClassLoader())
+    if (loader == null || loader == ClassLoader.getSystemClassLoader())
       {
-        return System.getProperty ("java.rmi.server.codebase");
+	return null; //??
       }
 
     if (loader instanceof MyClassLoader)
@@ -299,29 +203,26 @@
     String s = (String) cacheAnnotations.get (loader);
 
     if (s != null)
-      return s;
-
-    if (loader instanceof URLClassLoader)
       {
-        URL[] urls = ((URLClassLoader) loader).getURLs();
-
-        if (urls.length == 0)
-          return null;
-
-        StringBuffer annotation = new StringBuffer (64 * urls.length);
-
-        for (int i = 0; i < urls.length; i++)
-          {
-            annotation.append (urls [i].toExternalForm());
-            annotation.append (' ');
-          }
-
-        s = annotation.toString();
-        cacheAnnotations.put (loader, s);
         return s;
       }
 
-    return System.getProperty ("java.rmi.server.codebase");
+    if (loader instanceof URLClassLoader)
+      {
+	URL[] urls = ((URLClassLoader)loader).getURLs();
+	if(urls.length == 0)
+	  return null;
+
+	StringBuffer annotation = new StringBuffer(64*urls.length);
+	for(int i = 0; i < urls.length; i++)
+	  {
+	    annotation.append(urls[i].toExternalForm());
+	    annotation.append(' ');
+	  }
+	s = annotation.toString();
+	cacheAnnotations.put(loader, s);
+      }
+    return null;
   }
 
   /**
