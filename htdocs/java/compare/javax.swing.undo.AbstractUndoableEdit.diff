--- /home/tromey/gnu/Nightly/classpath/classpath/javax/swing/undo/AbstractUndoableEdit.java	2003-11-18 02:23:28.000000000 -0700
+++ javax/swing/undo/AbstractUndoableEdit.java	2003-06-13 02:27:46.000000000 -0600
@@ -1,4 +1,4 @@
-/* AbstractUndoableEdit.java
+/* AbstractTableModel.java --
    Copyright (C) 2002, 2003 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
@@ -39,285 +39,180 @@
 package javax.swing.undo;
 
 import java.io.Serializable;
-import javax.swing.UIManager;
-
 
 /**
- * A default implementation of <code>UndoableEdit</code> that can be
- * used as a base for implementing editing operations.
- *
- * @author Andrew Selkirk (aselkirk@sympatico.ca)
- * @author Sascha Brawer (brawer@dandelis.ch)
+ * AbstractUndoableEdit
+ * @author Andrew Selkirk
  */
-public class AbstractUndoableEdit
-  implements UndoableEdit, Serializable
+public class AbstractUndoableEdit implements UndoableEdit, Serializable
 {
-  /**
-   * The serialization ID.  Verified using the <code>serialver</code>
-   * tool of Apple/Sun JDK 1.3.1 on MacOS X 10.1.5, and Sun JDK
-   * 1.4.1_01 on GNU/Linux.
-   */
   static final long serialVersionUID = 580150227676302096L;
 
+  //-------------------------------------------------------------
+  // Constants --------------------------------------------------
+  //-------------------------------------------------------------
 
   /**
-   * The constant string &#x201c;Undo&#x201d;, which was returned by
-   * {@link #getUndoPresentationName()} on early versions of the
-   * platform. However, this field has become obsolete with version
-   * 1.3.1.  That method now retrieves a localized string from the
-   * {@link javax.swing.UIManager}, using the key
-   * <code>&#x201c;AbstractUndoableEdit.undoText&#x201d;</code>.
+   * String returned by getRedoPresentationName()
    */
-  protected static final String UndoName = "Undo";
-
+  protected static final String RedoName = "Redo";
 
   /**
-   * The constant string &#x201c;Redo&#x201d;, which was returned by
-   * {@link #getRedoPresentationName()} on early versions of the
-   * platform. However, this field has become obsolete with version
-   * 1.3.1.  That method now retrieves a localized string from the
-   * {@link javax.swing.UIManager}, using the key
-   * <code>&#x201c;AbstractUndoableEdit.redoText&#x201d;</code>.
+   * String returned by getUndoPresentationName()
    */
-  protected static final String RedoName = "Redo";
+  protected static final String UndoName = "Undo";
+
 
+  //-------------------------------------------------------------
+  // Variables --------------------------------------------------
+  //-------------------------------------------------------------
 
   /**
-   * Indicates whether this editing action has been executed.  A value
-   * of <code>true</code> means that the action was performed, or that
-   * a redo operation was successful. A value of <code>false</code>
-   * means that the action has not yet performed, or that an undo
-   * operation was successful.
+   * TODO
    */
-  private boolean hasBeenDone;
-
+  private boolean hasBeenDone = false;
 
   /**
-   * Indicates whether this editing action is still alive. The value
-   * is set to <code>true</code> by the constructor, and to
-   * <code>false</code> by the {@link #die()} method.
+   * The edit is alive
    */
-  private boolean alive;
+  private boolean alive = true;
+
 
+  //-------------------------------------------------------------
+  // Initialization ---------------------------------------------
+  //-------------------------------------------------------------
 
   /**
-   * Constructs a new <code>AbstractUndoableEdit</code>. The initial
-   * state is that the editing action is alive, and
-   * <code>hasBeenDone</code> is <code>true</code>.
+   * Create new AbstractUndoableEdit
    */
   public AbstractUndoableEdit()
   {
-    // The API specification is not clear, but Mauve test code has
-    // determined that hasBeenDone is initially set to true.
-    alive = hasBeenDone = true;
-  }
+  } // AbstractUndoableEdit()
 
 
+  //-------------------------------------------------------------
+  // Interface: UndoableEdit ------------------------------------
+  //-------------------------------------------------------------
+
   /**
-   * Undoes this editing action.
-   *
-   * @throws CannotUndoException if {@link #canUndo()} returns
-   * <code>false</code>, for example because this action has already
-   * been undone.
-   *
-   * @see #canUndo()
-   * @see #redo()
-   */
-  public void undo()
-    throws CannotUndoException
-  {
-    if (!canUndo())
-      throw new CannotUndoException();
-    hasBeenDone = false;
-  }
-  
-  
-  /**
-   * Determines whether it would be possible to undo this editing
-   * action.
-   *
-   * @return <code>true</code> to indicate that this action can be
-   * undone, <code>false</code> otherwise.
-   *
-   * @see #undo()
-   * @see #canRedo()
+   * addEdit
+   * @param anEdit TODO
+   * @returns TODO
    */
-  public boolean canUndo()
+  public boolean addEdit(UndoableEdit anEdit)
   {
-    return alive && hasBeenDone;
-  }
-  
-  
+    return false;
+  } // addEdit()
+
   /**
-   * Redoes this editing action.
-   *
-   * @throws CannotRedoException if {@link #canRedo()} returns
-   * <code>false</code>, for example because this action has not
-   * yet been undone.
-   *
-   * @see #canRedo()
-   * @see #undo()
+   * canRedo()
+   * @returns true if redoable, false otherwise
    */
-  public void redo()
-    throws CannotRedoException
+  public boolean canRedo()
   {
-    if (!canRedo())
-      throw new CannotRedoException();
-    hasBeenDone = true;
-  }
-  
-  
+    if (alive == true && hasBeenDone == false)
+      return true;
+    return false;
+  } // canRedo()
+
   /**
-   * Determines whether it would be possible to redo this editing
-   * action.
-   *
-   * @return <code>true</code> to indicate that this action can be
-   * redone, <code>false</code> otherwise.
-   *
-   * @see #redo()
-   * @see #canUndo()
+   * canUndo()
+   * @returns true if undoable, false otherwise
    */
-  public boolean canRedo()
+  public boolean canUndo()
   {
-    return alive && !hasBeenDone;
-  }
-
+    if (alive == true && hasBeenDone == true)
+      return true;
+    return false;
+  } // canUndo()
 
   /**
-   * Informs this edit action that it will no longer be used. Some
-   * actions might use this information to release resources, for
-   * example open files.  Called by {@link UndoManager} before this
-   * action is removed from the edit queue.
+   * die
    */
   public void die()
   {
     alive = false;
-  }
+  } // die()
 
+  /**
+   * getPresentation
+   * @returns TODO
+   */
+  public String getPresentationName()
+  {
+    return "";
+  } // getPresentationName()
 
   /**
-   * Incorporates another editing action into this one, thus forming a
-   * combined action.
-   *
-   * <p>The default implementation always returns <code>false</code>,
-   * indicating that the editing action could not be incorporated.
-   *
-   * @param edit the editing action to be incorporated.
+   * getRedoPresentationName
+   * @returns TODO
    */
-  public boolean addEdit(UndoableEdit edit)
+  public String getRedoPresentationName()
   {
-    return false;
-  }
-  
-  
+    if (getPresentationName().equals(""))
+      return RedoName;
+    return RedoName + " " + getPresentationName();
+  } // getRedoPresentationName()
+
   /**
-   * Incorporates another editing action into this one, thus forming a
-   * combined action that replaces the argument action.
-   *
-   * <p>The default implementation always returns <code>false</code>,
-   * indicating that the argument action should not be replaced.
-   *
-   * @param edit the editing action to be replaced.
+   * getUndoPresentationName
+   * @returns TODO
    */
-  public boolean replaceEdit(UndoableEdit edit)
+  public String getUndoPresentationName()
   {
-    return false;
-  }
-  
-  
+    if (getPresentationName().equals(""))
+      return UndoName;
+    return UndoName + " " + getPresentationName();
+  } // getUndoPresentationName()
+
   /**
-   * Determines whether this editing action is significant enough for
-   * being seperately undoable by the user. A typical significant
-   * action would be the resizing of an object. However, changing the
-   * selection in a text document would usually not be considered
-   * significant.
-   *
-   * <p>The default implementation returns <code>true</code>.
-   *
-   * @return <code>true</code> to indicate that the action is
-   * significant enough for being separately undoable, or
-   * <code>false</code> otherwise.
+   * isSignificant
+   * @returns true
    */
   public boolean isSignificant()
   {
     return true;
-  }
-  
-  
+  } // isSignificant()
+
   /**
-   * Returns a human-readable, localized name that describes this
-   * editing action and can be displayed to the user.
-   *
-   * <p>The default implementation returns an empty string.
+   * redo
+   * @throws CannotRedoException TODO
    */
-  public String getPresentationName()
+  public void redo() throws CannotRedoException
   {
-    return "";
-  }
-
+    if (! canRedo())
+      throw new CannotRedoException();
+    hasBeenDone = true;
+  } // redo()
 
   /**
-   * Calculates a localized name for presenting the undo action to the
-   * user.
-   *
-   * <p>The default implementation returns the concatenation of the
-   * string &#x201c;Undo&#x201d; and the action name, which is
-   * determined by calling {@link #getPresentationName()}.
-   *
-   * <p>The string &#x201c;Undo&#x201d; is retrieved from the {@link
-   * javax.swing.UIManager}, using the key
-   * <code>&#x201c;AbstractUndoableEdit.undoText&#x201d;</code>.  This
-   * allows the text to be localized.
+   * replaceEdit
+   * @param anEdit TODO
+   * @returns TODO
    */
-  public String getUndoPresentationName()
+  public boolean replaceEdit(UndoableEdit anEdit)
   {
-    String msg, pres;
-
-    msg = UIManager.getString("AbstractUndoableEdit.undoText");
-    if (msg == null)
-      msg = UndoName;
-
-    pres = getPresentationName();
-    if ((pres == null) || (pres.length() == 0))
-      return msg;
-    else
-      return msg + ' ' + pres;
-  }
-
+    return false;
+  } // replaceEdit()
 
   /**
-   * Calculates a localized name for presenting the redo action to the
-   * user.
-   *
-   * <p>The default implementation returns the concatenation of the
-   * string &#x201c;Redo&#x201d; and the action name, which is
-   * determined by calling {@link #getPresentationName()}.
-   *
-   * <p>The string &#x201c;Redo&#x201d; is retrieved from the {@link
-   * javax.swing.UIManager}, using the key
-   * <code>&#x201c;AbstractUndoableEdit.redoText&#x201d;</code>.  This
-   * allows the text to be localized.
+   * String representation
+   * @returns String representation
    */
-  public String getRedoPresentationName()
+  public String toString()
   {
-    String msg, pres;
-
-    msg = UIManager.getString("AbstractUndoableEdit.redoText");
-    if (msg == null)
-      msg = RedoName;
-
-    pres = getPresentationName();
-    if ((pres == null) || (pres.length() == 0))
-      return msg;
-    else
-      return msg + ' ' + pres;
+    return (super.toString() + " hasBeenDone: " + hasBeenDone
+	    + " alive: " + alive);
   }
 
-
-  public String toString()
+  /**
+   * undo
+   * @throws CannotUndoException TODO
+   */
+  public void undo() throws CannotUndoException
   {
-    return super.toString()
-      + " hasBeenDone: " + hasBeenDone
-      + " alive: " + alive;
-  }
-}
+    if (! canUndo())
+      throw new CannotUndoException();
+    hasBeenDone = false;
+  } // undo()
+} // AbstractUndoableEdit
