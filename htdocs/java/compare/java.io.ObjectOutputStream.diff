--- /home/tromey/gnu/Nightly/classpath/classpath/java/io/ObjectOutputStream.java	2003-12-03 02:20:26.000000000 -0700
+++ java/io/ObjectOutputStream.java	2003-12-24 02:18:18.000000000 -0700
@@ -162,9 +162,6 @@
    * @exception NotSerializableException An attempt was made to
    * serialize an <code>Object</code> that is not serializable.
    *
-   * @exception InvalidClassException Somebody tried to serialize
-   * an object which is wrongly formatted.
-   *
    * @exception IOException Exception from underlying
    * <code>OutputStream</code>.
    */
@@ -282,7 +279,7 @@
 	    ObjectStreamClass osc = ObjectStreamClass.lookupForClassObject (clazz);
 	    if (osc == null)
 	      throw new NotSerializableException (clazz.getName ());
-	    
+
 	    if (clazz.isArray ())
 	      {
 		realOutput.writeByte (TC_ARRAY);
@@ -304,9 +301,9 @@
 	      {
 		if (protocolVersion == PROTOCOL_VERSION_2)
 		  setBlockDataMode (true);
-		
+
 		((Externalizable)obj).writeExternal (this);
-		
+
 		if (protocolVersion == PROTOCOL_VERSION_2)
 		  {
 		    setBlockDataMode (false);
@@ -321,11 +318,11 @@
 		currentObject = obj;
 		ObjectStreamClass[] hierarchy =
 		  ObjectStreamClass.getObjectStreamClasses (clazz);
-		
+
 		for (int i=0; i < hierarchy.length; i++)
 		  {
 		    currentObjectStreamClass = hierarchy[i];
-		    
+
 		    fieldsAlreadyWritten = false;
 		    if (currentObjectStreamClass.hasWriteMethod ())
 		      {
@@ -364,11 +361,10 @@
 	  }
 	catch (IOException ioe)
 	  {
-	    throw new StreamCorruptedException ("Exception " + ioe + " thrown while exception was being written to stream.");
+	    throw new StreamCorruptedException ("Exception " + ioe + " thrown while exception ("+e+") was being written to stream.");
 	  }
 
 	reset (true);
-	
       }
     finally
       {
@@ -410,8 +406,9 @@
     annotateClass (osc.forClass ());
     setBlockDataMode (oldmode);
     realOutput.writeByte (TC_ENDBLOCKDATA);
-    
-    if (osc.isSerializable ())
+
+    if (osc.isSerializable()
+	|| osc.isExternalizable())
       writeObject (osc.getSuper ());
     else
       writeObject (null);
@@ -447,7 +444,7 @@
       throw new NotActiveException ("defaultWriteObject called by non-active class and/or object");
 
     if (fieldsAlreadyWritten)
-      throw new IOException ("Only one of putFields and defaultWriteObject may be called, and it may only be called once");
+      throw new IOException ("Only one of writeFields and defaultWriteObject may be called, and it may only be called once");
 
     fieldsAlreadyWritten = true;
   }
@@ -509,7 +506,7 @@
   {
     if (version != PROTOCOL_VERSION_1 && version != PROTOCOL_VERSION_2)
       throw new IOException ("Invalid protocol version requested.");
-    
+
     protocolVersion = version;
   }
 
@@ -870,151 +867,142 @@
 
   public PutField putFields () throws IOException
   {
-    if (currentPutField != null)
-      return currentPutField;
-
-    markFieldsWritten ();
-
-    currentPutField = new PutField ()
+    if (currentPutField == null)
       {
-	private byte[] prim_field_data
-	  = new byte[currentObjectStreamClass.primFieldSize];
-	private Object[] objs
-	  = new Object[currentObjectStreamClass.objectFieldCount];
-
-	private ObjectStreamField getField (String name)
-	{
-	  ObjectStreamField field
-	    = currentObjectStreamClass.getField (name);
-	  
-	  if (field == null)
-	    throw new IllegalArgumentException("no such serializable field " + name);
-	  
-	  return field;
-	}
-
-	public void put (String name, boolean value)
-	{
-	  ObjectStreamField field = getField (name);
-
-	  checkType (field, 'Z');
-	  prim_field_data[field.getOffset ()] = (byte)(value ? 1 : 0);
-	}
-
-	public void put (String name, byte value)
-	{
-	  ObjectStreamField field = getField (name);
-
-	  checkType (field, 'B');
-	  prim_field_data[field.getOffset ()] = value;
-	}
-
-	public void put (String name, char value)
-	{
-	  ObjectStreamField field = getField (name);
-
-	  checkType (field, 'C');
-	  int off = field.getOffset ();
-	  prim_field_data[off++] = (byte)(value >>> 8);
-	  prim_field_data[off] = (byte)value;
-	}
+	currentPutField = new PutField ()
+	  {
+	    private byte[] prim_field_data =
+	      new byte[currentObjectStreamClass.primFieldSize];
+	    private Object[] objs =
+	      new Object[currentObjectStreamClass.objectFieldCount];
 
-	public void put (String name, double value)
-	{
-	  ObjectStreamField field = getField (name);
+	    public void put (String name, boolean value)
+	    {
+	      ObjectStreamField field
+		= currentObjectStreamClass.getField (name);
+	      checkType (field, 'Z');
+	      prim_field_data[field.getOffset ()] = (byte)(value ? 1 : 0);
+	    }
 
-	  checkType (field, 'D');
-	  int off = field.getOffset ();
-	  long l_value = Double.doubleToLongBits (value);
-	  prim_field_data[off++] = (byte)(l_value >>> 52);
-	  prim_field_data[off++] = (byte)(l_value >>> 48);
-	  prim_field_data[off++] = (byte)(l_value >>> 40);
-	  prim_field_data[off++] = (byte)(l_value >>> 32);
-	  prim_field_data[off++] = (byte)(l_value >>> 24);
-	  prim_field_data[off++] = (byte)(l_value >>> 16);
-	  prim_field_data[off++] = (byte)(l_value >>> 8);
-	  prim_field_data[off] = (byte)l_value;
-	}
+	    public void put (String name, byte value)
+	    {
+	      ObjectStreamField field
+		= currentObjectStreamClass.getField (name);
+	      checkType (field, 'B');
+	      prim_field_data[field.getOffset ()] = value;
+	    }
 
-	public void put (String name, float value)
-	{
-	  ObjectStreamField field = getField (name);
+	    public void put (String name, char value)
+	    {
+	      ObjectStreamField field
+		= currentObjectStreamClass.getField (name);
+	      checkType (field, 'C');
+	      int off = field.getOffset ();
+	      prim_field_data[off++] = (byte)(value >>> 8);
+	      prim_field_data[off] = (byte)value;
+	    }
 
-	  checkType (field, 'F');
-	  int off = field.getOffset ();
-	  int i_value = Float.floatToIntBits (value);
-	  prim_field_data[off++] = (byte)(i_value >>> 24);
-	  prim_field_data[off++] = (byte)(i_value >>> 16);
-	  prim_field_data[off++] = (byte)(i_value >>> 8);
-	  prim_field_data[off] = (byte)i_value;
-	}
+	    public void put (String name, double value)
+	    {
+	      ObjectStreamField field
+		= currentObjectStreamClass.getField (name);
+	      checkType (field, 'D');
+	      int off = field.getOffset ();
+	      long l_value = Double.doubleToLongBits (value);
+	      prim_field_data[off++] = (byte)(l_value >>> 52);
+	      prim_field_data[off++] = (byte)(l_value >>> 48);
+	      prim_field_data[off++] = (byte)(l_value >>> 40);
+	      prim_field_data[off++] = (byte)(l_value >>> 32);
+	      prim_field_data[off++] = (byte)(l_value >>> 24);
+	      prim_field_data[off++] = (byte)(l_value >>> 16);
+	      prim_field_data[off++] = (byte)(l_value >>> 8);
+	      prim_field_data[off] = (byte)l_value;
+	    }
 
-	public void put (String name, int value)
-	{
-	  ObjectStreamField field = getField (name);
-	  checkType (field, 'I');
-	  int off = field.getOffset ();
-	  prim_field_data[off++] = (byte)(value >>> 24);
-	  prim_field_data[off++] = (byte)(value >>> 16);
-	  prim_field_data[off++] = (byte)(value >>> 8);
-	  prim_field_data[off] = (byte)value;
-	}
+	    public void put (String name, float value)
+	    {
+	      ObjectStreamField field
+		= currentObjectStreamClass.getField (name);
+	      checkType (field, 'F');
+	      int off = field.getOffset ();
+	      int i_value = Float.floatToIntBits (value);
+	      prim_field_data[off++] = (byte)(i_value >>> 24);
+	      prim_field_data[off++] = (byte)(i_value >>> 16);
+	      prim_field_data[off++] = (byte)(i_value >>> 8);
+	      prim_field_data[off] = (byte)i_value;
+	    }
 
-	public void put (String name, long value)
-	{
-	  ObjectStreamField field = getField (name);
-	  checkType (field, 'J');
-	  int off = field.getOffset ();
-	  prim_field_data[off++] = (byte)(value >>> 52);
-	  prim_field_data[off++] = (byte)(value >>> 48);
-	  prim_field_data[off++] = (byte)(value >>> 40);
-	  prim_field_data[off++] = (byte)(value >>> 32);
-	  prim_field_data[off++] = (byte)(value >>> 24);
-	  prim_field_data[off++] = (byte)(value >>> 16);
-	  prim_field_data[off++] = (byte)(value >>> 8);
-	  prim_field_data[off] = (byte)value;
-	}
+	    public void put (String name, int value)
+	    {
+	      ObjectStreamField field
+		= currentObjectStreamClass.getField (name);
+	      checkType (field, 'I');
+	      int off = field.getOffset ();
+	      prim_field_data[off++] = (byte)(value >>> 24);
+	      prim_field_data[off++] = (byte)(value >>> 16);
+	      prim_field_data[off++] = (byte)(value >>> 8);
+	      prim_field_data[off] = (byte)value;
+	    }
 
-	public void put (String name, short value)
-	{
-	  ObjectStreamField field = getField (name);
-	  checkType (field, 'S');
-	  int off = field.getOffset ();
-	  prim_field_data[off++] = (byte)(value >>> 8);
-	  prim_field_data[off] = (byte)value;
-	}
+	    public void put (String name, long value)
+	    {
+	      ObjectStreamField field
+		= currentObjectStreamClass.getField (name);
+	      checkType (field, 'J');
+	      int off = field.getOffset ();
+	      prim_field_data[off++] = (byte)(value >>> 52);
+	      prim_field_data[off++] = (byte)(value >>> 48);
+	      prim_field_data[off++] = (byte)(value >>> 40);
+	      prim_field_data[off++] = (byte)(value >>> 32);
+	      prim_field_data[off++] = (byte)(value >>> 24);
+	      prim_field_data[off++] = (byte)(value >>> 16);
+	      prim_field_data[off++] = (byte)(value >>> 8);
+	      prim_field_data[off] = (byte)value;
+	    }
 
-	public void put (String name, Object value)
-	{
-	  ObjectStreamField field = getField (name);
+	    public void put (String name, short value)
+	    {
+	      ObjectStreamField field
+		= currentObjectStreamClass.getField (name);
+	      checkType (field, 'S');
+	      int off = field.getOffset ();
+	      prim_field_data[off++] = (byte)(value >>> 8);
+	      prim_field_data[off] = (byte)value;
+	    }
 
-	  if (value != null &&
-	      ! field.getType ().isAssignableFrom (value.getClass ()))
-	    throw new IllegalArgumentException ();
-	  objs[field.getOffset ()] = value;
-	}
+	    public void put (String name, Object value)
+	    {
+	      ObjectStreamField field
+		= currentObjectStreamClass.getField (name);
+	      if (field == null)
+		throw new IllegalArgumentException ();
+	      if (value != null &&
+		  ! field.getType ().isAssignableFrom (value.getClass ()))
+		throw new IllegalArgumentException ();
+	      objs[field.getOffset ()] = value;
+	    }
 
-	public void write (ObjectOutput out) throws IOException
-	{
-	  // Apparently Block data is not used with PutField as per
-	  // empirical evidence against JDK 1.2.  Also see Mauve test
-	  // java.io.ObjectInputOutput.Test.GetPutField.
-	  boolean oldmode = setBlockDataMode (false);
-	  out.write (prim_field_data);
-	  for (int i = 0; i < objs.length; ++ i)
-	    out.writeObject (objs[i]);
-	  setBlockDataMode (oldmode);
-	}
+	    public void write (ObjectOutput out) throws IOException
+	    {
+	      // Apparently Block data is not used with PutField as per
+	      // empirical evidence against JDK 1.2.  Also see Mauve test
+	      // java.io.ObjectInputOutput.Test.GetPutField.
+	      boolean oldmode = setBlockDataMode (false);
+	      out.write (prim_field_data);
+	      for (int i = 0; i < objs.length; ++ i)
+		out.writeObject (objs[i]);
+	      setBlockDataMode (oldmode);
+	    }
 
-	private void checkType (ObjectStreamField field, char type)
-	  throws IllegalArgumentException
-	{
-	  if (TypeSignature.getEncodingOfClass (field.getType ()).charAt (0)
-	      != type)
-	    throw new IllegalArgumentException ();
-	}
-      };
-    // end PutFieldImpl
+	    private void checkType (ObjectStreamField field, char type)
+	      throws IllegalArgumentException
+	    {
+	      if (TypeSignature.getEncodingOfClass(field.getType ()).charAt(0)
+		  != type)
+		throw new IllegalArgumentException ();
+	    }
+	  };
+      }
 
     return currentPutField;
   }
@@ -1025,7 +1013,11 @@
     if (currentPutField == null)
       throw new NotActiveException ("writeFields can only be called after putFields has been called");
 
+    // putFields may be called more than once, but not writeFields.
+    markFieldsWritten();
+
     currentPutField.write (this);
+    currentPutField = null;
   }
 
 
@@ -1214,7 +1206,6 @@
     throws IOException
   {
     Class klass = osc.forClass();
-    currentPutField = null;
     try
       {
 	Class classArgs[] = {ObjectOutputStream.class};
@@ -1260,18 +1251,10 @@
 	boolean b = f.getBoolean (obj);
 	return b;
       }
-    catch (IllegalArgumentException _)
-      {
-	throw new InvalidClassException("invalid requested type for field " + field_name + " in class " + klass.getName());
-      }
-    catch (IOException e)
-      {
-	throw e;
-      }
     catch (Exception _)
       {
-	throw new IOException ();
-      }
+	throw new IOException ("Unexpected Exception "+_);
+      }    
   }
 
   private byte getByteField (Object obj, Class klass, String field_name)
@@ -1283,17 +1266,9 @@
 	byte b = f.getByte (obj);
 	return b;
       }
-    catch (IllegalArgumentException _)
-      {
-	throw new InvalidClassException("invalid requested type for field " + field_name + " in class " + klass.getName());
-      }
-    catch (IOException e)
-      {
-	throw e;
-      }
     catch (Exception _)
       {
-	throw new IOException ();
+	throw new IOException ("Unexpected Exception "+_);
       }    
   }
 
@@ -1306,17 +1281,9 @@
 	char b = f.getChar (obj);
 	return b;
       }
-    catch (IllegalArgumentException _)
-      {
-	throw new InvalidClassException("invalid requested type for field " + field_name + " in class " + klass.getName());
-      }
-    catch (IOException e)
-      {
-	throw e;
-      }
     catch (Exception _)
       {
-	throw new IOException ();
+	throw new IOException ("Unexpected Exception "+_);
       }    
   }
 
@@ -1329,17 +1296,9 @@
 	double b = f.getDouble (obj);
 	return b;
       }
-    catch (IllegalArgumentException _)
-      {
-	throw new InvalidClassException("invalid requested type for field " + field_name + " in class " + klass.getName());
-      }
-    catch (IOException e)
-      {
-	throw e;
-      }
     catch (Exception _)
       {
-	throw new IOException ();
+	throw new IOException ("Unexpected Exception "+_);
       }    
   }
 
@@ -1352,17 +1311,9 @@
 	float b = f.getFloat (obj);
 	return b;
       }
-    catch (IllegalArgumentException _)
-      {
-	throw new InvalidClassException("invalid requested type for field " + field_name + " in class " + klass.getName());
-      }
-    catch (IOException e)
-      {
-	throw e;
-      }
     catch (Exception _)
       {
-	throw new IOException ();
+	throw new IOException ("Unexpected Exception "+_);
       }    
   }
 
@@ -1375,17 +1326,9 @@
 	int b = f.getInt (obj);
 	return b;
       }
-    catch (IllegalArgumentException _)
-      {
-	throw new InvalidClassException("invalid requested type for field " + field_name + " in class " + klass.getName());
-      }
-    catch (IOException e)
-      {
-	throw e;
-      }
     catch (Exception _)
       {
-	throw new IOException ();
+	throw new IOException ("Unexpected Exception "+_);
       }    
   }
 
@@ -1398,17 +1341,9 @@
 	long b = f.getLong (obj);
 	return b;
       }
-    catch (IllegalArgumentException _)
-      {
-	throw new InvalidClassException("invalid requested type for field " + field_name + " in class " + klass.getName());
-      }
-    catch (IOException e)
-      {
-	throw e;
-      }
     catch (Exception _)
       {
-	throw new IOException ();
+	throw new IOException ("Unexpected Exception "+_);
       }    
   }
 
@@ -1421,17 +1356,9 @@
 	short b = f.getShort (obj);
 	return b;
       }
-    catch (IllegalArgumentException _)
-      {
-	throw new InvalidClassException("invalid requested type for field " + field_name + " in class " + klass.getName());
-      }
-    catch (IOException e)
-      {
-       throw e;
-      }
     catch (Exception _)
       {
-	throw new IOException ();
+	throw new IOException ("Unexpected Exception "+_);
       }    
   }
 
@@ -1441,46 +1368,29 @@
     try
       {
 	Field f = getField (klass, field_name);
-	ObjectStreamField of = new ObjectStreamField(f.getName(), f.getType());
-
-	if (of.getTypeString() == null ||
-	    !of.getTypeString().equals(type_code))
-	  throw new InvalidClassException("invalid type code for " + field_name + " in class " + klass.getName());
-
 	Object o = f.get (obj);
 	// FIXME: We should check the type_code here
 	return o;
       }
-    catch (IOException e)
-      {
-	throw e;
-      }
-    catch (Exception e)
+    catch (Exception _)
       {
-	throw new IOException ();
+	throw new IOException ("Unexpected Exception "+_);
       }    
   }
 
   private static Field getField (Class klass, String name)
-    throws java.io.InvalidClassException
+    throws java.lang.NoSuchFieldException
   {
-    try
-      {
-	final Field f = klass.getDeclaredField(name);
-	AccessController.doPrivileged(new PrivilegedAction()
-	  {
-	    public Object run()
-	    {
-	      f.setAccessible(true);
-	      return null;
-	    }
-	  });
-	return f;
-      }
-    catch (java.lang.NoSuchFieldException e)
+    final Field f = klass.getDeclaredField(name);
+    AccessController.doPrivileged(new PrivilegedAction()
       {
-	throw new InvalidClassException ("no field called " + name + " in class " + klass.getName());
-      }
+	public Object run()
+	{
+	  f.setAccessible(true);
+	  return null;
+	}
+      });
+    return f;
   }
 
   private static Method getMethod (Class klass, String name, Class[] args)
