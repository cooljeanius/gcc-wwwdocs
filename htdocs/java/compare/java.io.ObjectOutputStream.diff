--- /home/tromey/gnu/egcs/classpath/classpath/java/io/ObjectOutputStream.java	Wed Sep 26 08:18:40 2001
+++ java/io/ObjectOutputStream.java	Sat Jan 27 12:55:12 2001
@@ -35,7 +35,6 @@
 
 import gnu.java.io.ObjectIdentityWrapper;
 import gnu.java.lang.reflect.TypeSignature;
-import gnu.classpath.Configuration;
 
 /**
    An <code>ObjectOutputStream</code> can be used to write objects
@@ -634,7 +633,7 @@
   /**
      @see java.io.DataOutputStream#write (byte[])
   */
-  public void write (byte b[]) throws IOException
+  public void write (byte[] b) throws IOException
   {
     write (b, 0, b.length);
   }
@@ -643,7 +642,7 @@
   /**
      @see java.io.DataOutputStream#write (byte[],int,int)
   */
-  public void write (byte b[], int off, int len) throws IOException
+  public void write (byte[] b, int off, int len) throws IOException
   {
     if (writeDataAsBlocks)
     {
@@ -1174,18 +1173,179 @@
   }
 
 
-  private native void callWriteMethod (Object obj);
-  private native boolean getBooleanField (Object obj, String field_name);
-  private native byte getByteField (Object obj, String field_name);
-  private native char getCharField (Object obj, String field_name);
-  private native double getDoubleField (Object obj, String field_name);
-  private native float getFloatField (Object obj, String field_name);
-  private native int getIntField (Object obj, String field_name);
-  private native long getLongField (Object obj, String field_name);
-  private native short getShortField (Object obj, String field_name);
-  private native Object getObjectField (Object obj, String field_name,
-					String type_code);
+  private void callWriteMethod (Object obj) throws IOException
+  {
+    Class klass = obj.getClass ();
+    try
+      {
+	Class classArgs[] = {ObjectOutputStream.class};
+	Method m = getMethod (klass, "writeObject", classArgs);
+	if (m == null)
+	  return;
+	Object args[] = {this};
+	m.invoke (obj, args);	
+      }
+    catch (InvocationTargetException x)
+      {
+        /* Rethrow if possible. */
+	Throwable exception = x.getTargetException();
+	if (exception instanceof RuntimeException)
+	  throw (RuntimeException) exception;
+	if (exception instanceof IOException)
+	  throw (IOException) exception;
+
+	throw new IOException ("Exception thrown from writeObject() on " +
+			       klass + ": " + exception.getClass().getName());
+      }
+    catch (Exception x)
+      {
+	throw new IOException ("Failure invoking writeObject() on " +
+			       klass + ": " + x.getClass().getName());
+      }
+  }
+
+  private boolean getBooleanField (Object obj, String field_name) throws IOException
+  {
+    try
+      {
+	Class klass = obj.getClass ();
+	Field f = getField (klass, field_name);
+	boolean b = f.getBoolean (obj);
+	return b;
+      }
+    catch (Exception _)
+      {
+	throw new IOException ();
+      }    
+  }
+
+  private byte getByteField (Object obj, String field_name) throws IOException
+  {
+    try
+      {
+	Class klass = obj.getClass ();
+	Field f = getField (klass, field_name);
+	byte b = f.getByte (obj);
+	return b;
+      }
+    catch (Exception _)
+      {
+	throw new IOException ();
+      }    
+  }
+
+  private char getCharField (Object obj, String field_name) throws IOException
+  {
+    try
+      {
+	Class klass = obj.getClass ();
+	Field f = getField (klass, field_name);
+	char b = f.getChar (obj);
+	return b;
+      }
+    catch (Exception _)
+      {
+	throw new IOException ();
+      }    
+  }
+
+  private double getDoubleField (Object obj, String field_name) throws IOException
+  {
+    try
+      {
+	Class klass = obj.getClass ();
+	Field f = getField (klass, field_name);
+	double b = f.getDouble (obj);
+	return b;
+      }
+    catch (Exception _)
+      {
+	throw new IOException ();
+      }    
+  }
+
+  private float getFloatField (Object obj, String field_name) throws IOException
+  {
+    try
+      {
+	Class klass = obj.getClass ();
+	Field f = getField (klass, field_name);
+	float b = f.getFloat (obj);
+	return b;
+      }
+    catch (Exception _)
+      {
+	throw new IOException ();
+      }    
+  }
+
+  private int getIntField (Object obj, String field_name) throws IOException
+  {
+    try
+      {
+	Class klass = obj.getClass ();
+	Field f = getField (klass, field_name);
+	int b = f.getInt (obj);
+	return b;
+      }
+    catch (Exception _)
+      {
+	throw new IOException ();
+      }    
+  }
+
+  private long getLongField (Object obj, String field_name) throws IOException
+  {
+    try
+      {
+	Class klass = obj.getClass ();
+	Field f = getField (klass, field_name);
+	long b = f.getLong (obj);
+	return b;
+      }
+    catch (Exception _)
+      {
+	throw new IOException ();
+      }    
+  }
+
+  private short getShortField (Object obj, String field_name) throws IOException
+  {
+    try
+      {
+	Class klass = obj.getClass ();
+	Field f = getField (klass, field_name);
+	short b = f.getShort (obj);
+	return b;
+      }
+    catch (Exception _)
+      {
+	throw new IOException ();
+      }    
+  }
+
+  private Object getObjectField (Object obj, String field_name,
+				 String type_code) throws IOException
+  {
+    try
+      {
+	Class klass = obj.getClass ();
+	Field f = getField (klass, field_name);
+	Object o = f.get (obj);
+	// FIXME: We should check the type_code here
+	return o;
+      }
+    catch (Exception _)
+      {
+	throw new IOException ();
+      }    
+  }
 
+  private static native Field getField (Class klass, String name)
+    throws java.lang.NoSuchFieldException;
+
+  private static native Method getMethod (Class klass, String name, Class[] args)
+    throws java.lang.NoSuchMethodException;
 
   // this value comes from 1.2 spec, but is used in 1.1 as well
   private final static int BUFFER_SIZE = 1024;
@@ -1208,13 +1368,4 @@
   private Hashtable OIDLookupTable;
   private int protocolVersion;
   private boolean useSubclassMethod;
-
-  static
-  {
-    if (Configuration.INIT_LOAD_LIBRARY)
-      {
-        System.loadLibrary ("javaio");
-      }
-  }
 }
-
