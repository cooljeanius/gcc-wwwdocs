--- /home/tromey/gnu/Nightly/classpath/classpath/javax/swing/colorchooser/DefaultColorSelectionModel.java	2003-07-02 02:19:17.000000000 -0600
+++ javax/swing/colorchooser/DefaultColorSelectionModel.java	2003-06-13 02:27:44.000000000 -0600
@@ -52,90 +52,90 @@
 public class DefaultColorSelectionModel 
   implements ColorSelectionModel, Serializable
 {
-  private static final long serialVersionUID = -8117143602864778804L;
+  static final long serialVersionUID = 580150227676302096L;
 
-  private Color selectedColor;
+	//-------------------------------------------------------------
+	// Variables --------------------------------------------------
+	//-------------------------------------------------------------
+
+	/**
+	 * changeEvent
+	 */
+	protected transient ChangeEvent changeEvent;
+
+	/**
+	 * listenerList
+	 */
+	protected EventListenerList listenerList;
+
+	/**
+	 * selectedColor
+	 */
+	private Color selectedColor;
+
+
+	//-------------------------------------------------------------
+	// Initialization ---------------------------------------------
+	//-------------------------------------------------------------
+
+	/**
+	 * Constructor DefaultColorSelectionModel
+	 */
+	public DefaultColorSelectionModel() {
+		// TODO
+	} // DefaultColorSelectionModel()
+
+	/**
+	 * Constructor DefaultColorSelectionModel
+	 * @param color TODO
+	 */
+	public DefaultColorSelectionModel(Color color) {
+		// TODO
+	} // DefaultColorSelectionModel()
+
+
+	//-------------------------------------------------------------
+	// Methods ----------------------------------------------------
+	//-------------------------------------------------------------
+
+	/**
+	 * getSelectedColor
+	 * @returns Color
+	 */
+	public Color getSelectedColor() {
+		return null; // TODO
+	} // getSelectedColor()
+
+	/**
+	 * setSelectedColor
+	 * @param color TODO
+	 */
+	public void setSelectedColor(Color color) {
+		// TODO
+	} // setSelectedColor()
+
+	/**
+	 * addChangeListener
+	 * @param listener TODO
+	 */
+	public void addChangeListener(ChangeListener listener) {
+		// TODO
+	} // addChangeListener()
+
+	/**
+	 * removeChangeListener
+	 * @param listener TODO
+	 */
+	public void removeChangeListener(ChangeListener listener) {
+		// TODO
+	} // removeChangeListener()
+
+	/**
+	 * fireStateChanged
+	 */
+	protected void fireStateChanged() {
+		// TODO
+	} // fireStateChanged()
 
-  protected transient ChangeEvent changeEvent = new ChangeEvent (this);
-  protected EventListenerList listenerList = new EventListenerList ();
 
-  /**
-   * Creates a new color selection model.
-   */
-  public DefaultColorSelectionModel()
-  {
-    this (Color.white);
-  }
-
-  /**
-   * Creates a new color selection model with a given selected color.
-   * 
-   * @param color The selected color.
-   */
-  public DefaultColorSelectionModel (Color color)
-  {
-    super();
-    this.selectedColor = color;
-  }
-
-  /**
-   * Returns the selected color.
-   * 
-   * @return The selected color.
-   */
-  public Color getSelectedColor()
-  {
-    return selectedColor;
-  }
-
-  /**
-   * @param color The color to set.
-   */
-  public void setSelectedColor (Color color)
-  {
-    this.selectedColor = color;
-  }
-
-  /**
-   * Adds a listener to this model.
-   * 
-   * @param listener The listener to add.
-   */
-  public void addChangeListener (ChangeListener listener)
-  {
-    listenerList.add (ChangeListener.class, listener);
-  }
-
-  /**
-   * Removes a listener from this model.
-   * 
-   * @param listener The listener to remove.
-   */
-  public void removeChangeListener (ChangeListener listener)
-  {
-    listenerList.remove (ChangeListener.class, listener);
-  }
-
-  /**
-   * Returns all currently added <code>ChangeListener</code> objects.
-   *
-   * @return Array of <code>ChangeListener</code> objects.
-   */
-  public ChangeListener[] getChangeListeners()
-  {
-    return (ChangeListener[]) listenerList.getListeners (ChangeListener.class);
-  }
-
-  /**
-   * Calls all the <code>stateChanged()</code> method of all added
-   * <code>ChangeListener</code> objects with <code>changeEvent</code>
-   * as argument.
-   */
-  protected void fireStateChanged()
-  {
-    ChangeListener[] listeners = getChangeListeners();
-
-    for (int i = 0; i < listeners.length; i++)
-      listeners [i].stateChanged (changeEvent);
-  }
-}
+} // DefaultColorSelectionModel
