--- /home/tromey/gnu/Nightly/classpath/classpath/javax/swing/undo/StateEdit.java	2003-11-15 02:20:02.000000000 -0700
+++ javax/swing/undo/StateEdit.java	2003-06-13 02:27:46.000000000 -0600
@@ -1,4 +1,4 @@
-/* StateEdit.java -- UndoableEdit for StateEditable implementations.
+/* StateEdit.java --
    Copyright (C) 2002, 2003 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
@@ -42,118 +42,59 @@
 import java.util.Iterator;
 
 /**
- * A helper class, making it easy to support undo and redo.
- *
- * <p>The following example shows how to use this class.
- *
- * <pre>  Foo foo; // class Foo implements {@link StateEditable}
- *  StateEdit edit;
- *
- *  edit = new StateEdit(foo, "Name Change");
- *  foo.setName("Jane Doe");
- *  edit.end();
- *  undoManager.addEdit(edit);</pre>
- *
- * <p>If <code>Foo</code>&#x2019;s implementation of {@link
- * StateEditable} considers the name as part of the editable state,
- * the user can now choose &#x201c;Undo Name Change&#x201d; or
- * &#x201c;Redo Name Change&#x201d; from the respective menu. No
- * further undo support is needed from the application.
- *
- * <p>The following explains what happens in the example.
- *
- * <p><ol><li>When a <code>StateEdit</code> is created, the associated
- * {@link StateEditable} gets asked to store its state into a hash
- * table, {@link #preState}.</li>
- *
- * <li>The application will now perform some changes to the edited
- * object.  This typically happens by invoking methods on the edited
- * object.</li>
- *
- * <li>The editing phase is terminated by invoking the {@link #end()}
- * method of the <code>StateEdit</code>. The <code>end()</code> method
- * does two things.
- *
- *   <ul><li>The edited object receives a second request for storing
- *   its state.  This time, it will use a different hash table, {@link
- *   #postState}.</li>
- *
- *   <li>To increase efficiency, the <code>StateEdit</code> now removes
- *   any entries from {@link #preState} and {@link #postState} that have
- *   the same key, and whose values are equal. Equality is determined
- *   by invoking the <code>equals</code> method inherited from
- *   {@link java.lang.Object}.</li></ul></li>
- *
- * <li>When the user later chooses to undo the <code>StateEdit</code>,
- * the edited object is asked to {@linkplain StateEditable#restoreState
- * restore its state} from the {@link #preState} table.  Similarly,
- * when the user chooses to <i>redo</i> the <code>StateEdit</code>,
- * the edited object gets asked to restore its state from the {@link
- * #postState}.</li></ol>
- *
- * @author Andrew Selkirk (aselkirk@sympatico.ca)
- * @author Sascha Brawer (brawer@dandelis.ch)
+ * StateEdit
+ * @author	Andrew Selkirk
  */
-public class StateEdit
-  extends AbstractUndoableEdit
+public class StateEdit extends AbstractUndoableEdit
 {
+
+  //-------------------------------------------------------------
+  // Variables --------------------------------------------------
+  //-------------------------------------------------------------
+
   /**
-   * The ID of the Java source file in Sun&#x2019;s Revision Control
-   * System (RCS).  This certainly should not be part of the API
-   * specification. But in order to be API-compatible with
-   * Sun&#x2019;s reference implementation, GNU Classpath also has to
-   * provide this field. However, we do not try to match its value.
+   * RCSID
    */
-  protected static final String RCSID = "";
-
+  protected static final String RCSID = ""; // TODO
 
   /**
-   * The object which is being edited by this <code>StateEdit</code>.
+   * object
    */
   protected StateEditable object;
 
-
   /**
-   * The state of <code>object</code> at the time of constructing
-   * this <code>StateEdit</code>.
+   * preState
    */
   protected Hashtable preState;
 
-
   /**
-   * The state of <code>object</code> at the time when {@link #end()}
-   * was called.
+   * postState
    */
   protected Hashtable postState;
 
-
   /**
-   * A human-readable name for this edit action.
+   * undoRedoName
    */
   protected String undoRedoName;
 
 
+  //-------------------------------------------------------------
+  // Initialization ---------------------------------------------
+  //-------------------------------------------------------------
+
   /**
-   * Constructs a <code>StateEdit</code>, specifying the object whose
-   * state is being edited.
-   *
-   * @param obj the object whose state is being edited by this
-   * <code>StateEdit</code>.
+   * Constructor StateEdit
+   * @param obj Object to edit
    */
   public StateEdit(StateEditable obj)
   {
     init(obj, null);
   }
 
-
   /**
-   * Constructs a <code>StateEdit</code>, specifying the object whose
-   * state is being edited.
-   *
-   * @param obj the object whose state is being edited by this
-   * <code>StateEdit</code>.
-   *
-   * @param name the human-readable name of the editing action.
+   * Constructor StateEdit
+   * @param obj Object to edit
+   * @param name Presentation name
    */
   public StateEdit(StateEditable obj, String name)
   {
@@ -161,13 +102,14 @@
   }
 
 
+  //-------------------------------------------------------------
+  // Methods ----------------------------------------------------
+  //-------------------------------------------------------------
+
   /**
-   * Initializes this <code>StateEdit</code>. The edited object will
-   * be asked to store its current state into {@link #preState}.
-   *
-   * @param obj the object being edited.
-   *
-   * @param name the human-readable name of the editing action.
+   * Initialize this object.
+   * @param obj Object to edit
+   * @param name Presentation name
    */
   protected void init(StateEditable obj, String name)
   {
@@ -178,12 +120,9 @@
     obj.storeState(preState);
   }
 
-
   /**
-   * Informs this <code>StateEdit</code> that all edits are finished.
-   * The edited object will be asked to store its state into {@link
-   * #postState}, and any redundant entries will get removed from
-   * {@link #preState} and {@link #postState}.
+   * Indicate that all edits are finished, and update this object
+   * with final state.
    */
   public void end()
   {
@@ -191,56 +130,33 @@
     removeRedundantState();
   }
 
-
   /**
-   * Undoes this edit operation. The edited object will be asked to
-   * {@linkplain StateEditable#restoreState restore its state} from
-   * {@link #preState}.
-   *
-   * @throws CannotUndoException if {@link #canUndo()} returns
-   * <code>false</code>, for example because this action has already
-   * been undone.
+   * Undo this edit by applying the initial state to the edited object.
    */
   public void undo()
   {
-    super.undo();
     object.restoreState(preState);
   }
 
-
   /**
-   * Redoes this edit operation. The edited object will be asked to
-   * {@linkplain StateEditable#restoreState restore its state} from
-   * {@link #postState}.
-   *
-   * @throws CannotRedoException if {@link #canRedo()} returns
-   * <code>false</code>, for example because this action has not yet
-   * been undone.
+   * Undo this edit by applying the final state to the edited object.
    */
   public void redo()
   {
-    super.redo();
     object.restoreState(postState);
   }
 
-
   /**
-   * Returns a human-readable, localized name that describes this
-   * editing action and can be displayed to the user.
-   *
-   * @returns the name, or <code>null</code> if no presentation
-   * name is available.
+   * Return the presentation name of this object.
+   * @returns The name, or null if not set
    */
   public String getPresentationName()
   {
     return undoRedoName;
   }
 
-
   /**
-   * Removes all redundant entries from the pre- and post-edit state
-   * hash tables. An entry is considered redundant if it is present
-   * both before and after the edit, and if the two values are equal.
+   * removeRedundantState
    */
   protected void removeRedundantState()
   {
