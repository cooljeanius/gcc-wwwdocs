--- /home/tromey/gnu/classpath/classpath/java/util/HashMap.java	Tue May  7 11:02:06 2002
+++ java/util/HashMap.java	Tue Jan 22 16:01:41 2002
@@ -1,6 +1,6 @@
 /* HashMap.java -- a class providing a basic hashtable data structure,
    mapping Object --> Object
-   Copyright (C) 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.
+   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -162,7 +162,7 @@
    *
    * @author Eric Blake <ebb9@email.byu.edu>
    */
-  static class HashEntry extends AbstractMap.BasicMapEntry
+  static class HashEntry extends BasicMapEntry
   {
     /**
      * The next entry in the linked list. Package visible for use by subclass.
@@ -373,9 +373,9 @@
       {
         Map.Entry e = (Map.Entry) itr.next();
         // Optimize in case the Entry is one of our own.
-        if (e instanceof AbstractMap.BasicMapEntry)
+        if (e instanceof BasicMapEntry)
           {
-            AbstractMap.BasicMapEntry entry = (AbstractMap.BasicMapEntry) e;
+            BasicMapEntry entry = (BasicMapEntry) e;
             put(entry.key, entry.value);
           }
         else
@@ -647,8 +647,7 @@
    * @return the matching entry, if found, or null
    * @see #entrySet()
    */
-  // Package visible, for use in nested classes.
-  HashEntry getEntry(Object o)
+  private HashEntry getEntry(Object o)
   {
     if (!(o instanceof Map.Entry))
       return null;
@@ -711,13 +710,14 @@
   }
 
   /**
-   * Increases the size of the HashMap and rehashes all keys to new
-   * array indices; this is called when the addition of a new value
-   * would cause size() &gt; threshold. Note that the existing Entry
-   * objects are reused in the new hash table.
+   * Increases the size of the HashMap and rehashes all keys to new array
+   * indices; this is called when the addition of a new value would cause
+   * size() > threshold. Note that the existing Entry objects are reused in
+   * the new hash table.
+   * <p>
    *
-   * <p>This is not specified, but the new size is twice the current size
-   * plus one; this number is not always prime, unfortunately.
+   * This is not specified, but the new size is twice the current size plus
+   * one; this number is not always prime, unfortunately.
    */
   private void rehash()
   {
