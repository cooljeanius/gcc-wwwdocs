--- /home/tromey/gnu/Nightly/classpath/classpath/gnu/java/nio/FileChannelImpl.java	2003-04-07 02:24:15.000000000 -0600
+++ gnu/java/nio/FileChannelImpl.java	2003-05-02 02:20:04.000000000 -0600
@@ -52,7 +52,7 @@
 import java.nio.channels.NonWritableChannelException;
 import java.nio.channels.ReadableByteChannel;
 import java.nio.channels.WritableByteChannel;
-import gnu.classpath.RawData;
+import gnu.gcj.RawData;
 
 /**
  * This file is not user visible !
@@ -64,6 +64,8 @@
 
 public class FileChannelImpl extends FileChannel
 {
+  // GCJ LOCAL: This variable stores a pointer to the memory
+  // where the file is mapped.
   RawData map_address;
   
   int length;
@@ -84,7 +86,7 @@
 
   public FileChannelImpl ()
   {
-    this (new FileDescriptor (), true, null);
+    this (new FileDescriptor (-1), true, null);
   }
 
   private native long implPosition ();
@@ -124,19 +126,15 @@
 
   public int read (ByteBuffer dst) throws IOException
   {
-    int s = (int)size();
-
-    if (buf == null)
+    // Check if file is mapped into memory.
+    if (buf != null)
       {
-        throw new EOFException("file not mapped");
+	// FIXME: implement this
+        throw new Error ("Accessing mapped buffers not implemented.");
       }
 
-    for (int i = 0; i < s; i++)
-      {
-        dst.put (buf.get());
-      }
-
-    return s;
+    // File not mapped, access it directly.
+    return implRead (dst);
   }
 
   public int read (ByteBuffer dst, long position)
@@ -147,11 +145,33 @@
 
     if (!isOpen ())
       throw new ClosedChannelException ();
+   
+    if (file_obj instanceof FileOutputStream)
+      throw new NonReadableChannelException ();
+
+    int result;
+    long oldPosition;
+
+    oldPosition = implPosition ();
+    result = implRead (dst);
+    implPosition (oldPosition);
     
-    // FIXME: check for NonReadableChannelException
+    return result;
+  }
 
-    throw new Error ("Not implemented");
+  private int implRead (ByteBuffer dst) throws IOException
+  {
+    int result;
+    byte[] buffer = new byte [dst.remaining ()];
+    
+    result = implRead (buffer, 0, buffer.length);
+    dst.put (buffer, 0, result);
+
+    return result;
   }
+  
+  private native int implRead (byte[] buffer, int offset, int length)
+    throws IOException;
 
   public long read (ByteBuffer[] dsts, int offset, int length)
     throws IOException
@@ -160,7 +180,7 @@
 
     for (int i = offset; i < offset + length; i++)
       {
-        result += write (dsts [i]);
+        result += read (dsts [i]);
       }
 
     return result;
@@ -168,20 +188,15 @@
 
   public int write (ByteBuffer src) throws IOException
   {
-    int w = 0;
-
-    if (buf == null)
+    // Check if file is mapped into memory.
+    if (buf != null)
       {
-        throw new EOFException ("file not mapped");
+	// FIXME: implement this
+        throw new Error ("Accessing mapped buffers not implemented.");
       }
-
-    while (src.hasRemaining ())
-      {
-        buf.put (src.get ());
-        w++;
-      }
-
-    return w;
+    
+    // File not mapped, access it directly.
+    return implWrite (src);
   }
     
   public int write (ByteBuffer src, long position)
@@ -193,10 +208,29 @@
     if (!isOpen ())
       throw new ClosedChannelException ();
     
-    // FIXME: check for NonWritableChannelException
+    if (file_obj instanceof FileInputStream)
+       throw new NonWritableChannelException ();
 
-    throw new Error ("Not implemented");
+    int result;
+    long oldPosition;
+
+    oldPosition = implPosition ();
+    result = implWrite (src);
+    implPosition (oldPosition);
+    
+    return result;
   }
+
+  private int implWrite (ByteBuffer src) throws IOException
+  {
+    byte[] buffer = new byte [src.remaining ()];
+    
+    src.get (buffer, 0, buffer.length);
+    return implWrite (buffer, 0, buffer.length);
+  }
+  
+  private native int implWrite (byte[] buffer, int offset, int length)
+    throws IOException;
   
   public long write(ByteBuffer[] srcs, int offset, int length)
     throws IOException
@@ -215,12 +249,20 @@
                                long size)
     throws IOException
   {
-//     int cmode = mode.m;
-//     address = nio_mmap_file (fd, position, size, cmode);
-//     length = size;
-//     buf = new MappedByteFileBuffer (this);
-//     return buf;
-    return null;
+    if ((mode != MapMode.READ_ONLY
+         && mode != MapMode.READ_WRITE
+         && mode != MapMode.PRIVATE)
+        || position < 0
+        || size < 0
+        || size > Integer.MAX_VALUE)
+      throw new IllegalArgumentException ();
+    
+    // FIXME: Make this working.
+    int cmode = mode.m;
+    map_address = nio_mmap_file (position, size, cmode);
+    length = (int) size;
+    buf = new MappedByteFileBuffer (this);
+    return buf;
   }
 
   static MappedByteBuffer create_direct_mapped_buffer (RawData map_address,
@@ -263,10 +305,13 @@
     if (!isOpen ())
       throw new ClosedChannelException ();
 
-    // FIXME: check for NonReadableChannelException
-    // FIXME: check for NonWritableChannelException
-    
-    throw new Error ("Not implemented");
+    if (file_obj instanceof FileOutputStream)
+       throw new NonReadableChannelException ();
+   
+    // XXX: count needs to be casted from long to int. Dataloss ?
+    ByteBuffer buffer = ByteBuffer.allocate ((int) count);
+    read (buffer, position);
+    return target.write (buffer);
   }
 
   public long transferFrom (ReadableByteChannel src, long position, long count)
@@ -279,10 +324,13 @@
     if (!isOpen ())
       throw new ClosedChannelException ();
 
-    // FIXME: check for NonReadableChannelException
-    // FIXME: check for NonWritableChannelException
-    
-    throw new Error ("Not implemented");
+    if (file_obj instanceof FileInputStream)
+       throw new NonWritableChannelException ();
+
+    // XXX: count needs to be casted from long to int. Dataloss ?
+    ByteBuffer buffer = ByteBuffer.allocate ((int) count);
+    src.read (buffer);
+    return write (buffer, position);
   }
 
   public FileLock lock (long position, long size, boolean shared)
@@ -295,9 +343,14 @@
     if (!isOpen ())
       throw new ClosedChannelException ();
 
-    // FIXME: check for NonReadableChannelException
-    // FIXME: check for NonWritableChannelException
-    
+    if (shared &&
+        file_obj instanceof FileOutputStream)
+      throw new NonReadableChannelException ();
+	
+    if (!shared &&
+        file_obj instanceof FileInputStream)
+      throw new NonWritableChannelException ();
+	
     throw new Error ("Not implemented");
   }
   
@@ -344,7 +397,8 @@
     if (!isOpen ())
       throw new ClosedChannelException ();
 
-    // FIXME: check for NonWritableChannelException
+    if (file_obj instanceof FileInputStream)
+       throw new NonWritableChannelException ();
 
     return implTruncate (size);
   }
