--- /home/tromey/gnu/classpath/classpath/gnu/java/nio/FileChannelImpl.java	Fri Dec 20 08:34:17 2002
+++ gnu/java/nio/FileChannelImpl.java	Thu Feb 13 08:56:22 2003
@@ -44,8 +44,11 @@
 import java.io.RandomAccessFile;
 import java.nio.ByteBuffer;
 import java.nio.MappedByteBuffer;
+import java.nio.channels.ClosedChannelException;
 import java.nio.channels.FileChannel;
 import java.nio.channels.FileLock;
+import java.nio.channels.NonReadableChannelException;
+import java.nio.channels.NonWritableChannelException;
 import java.nio.channels.ReadableByteChannel;
 import java.nio.channels.WritableByteChannel;
 
@@ -69,7 +72,7 @@
    * This method came from java.io.RandomAccessFile
    * It is private there so we will repeat it here.
    */
-  private native long	lengthInternal (int native_fd) throws IOException;
+  private native long lengthInternal (int native_fd) throws IOException;
 
   public FileChannelImpl (int fd, Object obj)
   {
@@ -79,39 +82,42 @@
 
   public long size () throws IOException
   {
+    if (!isOpen ())
+      throw new ClosedChannelException ();
+
     return lengthInternal (fd);
   }
     
-  protected void implCloseChannel()  throws IOException
+  protected void implCloseChannel() throws IOException
   {
     if (address != 0)
-	    {
+      {
         nio_unmmap_file (fd, address, (int) length);
-	    }
+        address = 0;
+      }
 
     // FIXME
     fd = 0;
 
     if (file_obj instanceof RandomAccessFile)
-	    {
+      {
         RandomAccessFile o = (RandomAccessFile) file_obj;
         o.close();
-	    }
+      }
     else if (file_obj instanceof FileInputStream)
-	    {
+      {
         FileInputStream o = (FileInputStream) file_obj;
         o.close();
-	    }
+      }
     else if (file_obj instanceof FileOutputStream)
-	    {
+      {
         FileOutputStream o = (FileOutputStream) file_obj;
         o.close();
-	    }
+      }
   }
 
   public int read (ByteBuffer dst) throws IOException
   {
-    int w = 0;
     int s = (int)size();
 
     if (buf == null)
@@ -127,6 +133,20 @@
     return s;
   }
 
+  public int read (ByteBuffer dst, long position)
+    throws IOException
+  {
+    if (position < 0)
+      throw new IllegalArgumentException ();
+
+    if (!isOpen ())
+      throw new ClosedChannelException ();
+    
+    // FIXME: check for NonReadableChannelException
+
+    throw new Error ("Not implemented");
+  }
+
   public long read (ByteBuffer[] dsts, int offset, int length)
     throws IOException
   {
@@ -140,11 +160,6 @@
     return result;
   }
 
-  public int read (ByteBuffer src, long position) throws IOException
-  {
-    return 0;
-  }
-				   
   public int write (ByteBuffer src) throws IOException
   {
     int w = 0;
@@ -163,6 +178,20 @@
     return w;
   }
     
+  public int write (ByteBuffer src, long position)
+    throws IOException
+  {
+    if (position < 0)
+      throw new IllegalArgumentException ();
+
+    if (!isOpen ())
+      throw new ClosedChannelException ();
+    
+    // FIXME: check for NonWritableChannelException
+
+    throw new Error ("Not implemented");
+  }
+  
   public long write(ByteBuffer[] srcs, int offset, int length)
     throws IOException
   {
@@ -172,18 +201,22 @@
 	    {
         res += write (srcs[i]);
 	    }
-	return res;
-    }
-
-  public int write (ByteBuffer src, long position) throws IOException
-  {
-    return 0;
+    
+    return res;
   }
 				   
   public MappedByteBuffer map (FileChannel.MapMode mode, long position,
                                long size)
     throws IOException
   {
+    if ((mode != MapMode.READ_ONLY
+         && mode != MapMode.READ_WRITE
+         && mode != MapMode.PRIVATE)
+        || position < 0
+        || size < 0
+        || size > Integer.MAX_VALUE)
+      throw new IllegalArgumentException ();
+    
 //     int cmode = mode.m;
 //     address = nio_mmap_file (fd, position, size, cmode);
 //     length = size;
@@ -195,11 +228,12 @@
   static MappedByteBuffer create_direct_mapped_buffer (long address,
                                                        long length)
   {
-    FileChannelImpl ch = new FileChannelImpl (-1, null);
-    ch.address = address;
-    ch.length = (int) length;
-    ch.buf = new MappedByteFileBuffer (ch);
-    return ch.buf;			 
+//     FileChannelImpl ch = new FileChannelImpl (-1, null);
+//     ch.address = address;
+//     ch.length = (int) length;
+//     ch.buf = new MappedByteFileBuffer (ch);
+//     return ch.buf;			 
+    return null;
   }
 
   public long write (ByteBuffer[] srcs)
@@ -211,51 +245,113 @@
   /**
    * msync with the disk
    */
-  public void force (boolean metaData)
+  public void force (boolean metaData) throws IOException
   {
+    if (!isOpen ())
+      throw new ClosedChannelException ();
+
+    // FIXME: What to do with metaData ?
+    
     nio_msync (fd, address, length);
   }
 
-  static native long nio_mmap_file (int fd, long pos, int size, int mode);
-
-  static native void nio_unmmap_file (int fd, long address, int size);
+  public long transferTo (long position, long count, WritableByteChannel target)
+    throws IOException
+  {
+    if (position < 0
+        || count < 0)
+      throw new IllegalArgumentException ();
 
-  static native void nio_msync (int fd, long address, int length);
+    if (!isOpen ())
+      throw new ClosedChannelException ();
 
-  public FileLock lock (long position, long size, boolean shared) throws IOException
-  {
-    return null;
+    // FIXME: check for NonReadableChannelException
+    // FIXME: check for NonWritableChannelException
+    
+    throw new Error ("Not implemented");
   }
 
-  public FileLock tryLock (long position, long size, boolean shared) throws IOException
+  public long transferFrom (ReadableByteChannel src, long position, long count)
+    throws IOException
   {
-    return null;
-  }
+    if (position < 0
+        || count < 0)
+      throw new IllegalArgumentException ();
 
-  public long position () throws IOException
-  {
-    return 0;
+    if (!isOpen ())
+      throw new ClosedChannelException ();
+
+    // FIXME: check for NonReadableChannelException
+    // FIXME: check for NonWritableChannelException
+    
+    throw new Error ("Not implemented");
   }
 
-  public FileChannel position (long newPosition) throws IOException
+  public FileLock lock (long position, long size, boolean shared)
+    throws IOException
   {
-    return this;
-  }
+    if (position < 0
+        || size < 0)
+      throw new IllegalArgumentException ();
 
-  public long transferTo (long position, long count, WritableByteChannel target)
+    if (!isOpen ())
+      throw new ClosedChannelException ();
+
+    // FIXME: check for NonReadableChannelException
+    // FIXME: check for NonWritableChannelException
+    
+    throw new Error ("Not implemented");
+  }
+  
+  public FileLock tryLock (long position, long size, boolean shared)
     throws IOException
   {
-    return 0;
+    if (position < 0
+        || size < 0)
+      throw new IllegalArgumentException ();
+
+    if (!isOpen ())
+      throw new ClosedChannelException ();
+
+    throw new Error ("Not implemented");
   }
 
-  public long transferFrom (ReadableByteChannel src, long position, long count)
+  public long position ()
     throws IOException
   {
-    return 0;
+    if (!isOpen ())
+      throw new ClosedChannelException ();
+
+    throw new Error ("not implemented");
   }
+  
+  public FileChannel position (long newPosition)
+    throws IOException
+  {
+    if (newPosition < 0)
+      throw new IllegalArgumentException ();
+
+    if (!isOpen ())
+      throw new ClosedChannelException ();
 
-  public FileChannel truncate (long size) throws IOException
+    throw new Error ("not implemented");
+  }
+  
+  public FileChannel truncate (long size)
+    throws IOException
   {
-    return null;
+    if (size < 0)
+      throw new IllegalArgumentException ();
+
+    if (!isOpen ())
+      throw new ClosedChannelException ();
+
+    // FIXME: check for NonWritableChannelException
+
+    throw new Error ("not implemented");
   }
+  
+  private static native long nio_mmap_file (int fd, long pos, int size, int mode);
+  private static native void nio_unmmap_file (int fd, long address, int size);
+  private static native void nio_msync (int fd, long address, int length);
 }
