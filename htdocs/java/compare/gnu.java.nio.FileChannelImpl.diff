--- /home/tromey/gnu/Nightly/classpath/classpath/gnu/java/nio/FileChannelImpl.java	Fri Dec 20 08:34:17 2002
+++ gnu/java/nio/FileChannelImpl.java	Mon Mar  3 02:17:48 2003
@@ -38,14 +38,18 @@
 package gnu.java.nio;
 
 import java.io.EOFException;
+import java.io.FileDescriptor;
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.RandomAccessFile;
 import java.nio.ByteBuffer;
 import java.nio.MappedByteBuffer;
+import java.nio.channels.ClosedChannelException;
 import java.nio.channels.FileChannel;
 import java.nio.channels.FileLock;
+import java.nio.channels.NonReadableChannelException;
+import java.nio.channels.NonWritableChannelException;
 import java.nio.channels.ReadableByteChannel;
 import java.nio.channels.WritableByteChannel;
 
@@ -61,72 +65,89 @@
 {
   public long address;
   public int length;
-  public int fd;
+  public FileDescriptor fd;
   public MappedByteBuffer buf;
   public Object file_obj; // just to keep it live...
 
-  /**
-   * This method came from java.io.RandomAccessFile
-   * It is private there so we will repeat it here.
-   */
-  private native long	lengthInternal (int native_fd) throws IOException;
-
-  public FileChannelImpl (int fd, Object obj)
+  public FileChannelImpl (FileDescriptor fd, boolean write, Object obj)
   {
+    if (!(obj instanceof RandomAccessFile)
+        && !(obj instanceof FileInputStream)
+        && !(obj instanceof FileOutputStream))
+      throw new InternalError ();
+
     this.fd = fd;
     this.file_obj = obj;
   }
 
-  public long size () throws IOException
-  {
-    return lengthInternal (fd);
-  }
+  private native long implPosition ();
+  private native FileChannel implPosition (long newPosition);
+  private native FileChannel implTruncate (long size);
+  
+  private native long nio_mmap_file (long pos, long size, int mode);
+  private native void nio_unmmap_file (long address, int size);
+  private native void nio_msync (long address, int length);
+
+  public native long size () throws IOException;
     
-  protected void implCloseChannel()  throws IOException
+  protected void implCloseChannel() throws IOException
   {
-    if (address != 0)
-	    {
-        nio_unmmap_file (fd, address, (int) length);
-	    }
-
     // FIXME
-    fd = 0;
+    
+    if (address != 0)
+      {
+        //nio_unmmap_file (fd, address, (int) length);
+        address = 0;
+      }
 
     if (file_obj instanceof RandomAccessFile)
-	    {
+      {
         RandomAccessFile o = (RandomAccessFile) file_obj;
         o.close();
-	    }
+      }
     else if (file_obj instanceof FileInputStream)
-	    {
+      {
         FileInputStream o = (FileInputStream) file_obj;
         o.close();
-	    }
+      }
     else if (file_obj instanceof FileOutputStream)
-	    {
+      {
         FileOutputStream o = (FileOutputStream) file_obj;
         o.close();
-	    }
+      }
   }
 
   public int read (ByteBuffer dst) throws IOException
   {
-    int w = 0;
     int s = (int)size();
 
     if (buf == null)
-	    {
+      {
         throw new EOFException("file not mapped");
-	    }
+      }
 
     for (int i=0; i<s; i++)
-	    {
+      {
         dst.put( buf.get() );
-	    }
+      }
 
     return s;
   }
 
+  public int read (ByteBuffer dst, long position)
+    throws IOException
+  {
+    if (position < 0)
+      throw new IllegalArgumentException ();
+
+    if (!isOpen ())
+      throw new ClosedChannelException ();
+    
+    // FIXME: check for NonReadableChannelException
+
+    throw new Error ("Not implemented");
+  }
+
   public long read (ByteBuffer[] dsts, int offset, int length)
     throws IOException
   {
@@ -140,50 +161,63 @@
     return result;
   }
 
-  public int read (ByteBuffer src, long position) throws IOException
-  {
-    return 0;
-  }
-				   
   public int write (ByteBuffer src) throws IOException
   {
     int w = 0;
 
     if (buf == null)
-	    {
+      {
         throw new EOFException ("file not mapped");
-	    }
+      }
 
     while (src.hasRemaining ())
-	    {
+      {
         buf.put (src.get ());
         w++;
-	    }
+      }
 
     return w;
   }
     
-  public long write(ByteBuffer[] srcs, int offset, int length)
+  public int write (ByteBuffer src, long position)
     throws IOException
   {
-    long res = 0;
+    if (position < 0)
+      throw new IllegalArgumentException ();
 
-    for (int i = offset;i < offset + length;i++)
-	    {
-        res += write (srcs[i]);
-	    }
-	return res;
-    }
+    if (!isOpen ())
+      throw new ClosedChannelException ();
+    
+    // FIXME: check for NonWritableChannelException
 
-  public int write (ByteBuffer src, long position) throws IOException
+    throw new Error ("Not implemented");
+  }
+  
+  public long write(ByteBuffer[] srcs, int offset, int length)
+    throws IOException
   {
-    return 0;
+    long result = 0;
+
+    for (int i = offset;i < offset + length;i++)
+      {
+        result += write (srcs[i]);
+      }
+    
+    return result;
   }
 				   
   public MappedByteBuffer map (FileChannel.MapMode mode, long position,
                                long size)
     throws IOException
   {
+    if ((mode != MapMode.READ_ONLY
+         && mode != MapMode.READ_WRITE
+         && mode != MapMode.PRIVATE)
+        || position < 0
+        || size < 0
+        || size > Integer.MAX_VALUE)
+      throw new IllegalArgumentException ();
+    
 //     int cmode = mode.m;
 //     address = nio_mmap_file (fd, position, size, cmode);
 //     length = size;
@@ -195,11 +229,12 @@
   static MappedByteBuffer create_direct_mapped_buffer (long address,
                                                        long length)
   {
-    FileChannelImpl ch = new FileChannelImpl (-1, null);
-    ch.address = address;
-    ch.length = (int) length;
-    ch.buf = new MappedByteFileBuffer (ch);
-    return ch.buf;			 
+//     FileChannelImpl ch = new FileChannelImpl (-1, null);
+//     ch.address = address;
+//     ch.length = (int) length;
+//     ch.buf = new MappedByteFileBuffer (ch);
+//     return ch.buf;			 
+    return null;
   }
 
   public long write (ByteBuffer[] srcs)
@@ -211,51 +246,109 @@
   /**
    * msync with the disk
    */
-  public void force (boolean metaData)
+  public void force (boolean metaData) throws IOException
   {
-    nio_msync (fd, address, length);
-  }
+    if (!isOpen ())
+      throw new ClosedChannelException ();
 
-  static native long nio_mmap_file (int fd, long pos, int size, int mode);
+    // FIXME: What to do with metaData ?
+    
+    nio_msync (address, length);
+  }
 
-  static native void nio_unmmap_file (int fd, long address, int size);
+  public long transferTo (long position, long count, WritableByteChannel target)
+    throws IOException
+  {
+    if (position < 0
+        || count < 0)
+      throw new IllegalArgumentException ();
 
-  static native void nio_msync (int fd, long address, int length);
+    if (!isOpen ())
+      throw new ClosedChannelException ();
 
-  public FileLock lock (long position, long size, boolean shared) throws IOException
-  {
-    return null;
+    // FIXME: check for NonReadableChannelException
+    // FIXME: check for NonWritableChannelException
+    
+    throw new Error ("Not implemented");
   }
 
-  public FileLock tryLock (long position, long size, boolean shared) throws IOException
+  public long transferFrom (ReadableByteChannel src, long position, long count)
+    throws IOException
   {
-    return null;
-  }
+    if (position < 0
+        || count < 0)
+      throw new IllegalArgumentException ();
 
-  public long position () throws IOException
-  {
-    return 0;
+    if (!isOpen ())
+      throw new ClosedChannelException ();
+
+    // FIXME: check for NonReadableChannelException
+    // FIXME: check for NonWritableChannelException
+    
+    throw new Error ("Not implemented");
   }
 
-  public FileChannel position (long newPosition) throws IOException
+  public FileLock lock (long position, long size, boolean shared)
+    throws IOException
   {
-    return this;
-  }
+    if (position < 0
+        || size < 0)
+      throw new IllegalArgumentException ();
 
-  public long transferTo (long position, long count, WritableByteChannel target)
+    if (!isOpen ())
+      throw new ClosedChannelException ();
+
+    // FIXME: check for NonReadableChannelException
+    // FIXME: check for NonWritableChannelException
+    
+    throw new Error ("Not implemented");
+  }
+  
+  public FileLock tryLock (long position, long size, boolean shared)
     throws IOException
   {
-    return 0;
+    if (position < 0
+        || size < 0)
+      throw new IllegalArgumentException ();
+
+    if (!isOpen ())
+      throw new ClosedChannelException ();
+
+    throw new Error ("Not implemented");
   }
 
-  public long transferFrom (ReadableByteChannel src, long position, long count)
+  public long position ()
     throws IOException
   {
-    return 0;
+    if (!isOpen ())
+      throw new ClosedChannelException ();
+
+    return implPosition ();
   }
+  
+  public FileChannel position (long newPosition)
+    throws IOException
+  {
+    if (newPosition < 0)
+      throw new IllegalArgumentException ();
+
+    if (!isOpen ())
+      throw new ClosedChannelException ();
 
-  public FileChannel truncate (long size) throws IOException
+    return implPosition (newPosition);
+  }
+  
+  public FileChannel truncate (long size)
+    throws IOException
   {
-    return null;
+    if (size < 0)
+      throw new IllegalArgumentException ();
+
+    if (!isOpen ())
+      throw new ClosedChannelException ();
+
+    // FIXME: check for NonWritableChannelException
+
+    return implTruncate (size);
   }
 }
