--- /home/tromey/gnu/classpath/classpath/java/lang/Package.java	Mon Sep 16 15:09:23 2002
+++ java/lang/Package.java	Tue Jan 22 15:40:16 2002
@@ -1,5 +1,5 @@
-/* Package.java -- information about a package
-   Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.
+/* java.lang.Package - Everything you ever wanted to know about a package.
+   Copyright (C) 2000, 2001 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -49,8 +49,8 @@
  * section of the
  * <a href="http://java.sun.com/products/jdk/1.3/docs/guide/versioning/spec/VersioningSpecification.html">Product Versioning Specification</a>.
  * It also allows packages to be sealed with respect to the originating URL.
- *
- * <p>The most useful method is the <code>isCompatibleWith()</code> method that
+ * <p>
+ * The most useful method is the <code>isCompatibleWith()</code> method that
  * compares a desired version of a specification with the version of the
  * specification as implemented by a package. A package is considered
  * compatible with another version if the version of the specification is
@@ -63,11 +63,8 @@
  * then the other version, etc. (If a version has no minor, micro, etc numbers
  * then they are considered the be 0.)
  *
- * @author Mark Wielaard <mark@klomp.org>
- * @see ClassLoader#definePackage(String, String, String, String, String,
- *      String, String, URL)
  * @since 1.2
- * @status updated to 1.4
+ * @author Mark Wielaard (mark@klomp.org)
  */
 public class Package
 {
@@ -76,39 +73,36 @@
 
   /** The name if the implementation */
   final private String implTitle;
-
   /** The vendor that wrote this implementation */
   final private String implVendor;
-
   /** The version of this implementation */
   final private String implVersion;
 
   /** The name of the specification */
   final private String specTitle;
-
   /** The name of the specification designer */
   final private String specVendor;
-
   /** The version of this specification */
   final private String specVersion;
 
   /** If sealed the origin of the package classes, otherwise null */
   final private URL sealed;
 
-  /**
-   * A package local constructor for the Package class. All parameters except
-   * the <code>name</code> of the package may be <code>null</code>.
-   * There are no public constructors defined for Package; this is a package
+  /** 
+   * A package local constructor for the Package class.
+   * All parameters except the <code>name</code> of the package may be
+   * <code>null</code>.
+   * There are no public constructors defined for Package this is a package
    * local constructor that is used by java.lang.Classloader.definePackage().
-   *
-   * @param name the name of the Package
-   * @param specTitle the name of the specification
-   * @param specVendor the name of the specification designer
-   * @param specVersion the version of this specification
-   * @param implTitle the name of the implementation
-   * @param implVendor the vendor that wrote this implementation
-   * @param implVersion the version of this implementation
-   * @param sealed if sealed the origin of the package classes
+   * 
+   * @param name The name of the Package
+   * @param specTitle The name of the specification
+   * @param specVendor The name of the specification designer
+   * @param specVersion The version of this specification
+   * @param implTitle The name of the implementation
+   * @param implVendor The vendor that wrote this implementation
+   * @param implVersion The version of this implementation
+   * @param sealed If sealed the origin of the package classes
    */
   Package(String name,
 	  String specTitle, String specVendor, String specVersion,
@@ -116,103 +110,89 @@
   {
     if (name == null)
       throw new IllegalArgumentException("null Package name");
+
     this.name = name;
+
     this.implTitle = implTitle;
     this.implVendor = implVendor;
     this.implVersion = implVersion;
+
     this.specTitle = specTitle;
     this.specVendor = specVendor;
     this.specVersion = specVersion;
+
     this.sealed = sealed;
   }
 
-  /**
-   * Returns the Package name in dot-notation.
-   *
-   * @return the non-null package name
+  /** 
+   * Returns the Package name.
    */
   public String getName()
   {
     return name;
   }
 
-  /**
-   * Returns the name of the specification, or null if unknown.
-   *
-   * @return the specification title
+  /** 
+   * Returns the name of the implementation or null if unknown.
    */
-  public String getSpecificationTitle()
+  public String getImplementationTitle()
   {
-    return specTitle;
+    return implTitle;
   }
 
-  /**
-   * Returns the version of the specification, or null if unknown.
-   *
-   * @return the specification version
+  /** 
+   * Returns the vendor that wrote this implementation or null if unknown.
    */
-  public String getSpecificationVersion()
+  public String getImplementationVendor()
   {
-    return specVersion;
+    return implVendor;
   }
 
-  /**
-   * Returns the name of the specification designer, or null if unknown.
-   *
-   * @return the specification vendor
+  /** 
+   * Returns the version of this implementation or null if unknown.
    */
-  public String getSpecificationVendor()
+  public String getImplementationVersion()
   {
-    return specVendor;
+    return implVersion;
   }
 
-  /**
-   * Returns the name of the implementation, or null if unknown.
-   *
-   * @return the implementation title
+  /** 
+   * Returns the name of the specification or null if unknown.
    */
-  public String getImplementationTitle()
+  public String getSpecificationTitle()
   {
-    return implTitle;
+    return specTitle;
   }
 
-  /**
-   * Returns the version of this implementation, or null if unknown.
-   *
-   * @return the implementation version
+  /** 
+   * Returns the name of the specification designer or null if unknown.
    */
-  public String getImplementationVersion()
+  public String getSpecificationVendor()
   {
-    return implVersion;
+    return specVendor;
   }
 
-  /**
-   * Returns the vendor that wrote this implementation, or null if unknown.
-   *
-   * @return the implementation vendor
+  /** 
+   * Returns the version of the specification or null if unknown.
    */
-  public String getImplementationVendor()
+  public String getSpecificationVersion()
   {
-    return implVendor;
+    return specVersion;
   }
 
-  /**
+  /** 
    * Returns true if this Package is sealed.
-   *
-   * @return true if the package is sealed
    */
   public boolean isSealed()
   {
-    return sealed != null;
+    return (sealed != null);
   }
 
-  /**
+  /** 
    * Returns true if this Package is sealed and the origin of the classes is
    * the given URL.
-   *
-   * @param url the URL to test
-   * @return true if the package is sealed by this URL
-   * @throws NullPointerException if url is null
+   * 
+   * @param url 
    */
   public boolean isSealed(URL url)
   {
@@ -221,36 +201,36 @@
 
   /**
    * Checks if the version of the specification is higher or at least as high
-   * as the desired version. Comparison is done by sequentially comparing
-   * dotted decimal numbers from the parameter and from
-   * <code>getSpecificationVersion</code>.
-   *
+   * as the desired version.
    * @param version the (minimal) desired version of the specification
-   * @throws NumberFormatException if either version string is invalid
-   * @throws NullPointerException if either version string is null
+   * @exception NumberFormatException when either version or the
+   * specification version is not a correctly formatted version number
+   * @exception NullPointerException if the supplied version or the
+   * Package specification version is null.
    */
-  public boolean isCompatibleWith(String version)
+  public boolean isCompatibleWith(String version) throws NumberFormatException
   {
     StringTokenizer versionTokens = new StringTokenizer(version, ".");
     StringTokenizer specTokens = new StringTokenizer(specVersion, ".");
     try
       {
-        while (versionTokens.hasMoreElements())
-          {
-            int vers = Integer.parseInt(versionTokens.nextToken());
-            int spec = Integer.parseInt(specTokens.nextToken());
-            if (spec < vers)
-              return false;
-            else if (spec > vers)
-              return true;
-            // They must be equal, next Token please!
-          }
+	while (versionTokens.hasMoreElements())
+	  {
+	    int vers = Integer.parseInt(versionTokens.nextToken());
+	    int spec = Integer.parseInt(specTokens.nextToken());
+	    if (spec < vers)
+	      return false;
+	    else if (spec > vers)
+	      return true;
+	    // They must be equal, next Token please!
+	  }
       }
     catch (NoSuchElementException e)
       {
-        // This must have been thrown by spec.nextToken() so return false.
-        return false;
+	// this must have been thrown by spec.netToken() so return false
+	return false;
       }
+
     // They must have been exactly the same version.
     // Or the specVersion has more subversions. That is also good.
     return true;
@@ -261,56 +241,58 @@
    * It may return null if the package is unknown, when there is no
    * information on that particular package available or when the callers
    * classloader is null.
-   *
    * @param name the name of the desired package
-   * @return the package by that name in the current ClassLoader
    */
   public static Package getPackage(String name)
   {
     // Get the caller's classloader
-    Class c = VMSecurityManager.getClassContext()[1];
+    SecurityManager sm = System.getSecurityManager();
+    Class c = sm.getClassContext()[1];
     ClassLoader cl = c.getClassLoader();
-    return cl != null ? cl.getPackage(name) : null;
+
+    if (cl != null)
+      return cl.getPackage(name);
+    else
+      return null;
   }
 
   /**
    * Returns all the packages that are known to the callers class loader.
    * It may return an empty array if the classloader of the caller is null.
-   *
-   * @return an array of all known packages
    */
   public static Package[] getPackages()
   {
     // Get the caller's classloader
-    Class c = VMSecurityManager.getClassContext()[1];
+    SecurityManager sm = System.getSecurityManager();
+    Class c = sm.getClassContext()[1];
     ClassLoader cl = c.getClassLoader();
-    // Sun's implementation returns the packages loaded by the bootstrap
-    // classloader if cl is null, but right now our bootstrap classloader
-    // does not create any Packages.
-    return cl != null ? cl.getPackages() : new Package[0];
+
+    if (cl != null)
+      return cl.getPackages();
+    else
+      return new Package[0];
   }
 
-  /**
+  /** 
    * Returns the hashCode of the name of this package.
-   *
-   * @return the hash code
    */
   public int hashCode()
   {
     return name.hashCode();
   }
 
-  /**
-   * Returns a string representation of this package. It is specified to
-   * be <code>"package " + getName() + (getSpecificationTitle() == null
-   * ? "" : ", " + getSpecificationTitle()) + (getSpecificationVersion()
-   * == null ? "" : ", version " + getSpecificationVersion())</code>.
-   *
-   * @return the string representation of the package
+  /** 
+   * Returns a string representation of this package name, specification,
+   * implementation and class origin if sealed.
    */
   public String toString()
   {
-    return "package " + name + (specTitle == null ? "" : ", " + specTitle)
-      + (specVersion == null ? "" : ", version " + specVersion);
+    return "package: " + name +
+	   " spec: " + specTitle +
+	   " version: " + specVersion +
+	   " vendor: " + specVendor +
+	   " implementation: " + implTitle +
+	   " version: " + implVersion +
+	   " vendor: " + implVendor + " sealed: " + sealed;
   }
-} // class Package
+}
