--- /home/tromey/gnu/classpath/classpath/java/awt/AWTEvent.java	Mon May  6 10:39:58 2002
+++ java/awt/AWTEvent.java	Tue Jan 22 16:01:31 2002
@@ -1,5 +1,4 @@
-/* AWTEvent.java -- the root event in AWT
-   Copyright (C) 1999, 2000, 2002 Free Software Foundation
+/* Copyright (C) 1999, 2000, 2002  Free Software Foundation
 
 This file is part of GNU Classpath.
 
@@ -38,169 +37,123 @@
 
 package java.awt;
 
-import java.util.EventObject;
+/* Written using on-line Java 2 Platform Standard Edition v1.3 API 
+ * Specification, as well as "The Java Class Libraries", 2nd edition 
+ * (Addison-Wesley, 1998).
+ * Status:  Believed complete and correct, except for the java.awt.Event 
+ * compatibility constructor.
+ */
 
 /**
  * AWTEvent is the root event class for all AWT events in the JDK 1.1 event 
- * model. It supersedes the Event class from JDK 1.0. Subclasses outside of
- * the java.awt package should have IDs greater than RESERVED_ID_MAX.
- *
- * <p>Event masks defined here are used by components in
- * <code>enableEvents</code> to select event types not selected by registered
- * listeners. Event masks are appropriately set when registering on
- * components.
- *
+ * model. It supersedes the Event class from JDK 1.0.
  * @author Warren Levy  <warrenl@cygnus.com>
- * @author Aaron M. Renn <arenn@urbanophile.com>
- * @since 1.1
- * @status updated to 1.4
+ * @author Aaron M. Renn (arenn@urbanophile.com)
  */
-public abstract class AWTEvent extends EventObject
+public abstract class AWTEvent extends java.util.EventObject
 {
   /**
-   * Compatible with JDK 1.1+.
+   * @serial Indicates whether or not this event has been consumed.
    */
-  private static final long serialVersionUID = -1825314779160409405L;
+  protected boolean consumed;
 
   /**
-   * The ID of the event.
-   *
-   * @see #getID()
-   * @see #AWTEvent(Object, int)
-   * @serial the identifier number of this event
+   * @serial The identifier number of this event.
    */
   protected int id;
 
   /**
-   * Indicates if the event has been consumed. False mean it is passed to
-   * the peer, true means it has already been processed. Semantic events
-   * generated by low-level events always have the value true.
-   *
-   * @see #consume()
-   * @see #isConsumed()
-   * @serial whether the event has been consumed
-   */
-  protected boolean consumed;
+  * Mask for selecting component events.
+  */
+  public static final long COMPONENT_EVENT_MASK = 0x001;
 
   /**
-   * Who knows? It's in the serial version.
-   *
-   * @serial No idea what this is for.
-   */
-  byte[] bdata;
-
-  /** Mask for selecting component events. */
-  public static final long COMPONENT_EVENT_MASK = 0x00001;
-
-  /** Mask for selecting container events. */
-  public static final long CONTAINER_EVENT_MASK = 0x00002;
-
-  /** Mask for selecting component focus events. */
-  public static final long FOCUS_EVENT_MASK = 0x00004;
-
-  /** Mask for selecting keyboard events. */
-  public static final long KEY_EVENT_MASK = 0x00008;
-
-  /** Mask for mouse button events. */
-  public static final long MOUSE_EVENT_MASK = 0x00010;
-
-  /** Mask for mouse motion events. */
-  public static final long MOUSE_MOTION_EVENT_MASK = 0x00020;
-
-  /** Mask for window events. */
-  public static final long WINDOW_EVENT_MASK = 0x00040;
-
-  /** Mask for action events. */
-  public static final long ACTION_EVENT_MASK = 0x00080;
-
-  /** Mask for adjustment events. */
-  public static final long ADJUSTMENT_EVENT_MASK = 0x00100;
-
-  /** Mask for item events. */
-  public static final long ITEM_EVENT_MASK = 0x00200;
-
-  /** Mask for text events. */
-  public static final long TEXT_EVENT_MASK = 0x00400;
+  * Mask for selecting container events.
+  */
+  public static final long CONTAINER_EVENT_MASK = 0x002;
 
   /**
-   * Mask for input method events.
-   * @since 1.3
-   */
-  public static final long INPUT_METHOD_EVENT_MASK = 0x00800;
+  * Mask for selecting component focus events.
+  */
+  public static final long FOCUS_EVENT_MASK = 0x004;
 
   /**
-   * Mask if input methods are enabled. Package visible only.
-   */
-  static final long INPUT_ENABLED_EVENT_MASK = 0x01000;
+  * Mask for selecting keyboard events.
+  */
+  public static final long KEY_EVENT_MASK = 0x008;
 
   /**
-   * Mask for paint events.
-   * @since 1.3
-   */
-  public static final long PAINT_EVENT_MASK = 0x02000;
+  * Mask for mouse button events.
+  */
+  public static final long MOUSE_EVENT_MASK = 0x010;
 
   /**
-   * Mask for invocation events.
-   * @since 1.3
-   */
-  public static final long INVOCATION_EVENT_MASK = 0x04000;
+  * Mask for mouse motion events.
+  */
+  public static final long MOUSE_MOTION_EVENT_MASK = 0x020;
 
   /**
-   * Mask for hierarchy events.
-   * @since 1.3
-   */
-  public static final long HIERARCHY_EVENT_MASK = 0x08000;
+  * Mask for window events.
+  */
+  public static final long WINDOW_EVENT_MASK = 0x040;
 
   /**
-   * Mask for hierarchy bounds events.
-   * @since 1.3
-   */
-  public static final long HIERARCHY_BOUNDS_EVENT_MASK = 0x10000;
+  * Mask for action events.
+  */
+  public static final long ACTION_EVENT_MASK = 0x080;
 
   /**
-   * Mask for mouse wheel events.
-   * @since 1.4
-   */
-  public static final long MOUSE_WHEEL_EVENT_MASK = 0x20000;
+  * Mask for adjustment events.
+  */
+  public static final long ADJUSTMENT_EVENT_MASK = 0x100;
 
   /**
-   * Mask for window state events.
-   * @since 1.4
-   */
-  public static final long WINDOW_STATE_EVENT_MASK = 0x40000;
+  * Mask for item events.
+  */
+  public static final long ITEM_EVENT_MASK = 0x200;
 
   /**
-   * Mask for window focus events.
-   * @since 1.4
-   */
-  public static final long WINDOW_FOCUS_EVENT_MASK = 0x80000;
+  * Mask for text events.
+  */
+  public static final long TEXT_EVENT_MASK = 0x400;
 
   /**
   * This is the highest number for event ids that are reserved for use by
-  * the AWT system itself. Subclasses outside of java.awt should use higher
-  * ids.
+  * the AWT system itself.
   */
   public static final int RESERVED_ID_MAX = 1999;
 
-
+  public static final long INPUT_METHOD_EVENT_MASK = 1 << 11;
+
+  /* Additional event selection masks from JDK 1.3 javadocs */
+  public static final long PAINT_EVENT_MASK            = 1 << 13,
+			   INVOCATION_EVENT_MASK       = 1 << 14,
+			   HIERARCHY_EVENT_MASK        = 1 << 15,
+			   HIERARCHY_BOUNDS_EVENT_MASK = 1 << 16;
+
   /**
-   * Initializes a new AWTEvent from the old Java 1.0 event object.
+   * Initializes a new instance of <code>AWTEvent</code> from the
+   * specified Java 1.0 event object.
+   *
+   * @param event The Java 1.0 event to initialize from.
+   *
+   *
+   * Removed this method because we no longer support Java 1.0
    *
-   * @param event the old-style event
-   * @throws NullPointerException if event is null
    */
   public AWTEvent(Event event)
   {
-    this(event.target, event.id);
-    consumed = event.consumed;
+    // FIXME??
+    super(event.target);
+    this.id = event.id;
   }
 
   /**
-   * Create an event on the specified source object and id.
+   * Initializes a new instance of <code>AWTEvent</code> with the specified
+   * source and id.
    *
-   * @param source the object that caused the event
-   * @param id the event id
-   * @throws IllegalArgumentException if source is null
+   * @param source The object that caused the event.
+   * @param id The event id.
    */
   public AWTEvent(Object source, int id)
   {
@@ -209,21 +162,9 @@
   }
 
   /**
-   * Retarget the event, such as converting a heavyweight component to a
-   * lightweight child of the original. This is not for general use, but
-   * is for event targeting systems like KeyboardFocusManager.
+   * Returns the id number of this event.
    *
-   * @param source the new source
-   */
-  public void setSource(Object source)
-  {
-    this.source = source;
-  }
-
-  /**
-   * Returns the event type id.
-   *
-   * @return the id number of this event
+   * @return The id number of this event.
    */
   public int getID()
   {
@@ -231,26 +172,23 @@
   }
 
   /**
-   * Returns a string representation of this event. This is in the format
-   * <code>getClass().getName() + '[' + paramString() + "] on "
-   * + source</code>.
+   * Returns a string representation of this event.
    *
-   * @return a string representation of this event
+   * @return A string representation of this event.
    */
-  public String toString()
+  public String paramString ()
   {
-    return getClass().getName() + "[" + paramString() + "] on " + source;
+    return "";
   }
 
   /**
-   * Returns a string representation of the state of this event. It may be
-   * empty, but must not be null; it is implementation defined.
+   * Returns a string representation of this event.
    *
-   * @return a string representation of this event
+   * @return A string representation of this event.
    */
-  public String paramString()
+  public String toString ()
   {
-    return "";
+    return getClass().getName() + "[" + paramString() + "] on " + source;
   }
 
   /**
@@ -263,13 +201,14 @@
   }
 
   /**
-   * Tests whether not not this event has been consumed. A consumed event
+   * Tests whether not not this event has been consumed.  A consumed event
    * is not processed in the default manner.
    *
-   * @return true if this event has been consumed
+   * @return <code>true</code> if this event has been consumed, 
+   * <code>false</code> otherwise.
    */
   protected boolean isConsumed()
   {
     return consumed;
   }
-} // class AWTEvent
+}
