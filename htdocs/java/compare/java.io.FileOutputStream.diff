--- /home/tromey/gnu/Nightly/classpath/classpath/java/io/FileOutputStream.java	Sun Mar 23 02:18:38 2003
+++ java/io/FileOutputStream.java	Sun Mar 23 02:18:02 2003
@@ -1,5 +1,5 @@
 /* FileOutputStream.java -- Writes to a file on disk.
-   Copyright (C) 1998, 2001, 2003 Free Software Foundation, Inc.
+   Copyright (C) 1998, 1999, 2001, 2003 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -38,277 +38,128 @@
 
 package java.io;
 
-import gnu.classpath.Configuration;
 import java.nio.channels.FileChannel;
 import gnu.java.nio.FileChannelImpl;
 
 /**
-  * This classes allows a stream of data to be written to a disk file or
-  * any open <code>FileDescriptor</code>.
-  *
-  * @author Aaron M. Renn (arenn@urbanophile.com)
-  */
+ * @author Tom Tromey <tromey@cygnus.com>
+ * @date September 24, 1998 
+ */
+
+/* Written using "Java Class Libraries", 2nd edition, ISBN 0-201-31002-3
+ * "The Java Language Specification", ISBN 0-201-63451-1
+ * Status:  Complete to version 1.1.
+ */
+
 public class FileOutputStream extends OutputStream
 {
-
-  /*
-   * Instance Variables
-   */
-
-  private FileDescriptor fd;
-
-  /*************************************************************************/
-
-  /*
-   * Constructors
-   */
-
-  /**
-    * This method initializes a <code>FileOutputStream</code> object to write
-    * to the named file.  The file is created if it does not exist, and
-    * the bytes written are written starting at the beginning of the file.
-    * <p>
-    * Before opening a file, a security check is performed by calling the
-    * <code>checkWrite</code> method of the <code>SecurityManager</code> (if
-    * one exists) with the name of the file to be opened.  An exception is
-    * thrown if writing is not allowed. 
-    *
-    * @param name The name of the file this stream should write to
-    *
-    * @exception SecurityException If write access to the file is not allowed
-    * @exception FileNotFoundException If a non-security error occurs
-    */
-  public
-  FileOutputStream(String name) throws SecurityException, FileNotFoundException
+  public FileOutputStream (String path, boolean append)
+    throws SecurityException, FileNotFoundException
   {
-    this(name, false);
+    SecurityManager s = System.getSecurityManager();
+    if (s != null)
+      s.checkWrite(path);
+    fd = new FileDescriptor (path, (append
+				    ? FileDescriptor.APPEND
+				    : FileDescriptor.WRITE));
   }
 
-  /*************************************************************************/
-
-  /**
-    * This method initializes a <code>FileOutputStream</code> object to write
-    * to the specified <code>File</code> object.  The file is created if it 
-    * does not exist, and the bytes written are written starting at the 
-    * beginning of the file.
-    * <p>
-    * Before opening a file, a security check is performed by calling the
-    * <code>checkWrite</code> method of the <code>SecurityManager</code> (if
-    * one exists) with the name of the file to be opened.  An exception is
-    * thrown if writing is not allowed. 
-    *
-    * @param file The <code>File</code> object this stream should write to
-    *
-    * @exception SecurityException If write access to the file is not allowed
-    * @exception FileNotFoundException If a non-security error occurs
-    */
-  public
-  FileOutputStream(File file) throws SecurityException, FileNotFoundException
+  public FileOutputStream (String path)
+    throws SecurityException, FileNotFoundException
   {
-    this(file.getPath(), false);
+    this (path, false);
   }
 
-  /*************************************************************************/
+  public FileOutputStream (File file)
+    throws SecurityException, FileNotFoundException
+  {
+    this (file.getPath(), false);
+  }
 
   /**
-    * This method initializes a <code>FileOutputStream</code> object to write
-    * to the specified <code>File</code> object.  The file is created if it 
-    * does not exist, and the bytes written are written starting at the 
-    * beginning of the file if the <code>append</code> parameter is 
-    * <code>false</code>.  Otherwise bytes are written at the end of the
-    * file.
-    * <p>
-    * Before opening a file, a security check is performed by calling the
-    * <code>checkWrite</code> method of the <code>SecurityManager</code> (if
-    * one exists) with the name of the file to be opened.  An exception is
-    * thrown if writing is not allowed. 
-    *
-    * @param file The <code>File</code> object this stream should write to
-    * @param append <code>true</code> to append bytes to the end of the file,
-    * or <code>false</code> to write bytes to the beginning
-    *
-    * @exception SecurityException If write access to the file is not allowed
-    * @exception FileNotFoundException If a non-security error occurs
-    */
+   * This method initializes a <code>FileOutputStream</code> object to write
+   * to the specified <code>File</code> object.  The file is created if it 
+   * does not exist, and the bytes written are written starting at the 
+   * beginning of the file if the <code>append</code> parameter is 
+   * <code>false</code>.  Otherwise bytes are written at the end of the
+   * file.
+   * <p>
+   * Before opening a file, a security check is performed by calling the
+   * <code>checkWrite</code> method of the <code>SecurityManager</code> (if
+   * one exists) with the name of the file to be opened.  An exception is
+   * thrown if writing is not allowed. 
+   *
+   * @param file The <code>File</code> object this stream should write to
+   * @param append <code>true</code> to append bytes to the end of the file,
+   * or <code>false</code> to write bytes to the beginning
+   *
+   * @exception SecurityException If write access to the file is not allowed
+   * @exception FileNotFoundException If a non-security error occurs
+   */
   public
   FileOutputStream(File file, boolean append) throws FileNotFoundException
   {
     this(file.getPath(), append);
   }
 
-  /*************************************************************************/
-
-  /**
-    * This method initializes a <code>FileOutputStream</code> object to write
-    * to the named file.  The file is created if it does not exist, and
-    * the bytes written are written starting at the beginning of the file if
-    * the <code>append</code> argument is <code>false</code> or at the end
-    * of the file if the <code>append</code> argument is true.
-    * <p>
-    * Before opening a file, a security check is performed by calling the
-    * <code>checkWrite</code> method of the <code>SecurityManager</code> (if
-    * one exists) with the name of the file to be opened.  An exception is
-    * thrown if writing is not allowed. 
-    *
-    * @param name The name of the file this stream should write to
-    * @param append <code>true</code> to append bytes to the end of the file,
-    * or <code>false</code> to write bytes to the beginning
-    *
-    * @exception SecurityException If write access to the file is not allowed
-    * @exception FileNotFoundException If a non-security error occurs
-    */
-  public FileOutputStream(String name, boolean append) 
-    throws SecurityException, FileNotFoundException
+  public FileOutputStream (FileDescriptor fdObj)
+    throws SecurityException
   {
-    SecurityManager sm = System.getSecurityManager();
-    if (sm != null)
-      sm.checkWrite(name);
-
-    fd = new FileDescriptor();
-
-    try 
-      {
-        if (append)
-          fd.open(name, "a");
-        else
-          fd.open(name, "w");
-      }
-    catch(IOException e)
-      {
-        throw new FileNotFoundException(name + ": " + e.getMessage());
-      }
+    SecurityManager s = System.getSecurityManager();
+    if (s != null)
+      s.checkWrite(fdObj);
+    fd = fdObj;
   }
 
-  /*************************************************************************/
-
-  /**
-    * This method initializes a <code>FileOutputStream</code> object to write
-    * to the file represented by the specified <code>FileDescriptor</code>
-    * object.  This method does not create any underlying disk file or
-    * reposition the file pointer of the given descriptor.  It assumes that
-    * this descriptor is ready for writing as is.
-    * <p>
-    * Before opening a file, a security check is performed by calling the
-    * <code>checkWrite</code> method of the <code>SecurityManager</code> (if
-    * one exists) with the specified <code>FileDescriptor</code> as an argument.
-    * An exception is thrown if writing is not allowed. 
-    *
-    * @param file The <code>FileDescriptor</code> this stream should write to
-    *
-    * @exception SecurityException If write access to the file is not allowed
-    */
-  public FileOutputStream(FileDescriptor fd) throws SecurityException
-  {
-    // Hmm, no other exception but this one to throw, but if the descriptor
-    // isn't valid, we surely don't have "permission" to write to it.
-    if (!fd.valid())
-      throw new SecurityException("Invalid FileDescriptor");
-
-    SecurityManager sm = System.getSecurityManager();
-    if (sm != null)
-      sm.checkWrite(fd);
-
-    this.fd = fd;
+  protected void finalize () throws IOException
+  {
+    // We don't actually need this, but we include it because it is
+    // mentioned in the JCL.
   }
 
-  /*************************************************************************/
-
-  /**
-    * This method returns a <code>FileDescriptor</code> object representing
-    * the file that is currently being written to
-    *
-    * @return A <code>FileDescriptor</code> object for this stream
-    *
-    * @exception IOException If an error occurs
-    */
-  public final FileDescriptor getFD() throws IOException
+  public final FileDescriptor getFD () throws IOException
   {
-    return(fd);
+    if (! fd.valid())
+      throw new IOException ();
+    return fd;
   }
 
-  /*************************************************************************/
-
-  /**
-    * This method writes a single byte of data to the file.  
-    *
-    * @param b The byte of data to write, passed as an <code>int</code>
-    *
-    * @exception IOException If an error occurs
-    */
-  public void write(int b) throws IOException
+  public void write (int b) throws IOException
   {
-    fd.write(b);
+    fd.write (b);
   }
 
-  /*************************************************************************/
-
-  /**
-    * This method writes all the bytes in the specified array to the
-    * file.
-    *
-    * @param buf The array of bytes to write to the file
-    *
-    * @exception IOException If an error occurs
-    */
-  public void write(byte[] buf) throws IOException
+  public void write (byte[] b) throws IOException, NullPointerException
   {
-    write(buf, 0, buf.length);
+    fd.write (b, 0, b.length);
   }
 
-  /*************************************************************************/
-
-  /**
-    * This method writes <code>len</code> bytes from the byte array 
-    * <code>buf</code> to the file starting at index <code>offset</code>.
-    *
-    * @param buf The array of bytes to write to the file
-    * @param offset The offset into the array to start writing bytes from
-    * @param len The number of bytes to write to the file
-    *
-    * @exception IOException If an error occurs
-    */
-  public void write(byte[] buf, int offset, int len) throws IOException
+  public void write (byte[] b, int off, int len)
+    throws IOException, NullPointerException, IndexOutOfBoundsException
   {
-    fd.write(buf, offset, len);
+    if (off < 0 || len < 0 || off + len > b.length)
+      throw new ArrayIndexOutOfBoundsException ();
+    fd.write (b, off, len);
   }
 
-  /*************************************************************************/
-
-  /**
-    * This method closes the underlying file.  Any further attempts to
-    * write to this stream will likely generate an exception since the
-    * file is closed.
-    *
-    * @exception IOException If an error occurs
-    */
-  public void close() throws IOException
+  public void close () throws IOException
   {
-    fd.close();
+    if (fd.valid())
+      fd.close();
   }
 
-  /*************************************************************************/
-
-  /**
-   *  This method creates a java.nio.channels.FileChannel.
-   * Nio does not allow one to create a file channel directly.
-   * A file channel must be created by first creating an instance of
-   * Input/Output/RandomAccessFile and invoking the getChannel() method on it.
-   */
-
-  private FileChannel ch; /* cached associated file-channel */
-
-  public FileChannel 
-  getChannel() 
+  public FileChannel getChannel ()
   {
-      synchronized (this) 
-  	{
-            // FIXME:  Convert NIO to 64 bit
-  	    if (ch == null)
-  		ch = new gnu.java.nio.FileChannelImpl(
-                    (int)(fd.getNativeFd() & 0xFFFF), this);
-  	}
-      return ch;
-  }
+    synchronized (this)
+      {
+        if (ch == null)
+          ch = new FileChannelImpl (fd, true, this);
 
-} // class FileOutputStream
+        return ch;
+      }
+  }
 
+  // Instance variables.
+  private FileDescriptor fd;
+  private FileChannel ch;
+}
