--- /home/tromey/gnu/Nightly/classpath/classpath/java/io/ObjectStreamField.java	2004-05-18 02:42:48.000000000 -0600
+++ java/io/ObjectStreamField.java	2004-02-29 02:18:20.000000000 -0700
@@ -1,5 +1,5 @@
 /* ObjectStreamField.java -- Class used to store name and class of fields
-   Copyright (C) 1998, 1999, 2003, 2004  Free Software Foundation, Inc.
+   Copyright (C) 1998, 1999, 2003 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -38,9 +38,9 @@
 
 package java.io;
 
-import gnu.java.lang.reflect.TypeSignature;
-
 import java.lang.reflect.Field;
+import java.lang.reflect.Modifier;
+import gnu.java.lang.reflect.TypeSignature;
 import java.security.AccessController;
 import java.security.PrivilegedAction;
 
@@ -64,6 +64,7 @@
   {
     this (field.getName(), field.getType());
     this.field = field;
+    toset = !Modifier.isFinal(field.getModifiers());
   }
 
   /**
@@ -86,7 +87,6 @@
    *
    * @param name Name of the field to export.
    * @param type Type of the field in the concerned class.
-   * @param unshared true if field will be unshared, false otherwise.
    */
   public ObjectStreamField (String name, Class type, boolean unshared)
   {
@@ -238,16 +238,9 @@
     return typename.length() == 1;
   }
 
-  /**
-   * Compares this object to the given object.
-   *
-   * @param obj the object to compare to.
-   *
-   * @return -1, 0 or 1.
-   */
-  public int compareTo (Object obj)
+  public int compareTo (Object o)
   {
-    ObjectStreamField f = (ObjectStreamField) obj;
+    ObjectStreamField f = (ObjectStreamField)o;
     boolean this_is_primitive = isPrimitive ();
     boolean f_is_primitive = f.isPrimitive ();
 
@@ -355,11 +348,6 @@
 	 " in class " + field.getDeclaringClass());
   }
 
-  /**
-   * Returns a string representing this object.
-   *
-   * @return the string.
-   */
   public String toString ()
   {
     return "ObjectStreamField< " + type + " " + name + " >";
@@ -367,46 +355,109 @@
 
   final void setBooleanField(Object obj, boolean val)
   {
-    VMObjectStreamClass.setBooleanNative(field, obj, val);  
+    try
+      {
+	field.setBoolean(obj, val);
+      }
+    catch(IllegalAccessException x)
+      {
+	throw new InternalError(x.getMessage());
+      }
   }
-
+  
   final void setByteField(Object obj, byte val)
   {
-    VMObjectStreamClass.setByteNative(field, obj, val);
+    try
+      {
+	field.setByte(obj, val);
+      }
+    catch(IllegalAccessException x)
+      {
+	throw new InternalError(x.getMessage());
+      }
   }
   
   final void setCharField(Object obj, char val)
   {
-    VMObjectStreamClass.setCharNative(field, obj, val);
+    try
+      {
+	field.setChar(obj, val);
+      }
+    catch(IllegalAccessException x)
+      {
+	throw new InternalError(x.getMessage());
+      }
   }
   
   final void setShortField(Object obj, short val)
   {
-    VMObjectStreamClass.setShortNative(field, obj, val);
+    try
+      {
+	field.setShort(obj, val);
+      }
+    catch(IllegalAccessException x)
+      {
+	throw new InternalError(x.getMessage());
+      }
   }
-
+  
   final void setIntField(Object obj, int val)
   {
-    VMObjectStreamClass.setIntNative(field, obj, val);
+    try
+      {
+	field.setInt(obj, val);
+      }
+    catch(IllegalAccessException x)
+      {
+	throw new InternalError(x.getMessage());
+      }
   }
   
   final void setLongField(Object obj, long val)
   {
-    VMObjectStreamClass.setLongNative(field, obj, val);
+    try
+      {
+	field.setLong(obj, val);
+      }
+    catch(IllegalAccessException x)
+      {
+	throw new InternalError(x.getMessage());
+      }
   }
   
   final void setFloatField(Object obj, float val)
   {
-    VMObjectStreamClass.setFloatNative(field, obj, val);
+    try
+      {
+	field.setFloat(obj, val);
+      }
+    catch(IllegalAccessException x)
+      {
+	throw new InternalError(x.getMessage());
+      }
   }
   
   final void setDoubleField(Object obj, double val)
   {
-    VMObjectStreamClass.setDoubleNative(field, obj, val);
+    try
+      {
+	field.setDouble(obj, val);
+      }
+    catch(IllegalAccessException x)
+      {
+	throw new InternalError(x.getMessage());
+      }
   }
   
   final void setObjectField(Object obj, Object val)
   { 
-    VMObjectStreamClass.setObjectNative(field, obj, val);
+    try
+      {
+	field.set(obj, val);
+      }
+    catch(IllegalAccessException x)
+      {
+	throw new InternalError(x.getMessage());
+      }
   }
 }
