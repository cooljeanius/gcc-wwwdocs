--- /home/tromey/gnu/Nightly/classpath/classpath/java/io/ObjectStreamField.java	2004-02-03 02:21:38.000000000 -0700
+++ java/io/ObjectStreamField.java	2003-12-21 02:18:13.000000000 -0700
@@ -38,8 +38,6 @@
 
 package java.io;
 
-import java.lang.reflect.Field;
-import java.lang.reflect.Modifier;
 import gnu.java.lang.reflect.TypeSignature;
 
 /**
@@ -56,14 +54,6 @@
   private boolean unshared;
   private boolean persistent = false;
   private boolean toset = true;
-  private Field field;
-
-  ObjectStreamField (Field field)
-  {
-    this (field.getName(), field.getType());
-    this.field = field;
-    toset = !Modifier.isFinal(field.getModifiers());
-  }
 
   /**
    * This constructor creates an ObjectStreamField instance 
@@ -115,6 +105,7 @@
       }
     catch(ClassNotFoundException e)
       {
+        type = Object.class; //FIXME: ???
       }
   }
   
@@ -137,6 +128,7 @@
       }
     catch(ClassNotFoundException e)
       {
+        type = Object.class; // ALSO FIXME 
       }
   }
 
@@ -184,7 +176,7 @@
   public String getTypeString ()
   {
     // use intern()
-    if (isPrimitive())
+    if (this.type.isPrimitive())
       return null;
     return typename.intern();
   }
@@ -233,7 +225,7 @@
    */
   public boolean isPrimitive ()
   {
-    return typename.length() == 1;
+    return type.isPrimitive ();
   }
 
   public int compareTo (Object o)
@@ -307,112 +299,5 @@
   {
     return "ObjectStreamField< " + type + " " + name + " >";
   }
-
-  final void setBooleanField(Object obj, boolean val)
-  {
-      try
-      {
-	  field.setBoolean(obj, val);
-      }
-      catch(IllegalAccessException x)
-      {
-	  throw new InternalError(x.getMessage());
-      }
-  }
-
-  final void setByteField(Object obj, byte val)
-  {
-      try
-      {
-	  field.setByte(obj, val);
-      }
-      catch(IllegalAccessException x)
-      {
-	  throw new InternalError(x.getMessage());
-      }
-  }
-
-  final void setCharField(Object obj, char val)
-  {
-      try
-      {
-	  field.setChar(obj, val);
-      }
-      catch(IllegalAccessException x)
-      {
-	  throw new InternalError(x.getMessage());
-      }
-  }
-
-  final void setShortField(Object obj, short val)
-  {
-      try
-      {
-	  field.setShort(obj, val);
-      }
-      catch(IllegalAccessException x)
-      {
-	  throw new InternalError(x.getMessage());
-      }
-  }
-
-  final void setIntField(Object obj, int val)
-  {
-      try
-      {
-	  field.setInt(obj, val);
-      }
-      catch(IllegalAccessException x)
-      {
-	  throw new InternalError(x.getMessage());
-      }
-  }
-
-  final void setLongField(Object obj, long val)
-  {
-      try
-      {
-	  field.setLong(obj, val);
-      }
-      catch(IllegalAccessException x)
-      {
-	  throw new InternalError(x.getMessage());
-      }
-  }
-
-  final void setFloatField(Object obj, float val)
-  {
-      try
-      {
-	  field.setFloat(obj, val);
-      }
-      catch(IllegalAccessException x)
-      {
-	  throw new InternalError(x.getMessage());
-      }
-  }
-
-  final void setDoubleField(Object obj, double val)
-  {
-      try
-      {
-	  field.setDouble(obj, val);
-      }
-      catch(IllegalAccessException x)
-      {
-	  throw new InternalError(x.getMessage());
-      }
-  }
-
-  final void setObjectField(Object obj, Object val)
-  {
-    try
-      {
-	field.set(obj, val);
-      }
-    catch(IllegalAccessException x)
-      {
-	throw new InternalError(x.getMessage());
-      }
-  }
 }
+
