--- /home/tromey/gnu/Nightly/classpath/classpath/java/text/CollationElementIterator.java	2003-05-01 02:23:14.000000000 -0600
+++ java/text/CollationElementIterator.java	2003-05-01 02:21:57.000000000 -0600
@@ -1,6 +1,6 @@
 /* CollationElementIterator.java -- Walks through collation elements
-   Copyright (C) 1998, 1999, 2002 Free Software Foundation, Inc.
 
+/* Copyright (C) 1999, 2001  Free Software Foundation
 This file is part of GNU Classpath.
 
 GNU Classpath is free software; you can redistribute it and/or modify
@@ -38,28 +38,48 @@
 
 package java.text;
 
+/* Written using "Java Class Libraries", 2nd edition, plus online
+ * API docs for JDK 1.2 from http://www.javasoft.com.
+ * Status: Believed complete and correct to JDK 1.1.
+ */
+
+/**
+ * This class walks through the character collation elements of a 
+ * <code>String</code> as defined by the collation rules in an instance of 
+ * <code>RuleBasedCollator</code>.  There is no public constructor for
+ * this class.  An instance is created by calling the
+ * <code>getCollationElementIterator</code> method on 
+ * <code>RuleBasedCollator</code>.
+ *
+ * @author Aaron M. Renn <arenn@urbanophile.com>
+ * @author Tom Tromey <tromey@cygnus.com>
+ */
 public final class CollationElementIterator
 {
   /**
    * This is a constant value that is returned to indicate that the end of 
    * the string was encountered.
    */
-  public static final int NULLORDER = -1;
+  public static final int NULLORDER = 0xffffffff;
 
   /**
    * This is the RuleBasedCollator this object was created from.
    */
-  private RuleBasedCollator rbc;
+  RuleBasedCollator collator;
 
   /**
    * This is the String that is being iterated over.
    */
-  private String str;
+  String text;
 
   /**
    * This is the index into the String where we are currently scanning.
    */
-  private int pos;
+  int index;
+
+  // A piece of lookahead.
+  boolean lookahead_set;
+  int lookahead;
 
   /**
    * This method returns the collation ordering value of the next character
@@ -70,12 +90,9 @@
    */
   public int next ()
   {
-    ++pos;
-    if (pos >= str.length())
-      return(NULLORDER);
-
-    String s = str.charAt(pos) + "";
-    return(rbc.getCollationElementValue(s));
+    if (index == text.length())
+      return NULLORDER;
+    return collator.ceiNext(this);
   }
 
   /**
@@ -98,7 +115,7 @@
    */
   public void reset ()
   {
-    pos = 0;
+    index = 0;
   }
 
   /**
@@ -129,116 +146,15 @@
     return (short) (order & 255);
   }
 
-  /**
-   * This method initializes a new instance of <code>CollationElementIterator</code>
-   * to iterate over the specified <code>String</code> using the rules in the
-   * specified <code>RuleBasedCollator</code>.
-   *
-   * @param rbc The <code>RuleBasedCollation</code> used for calculating collation values
-   * @param str The <code>String</code> to iterate over.
-   */
-  CollationElementIterator(RuleBasedCollator rbc, String str)
-  {
-    this.rbc = rbc;
-    this.str = str;
-  }
-
-  /**
-   * This method sets the <code>String</code> that it is iterating over
-   * to the specified <code>String</code>.
-   *
-   * @param The new <code>String</code> to iterate over.
-   */
-  public void setText(String str)
-  {
-    this.str = str;
-    pos = 0;
-  }
-
-  /**
-   * This method sets the <code>String</code> that it is iterating over
-   * to the <code>String</code> represented by the specified
-   * <code>CharacterIterator</code>.
-   *
-   * @param ci The <code>CharacterIterator</code> containing the new <code>String</code> to iterate over.
-   */
-  public void setText(CharacterIterator ci)
+  // Non-public constructor.
+  CollationElementIterator (String text, RuleBasedCollator collator)
   {
-    StringBuffer sb = new StringBuffer("");
-
-    // For now assume we read from the beginning of the string.
-    char c = ci.first();
-    while (c != CharacterIterator.DONE)
-      {
-        sb.append(c);
-        c = ci.next();
-      }
-
-    setText(sb.toString());
+    this.text = text;
+    this.index = 0;
+    this.lookahead_set = false;
+    this.lookahead = 0;
+    this.collator = collator;
   }
 
-  /**
-   * This method returns the current offset into the <code>String</code>
-   * that is being iterated over.
-   *
-   * @return The iteration index position.
-   */
-  public int getOffset()
-  {
-    return(pos);
-  }
+} // class CollationElementIterator
 
-  /**
-   * This method sets the iteration index position into the current
-   * <code>String</code> to the specified value.  This value must not
-   * be negative and must not be greater than the last index position
-   * in the <code>String</code>.
-   *
-   * @param offset The new iteration index position.
-   *
-   * @exception IllegalArgumentException If the new offset is not valid.
-   */
-  public void setOffset(int offset)
-  {
-    if (offset < 0)
-      throw new IllegalArgumentException("Negative offset: " + offset);
-
-    if ((str.length() > 0) && (offset > 0))
-      throw new IllegalArgumentException("Offset too large: " + offset);
-    else if (offset > (str.length() - 1))
-      throw new IllegalArgumentException("Offset too large: " + offset);
-
-    pos = offset;
-  }    
-
-  /**
-   * This method returns the maximum length of any expansion sequence that
-   * ends with the specified collation order value.  (Whatever that means).
-   *
-   * @param value The collation order value
-   *
-   * @param The maximum length of an expansion sequence.
-   */
-  public int getMaxExpansion(int value)
-  {
-    //************ Implement me!!!!!!!!!
-    return(5);
-  }
-
-  /**
-   * This method returns the collation ordering value of the previous character
-   * in the string.  This method will return <code>NULLORDER</code> if the
-   * beginning of the string was reached.
-   *
-   * @return The collation ordering value.
-   */
-  public int previous()
-  {
-    --pos;
-    if (pos < 0)
-      return(NULLORDER);
-
-    String s = str.charAt(pos) + "";
-    return(rbc.getCollationElementValue(s));
-  }
-}
