--- /home/tromey/gnu/Nightly/classpath/classpath/java/text/CollationElementIterator.java	2003-06-28 02:19:20.000000000 -0600
+++ java/text/CollationElementIterator.java	2003-06-20 02:21:15.000000000 -0600
@@ -65,31 +65,21 @@
   /**
    * This is the RuleBasedCollator this object was created from.
    */
-  private RuleBasedCollator collator;
+  RuleBasedCollator collator;
 
   /**
    * This is the String that is being iterated over.
    */
-  private String text;
+  String text;
 
   /**
    * This is the index into the String where we are currently scanning.
    */
-  private int index;
+  int index;
 
-  /**
-   * This method initializes a new instance of <code>CollationElementIterator</code>
-   * to iterate over the specified <code>String</code> using the rules in the
-   * specified <code>RuleBasedCollator</code>.
-   *
-   * @param collator The <code>RuleBasedCollation</code> used for calculating collation values
-   * @param text The <code>String</code> to iterate over.
-   */
-  CollationElementIterator (RuleBasedCollator collator, String text)
-  {
-    this.collator = collator;
-    this.text = text;
-  }
+  // A piece of lookahead.
+  boolean lookahead_set;
+  int lookahead;
 
   /**
    * This method returns the collation ordering value of the next character
@@ -100,12 +90,10 @@
    */
   public int next ()
   {
-    if (index >= text.length ())
+    if (index == text.length())
       return NULLORDER;
 
-    String s = text.charAt (index) + "";
-    index++;
-    return collator.getCollationElementValue (s);
+    return collator.ceiNext(this);
   }
 
   /**
@@ -159,102 +147,15 @@
     return (short) (order & 255);
   }
 
-  /**
-   * This method sets the <code>String</code> that it is iterating over
-   * to the specified <code>String</code>.
-   *
-   * @param The new <code>String</code> to iterate over.
-   */
-  public void setText (String text)
+  // Non-public constructor.
+  CollationElementIterator (String text, RuleBasedCollator collator)
   {
     this.text = text;
-    index = 0;
-  }
-
-  /**
-   * This method sets the <code>String</code> that it is iterating over
-   * to the <code>String</code> represented by the specified
-   * <code>CharacterIterator</code>.
-   *
-   * @param ci The <code>CharacterIterator</code> containing the new <code>String</code> to iterate over.
-   */
-  public void setText (CharacterIterator ci)
-  {
-    StringBuffer sb = new StringBuffer ("");
-
-    // For now assume we read from the beginning of the string.
-    char c = ci.first ();
-    while (c != CharacterIterator.DONE)
-      {
-        sb.append (c);
-        c = ci.next ();
-      }
-
-    setText (sb.toString ());
-  }
-
-  /**
-   * This method returns the current offset into the <code>String</code>
-   * that is being iterated over.
-   *
-   * @return The iteration index position.
-   */
-  public int getOffset ()
-  {
-    return index;
-  }
-
-  /**
-   * This method sets the iteration index position into the current
-   * <code>String</code> to the specified value.  This value must not
-   * be negative and must not be greater than the last index position
-   * in the <code>String</code>.
-   *
-   * @param offset The new iteration index position.
-   *
-   * @exception IllegalArgumentException If the new offset is not valid.
-   */
-  public void setOffset (int offset)
-  {
-    if (offset < 0)
-      throw new IllegalArgumentException ("Negative offset: " + offset);
-
-    if ((text.length () > 0) && (offset > 0))
-      throw new IllegalArgumentException ("Offset too large: " + offset);
-    else if (offset > (text.length () - 1))
-      throw new IllegalArgumentException ("Offset too large: " + offset);
-
-    index = offset;
-  }    
-
-  /**
-   * This method returns the maximum length of any expansion sequence that
-   * ends with the specified collation order value.  (Whatever that means).
-   *
-   * @param value The collation order value
-   *
-   * @param The maximum length of an expansion sequence.
-   */
-  public int getMaxExpansion (int value)
-  {
-    //************ Implement me!!!!!!!!!
-    return 5;
+    this.index = 0;
+    this.lookahead_set = false;
+    this.lookahead = 0;
+    this.collator = collator;
   }
 
-  /**
-   * This method returns the collation ordering value of the previous character
-   * in the string.  This method will return <code>NULLORDER</code> if the
-   * beginning of the string was reached.
-   *
-   * @return The collation ordering value.
-   */
-  public int previous ()
-  {
-    --index;
-    if (index < 0)
-      return NULLORDER;
+} // class CollationElementIterator
 
-    String s = text.charAt (index) + "";
-    return collator.getCollationElementValue (s);
-  }
-}
