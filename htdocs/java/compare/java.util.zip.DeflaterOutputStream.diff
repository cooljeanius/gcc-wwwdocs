--- /home/tromey/gnu/Nightly/classpath/classpath/java/util/zip/DeflaterOutputStream.java	2004-10-28 02:27:40.000000000 -0600
+++ java/util/zip/DeflaterOutputStream.java	2004-10-28 02:16:12.000000000 -0600
@@ -79,18 +79,13 @@
    */
   protected void deflate() throws IOException
   {
-    while (! def.needsInput())
+    do
       {
 	int len = def.deflate(buf, 0, buf.length);
-
-	//	System.err.println("DOS deflated " + len + " out of " + buf.length);
-	if (len <= 0)
-	  break;
-	out.write(buf, 0, len);
-      }
-
-    if (! def.needsInput())
-      throw new InternalError("Can't deflate all input?");
+	if (len > 0)
+	  out.write(buf, 0, len);
+       }
+    while (! def.needsInput());
   }
 
   /** 
@@ -131,19 +126,6 @@
     def = defl;
   }
 
-  /**  
-   * Flushes the stream by calling flush() on the deflater and then
-   * on the underlying stream.  This ensures that all bytes are
-   * flushed.  This function doesn't work in Sun's JDK, but only in
-   * jazzlib.
-   */
-  public void flush() throws IOException
-  {
-    def.flush();
-    deflate();
-    out.flush();
-  }
-
   /**
    * Finishes the stream by calling finish() on the deflater.  This
    * was the only way to ensure that all bytes are flushed in Sun's
@@ -151,17 +133,14 @@
    */
   public void finish() throws IOException
   {
+    inbufWrite();
     def.finish();
     while (! def.finished())
       {
 	int len = def.deflate(buf, 0, buf.length);
-	if (len <= 0)
-	  break;
-	out.write(buf, 0, len);
+	if (len > 0)
+	  out.write(buf, 0, len);
       }
-    if (! def.finished())
-      throw new InternalError("Can't deflate all input?");
-    out.flush();
   }
 
   /**
@@ -179,9 +158,11 @@
    */
   public void write(int bval) throws IOException
   {
-    byte[] b = new byte[1];
-    b[0] = (byte) bval;
-    write(b, 0, 1);
+    if (inbuf == null)
+      inbuf = new byte[128];
+    else if (inbufLength == inbuf.length)
+      inbufWrite();
+    inbuf[inbufLength++] = (byte) bval;
   }
 
   /**
@@ -192,7 +173,23 @@
    */
   public void write(byte[] buf, int off, int len) throws IOException
   {
+    inbufWrite();
     def.setInput(buf, off, len);
     deflate();
   }
+
+  private void inbufWrite() throws IOException
+  {
+    if (inbufLength > 0)
+      {
+	int size = inbufLength;
+	inbufLength = 0;
+	write(inbuf, 0, size);
+      }
+  }
+
+  // Used, if needed, for write(int).
+  private byte[] inbuf;
+  // Used length of inbuf.
+  private int inbufLength;
 }
