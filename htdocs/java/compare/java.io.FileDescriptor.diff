--- /home/tromey/gnu/Nightly/classpath/classpath/java/io/FileDescriptor.java	2004-01-26 02:24:19.000000000 -0700
+++ java/io/FileDescriptor.java	2004-03-01 02:18:07.000000000 -0700
@@ -39,7 +39,9 @@
 
 package java.io;
 
-import gnu.classpath.Configuration;
+import java.nio.channels.ByteChannel;
+import java.nio.channels.FileChannel;
+import gnu.java.nio.channels.FileChannelImpl;
 
 /**
  * This class represents an opaque file handle as a Java class.  It should
@@ -57,68 +59,35 @@
    * stream.  This will usually be accessed through the
    * <code>System.in</code>variable.
    */
-  public static final FileDescriptor in = new FileDescriptor();
+  public static final FileDescriptor in
+  = new FileDescriptor (FileChannelImpl.in);
 
   /**
    * A <code>FileDescriptor</code> representing the system standard output
    * stream.  This will usually be accessed through the
    * <code>System.out</code>variable.
    */
-  public static final FileDescriptor out = new FileDescriptor();
+  public static final FileDescriptor out
+  = new FileDescriptor (FileChannelImpl.out);
 
   /**
    * A <code>FileDescriptor</code> representing the system standard error
    * stream.  This will usually be accessed through the
    * <code>System.err</code>variable.
    */
-  public static final FileDescriptor err = new FileDescriptor();
+  public static final FileDescriptor err
+  = new FileDescriptor (FileChannelImpl.err);
 
-  static
-    {
-      if (Configuration.INIT_LOAD_LIBRARY)
-        {
-          System.loadLibrary("javaio");
-        }
-
-      nativeInit();
-    }
-
-  // These are WHENCE values for seek.
-  static final int SET = 0;
-  static final int CUR = 1;
-  static final int END = 2;
-
-  // These are mode values for open().
-  static final int READ   = 1;
-  static final int WRITE  = 2;
-  static final int APPEND = 4;
-
-  // EXCL is used only when making a temp file.
-  static final int EXCL   = 8;
-  static final int SYNC   = 16;
-  static final int DSYNC  = 32;
-
-  /**
-   * This is the actual native file descriptor value
-   */
-  private long nativeFd = -1L;
+  final ByteChannel channel;
 
   /**
    * This method is used to initialize an invalid FileDescriptor object.
    */
-  public FileDescriptor()
+  FileDescriptor(ByteChannel channel)
   {
+    this.channel = channel;
   }
 
-  private FileDescriptor(long nativeFd)
-  {
-    this.nativeFd = nativeFd;
-  }
-
-  FileDescriptor(String path, int mode) throws FileNotFoundException
-  {
-    open(path, mode);
-  }
 
   /**
    * This method forces all data that has not yet been physically written to
@@ -129,12 +98,22 @@
    * support this functionality or if an error occurs, then an exception
    * will be thrown.
    */
-  public void sync() throws SyncFailedException
+  public void sync () throws SyncFailedException
   {
-    if (nativeFd == -1L)
-      throw new SyncFailedException("Invalid FileDescriptor");
-
-    nativeSync(nativeFd);
+    if (channel instanceof FileChannel)
+      {
+	try
+	  {
+	    ((FileChannel) channel).force(true); 
+	  }
+	catch (IOException ex)
+	  {
+	    if (ex instanceof SyncFailedException)
+	      throw (SyncFailedException) ex;
+	    else
+	      throw new SyncFailedException(ex.getMessage());
+	  }
+      }
   }
 
   /**
@@ -144,438 +123,8 @@
    * @return <code>true</code> if this object represents a valid 
    * native file handle, <code>false</code> otherwise
    */
-  public boolean valid()
-  {
-    if (nativeFd == -1L)
-      return false;
-
-    return nativeValid(nativeFd);
-  }
-
-  /**
-   * Opens the specified file in the specified mode.  This can be done
-   * in one of the specified modes:
-   * <ul>
-   * <li>r - Read Only
-   * <li>rw - Read / Write
-   * <li>ra - Read / Write - append to end of file
-   * <li>rws - Read / Write - synchronous writes of data/metadata
-   * <li>rwd - Read / Write - synchronous writes of data.
-   *
-   * @param path Name of the file to open
-   * @param mode Mode to open
-   *
-   * @exception IOException If an error occurs.
-   */
-  void open(String path, int mode) throws FileNotFoundException
-  {
-    // We don't want fd leakage.
-    if (nativeFd != -1L)
-      throw new InternalError("FileDescriptor already open");
-
-    // Note that it can be ok to have an empty path.
-    // FIXME: verify
-    if (path == null)
-      throw new NullPointerException("Path cannot be null");
-
-    if ((mode & (READ | WRITE)) == 0)
-      throw new InternalError("Invalid mode value: " + mode);
-
-    nativeFd = nativeOpen(path, mode);
-  }
-
-  /**
-   * Closes this specified file descriptor
-   * 
-   * @exception IOException If an error occurs 
-   */    
-  synchronized void close() throws IOException
-  {
-    if (nativeFd == -1L)
-      return;
-    try
-      {
-        nativeClose(nativeFd);
-      }
-    finally
-      {
-        nativeFd = -1L;
-      }
-  }
-
-  /**
-   * Writes a single byte to the file
-   *
-   * @param b The byte to write, encoded in the low eight bits
-   *
-   * @exception IOException If an error occurs
-   */
-  void write(int b) throws IOException
-  {
-    if (nativeFd == -1L)
-      throw new IOException("Invalid FileDescriptor");
-
-    nativeWriteByte(nativeFd, (b & 0xFF));
-  }
-
-  /**
-   * Writes a byte buffer to the file
-   *
-   * @param buf The byte buffer to write from
-   * @param int The offset into the buffer to start writing from
-   * @param len The number of bytes to write.
-   *
-   * @exception IOException If an error occurs
-   */
-  void write(byte[] buf, int offset, int len) throws IOException
-  {
-    if (nativeFd == -1L)
-      throw new IOException("Invalid FileDescriptor");
-
-    if (len == 0)
-      return;
-
-    if ((offset < 0) || (offset > buf.length))
-      throw new IllegalArgumentException("Offset invalid: " + offset);
-
-    if ((len < 0) || (len > (buf.length - offset)))
-      throw new IllegalArgumentException("Length invalid: " + len);
-
-    // Note that above ops implicitly bomb if buf == null
-
-    nativeWriteBuf(nativeFd, buf, offset, len);
-  }
-
-  /**
-   * Reads a single byte from the file
-   *
-   * @return The byte read, in the low eight bits on a long, or -1
-   * if end of file
-   *
-   * @exception IOException If an error occurs
-   */
-  int read() throws IOException
-  {
-    if (nativeFd == -1L)
-      throw new IOException("Invalid FileDescriptor");
-
-    return nativeReadByte(nativeFd);
-  }
-
-  /**
-   * Reads a buffer of  bytes from the file
-   *
-   * @param buf The buffer to read bytes into
-   * @param offset The offset into the buffer to start storing bytes
-   * @param len The number of bytes to read.
-   *
-   * @return The number of bytes read, or -1 if end of file.
-   *
-   * @exception IOException If an error occurs
-   */
-  int read(byte[] buf, int offset, int len) throws IOException
-  {
-    if (nativeFd == -1L)
-      throw new IOException("Invalid FileDescriptor");
-
-    if (len == 0)
-      return(0);
-
-    if ((offset < 0) || (offset > buf.length))
-      throw new IllegalArgumentException("Offset invalid: " + offset);
-
-    if ((len < 0) || (len > (buf.length - offset)))
-      throw new IllegalArgumentException("Length invalid: " + len);
-
-    // Note that above ops implicitly bomb if buf == null
-
-    return nativeReadBuf(nativeFd, buf, offset, len);
-  }
-
-  /**
-   * Returns the number of bytes available for reading
-   *
-   * @return The number of bytes available for reading
-   *
-   * @exception IOException If an error occurs
-   */
-  int available() throws IOException
-  {
-    if (nativeFd == -1L)
-      throw new IOException("Invalid FileDescriptor");
-    
-    return nativeAvailable(nativeFd);
-  }
-
-  /**
-   * Method to do a "seek" operation on the file
-   * 
-   * @param offset The number of bytes to seek
-   * @param whence The position to seek from, either
-   *    SET (0) for the beginning of the file, CUR (1) for the 
-   *    current position or END (2) for the end position.
-   * @param stopAtEof <code>true</code> to ensure that there is no
-   *    seeking past the end of the file, <code>false</code> otherwise.
-   *
-   * @return The new file position, or -1 if end of file.
-   *
-   * @exception IOException If an error occurs
-   */
-  long seek(long offset, int whence, boolean stopAtEof) throws IOException
-  {
-    if (nativeFd == -1L)
-      throw new IOException("Invalid FileDescriptor");
-
-    if ((whence != SET) && (whence != CUR) && (whence != END))
-      throw new IllegalArgumentException("Invalid whence value: " + whence);
-
-    return nativeSeek(nativeFd, offset, whence, stopAtEof);
-  }
-
-  /**
-   * Returns the current position of the file pointer in the file
-   *
-   * @param fd The native file descriptor
-   *
-   * @exception IOException If an error occurs
-   */
-  long getFilePointer() throws IOException
-  { 
-    if (nativeFd == -1L)
-      throw new IOException("Invalid FileDescriptor");
-
-    return nativeGetFilePointer(nativeFd);
-  }
-
-  /**
-   * Returns the length of the file in bytes
-   *
-   * @return The length of the file in bytes
-   *
-   * @exception IOException If an error occurs
-   */
-  long getLength() throws IOException
+  public boolean valid ()
   {
-    if (nativeFd == -1L)
-      throw new IOException("Invalid FileDescriptor");
-
-    return nativeGetLength(nativeFd);
+    return channel.isOpen();
   }
-
-  /**
-   * Sets the length of the file to the specified number of bytes
-   * This can result in truncation or extension.
-   *
-   * @param len The new length of the file
-   *
-   * @exception IOException If an error occurs
-   */
-  void setLength(long len) throws IOException
-  {
-    if (nativeFd == -1L)
-      throw new IOException("Invalid FileDescriptor");
-
-    if (len < 0)
-      throw new IllegalArgumentException("Length cannot be less than zero " +
-                                         len);
-
-    nativeSetLength(nativeFd, len);
-  }
-
-  // Don't do anything crazy with this
-  long getNativeFd()
-  {
-    return nativeFd;
-  }
-
-  private void setNativeFd(long nativeFd)
-  {
-    this.nativeFd = nativeFd;
-  }
-
-  protected void finalize() throws Throwable
-  {
-    close();
-  }
-
-  /*
-   * Native FileDescriptor provider interface
-   *
-   * Platform implementors must implement these methods.  Note that this
-   * class guarantees that valid data will be passed to these methods,
-   * so basic error checking on input values can be skipped.
-   */
-
-  /**
-   * This method is called in the class initializer to do any require
-   * native library initialization.  It is also responsible for initializing
-   * the in, out, and err variables.
-   */
-  private static native void nativeInit();
-
-  /**
-   * Opens the specified file in the specified mode.  This can be done
-   * in one of the specified modes:
-   * <ul>
-   * <li>r - Read Only
-   * <li>rw - Read / Write
-   * <li>ra - Read / Write - append to end of file
-   * <li>rws - Read / Write - synchronous writes of data/metadata
-   * <li>rwd - Read / Write - synchronous writes of data.
-   *
-   * @param path Name of the file to open
-   * @param mode Mode to open
-   *
-   * @return The resulting file descriptor for the opened file, or -1
-   * on failure (exception also signaled).
-   *
-   * @exception IOException If an error occurs.
-   */
-  private native long nativeOpen(String path, int mode)
-    throws FileNotFoundException;
-
-  /**
-   * Closes this specified file descriptor
-   * 
-   * @param fd The native file descriptor to close
-   *
-   * @return The return code of the native close command.
-   *
-   * @exception IOException If an error occurs 
-   */    
-  private native long nativeClose(long fd) throws IOException;
- 
-  /**
-   * Writes a single byte to the file
-   *
-   * @param fd The native file descriptor to write to
-   * @param b The byte to write, encoded in the low eight bits
-   *
-   * @return The return code of the native write command
-   *
-   * @exception IOException If an error occurs
-   */
-  private native long nativeWriteByte(long fd, int b) throws IOException;
-
-  /**
-   * Writes a byte buffer to the file
-   *
-   * @param fd The native file descriptor to write to
-   * @param buf The byte buffer to write from
-   * @param int The offset into the buffer to start writing from
-   * @param len The number of bytes to write.
-   *
-   * @return The return code of the native write command
-   *
-   * @exception IOException If an error occurs
-   */
-  private native long nativeWriteBuf(long fd, byte[] buf, int offset, int len)
-    throws IOException;
-
-  /**
-   * Reads a single byte from the file
-   *
-   * @param fd The native file descriptor to read from
-   *
-   * @return The byte read, in the low eight bits on a long, or -1
-   * if end of file
-   *
-   * @exception IOException If an error occurs
-   */
-  private native int nativeReadByte(long fd) throws IOException;
-
-  /**
-   * Reads a buffer of  bytes from the file
-   *
-   * @param fd The native file descriptor to read from
-   * @param buf The buffer to read bytes into
-   * @param offset The offset into the buffer to start storing bytes
-   * @param len The number of bytes to read.
-   *
-   * @return The number of bytes read, or -1 if end of file.
-   *
-   * @exception IOException If an error occurs
-   */
-  private native int nativeReadBuf(long fd, byte[] buf, int offset, int len) 
-    throws IOException;
-
-  /**
-   * Returns the number of bytes available for reading
-   *
-   * @param fd The native file descriptor
-   *
-   * @return The number of bytes available for reading
-   *
-   * @exception IOException If an error occurs
-   */
-  private native int nativeAvailable(long fd) throws IOException;
-
-  /**
-   * Method to do a "seek" operation on the file
-   * 
-   * @param fd The native file descriptor 
-   * @param offset The number of bytes to seek
-   * @param whence The position to seek from, either
-   *    SET (0) for the beginning of the file, CUR (1) for the 
-   *    current position or END (2) for the end position.
-   * @param stopAtEof <code>true</code> to ensure that there is no
-   *    seeking past the end of the file, <code>false</code> otherwise.
-   *
-   * @return The new file position, or -1 if end of file.
-   *
-   * @exception IOException If an error occurs
-   */
-  private native long nativeSeek(long fd, long offset, int whence, 
-                                 boolean stopAtEof)
-    throws IOException;
-
-  /**
-   * Returns the current position of the file pointer in the file
-   *
-   * @param fd The native file descriptor
-   *
-   * @exception IOException If an error occurs
-   */
-  private native long nativeGetFilePointer(long fd) throws IOException;
-
-  /**
-   * Returns the length of the file in bytes
-   *
-   * @param fd The native file descriptor
-   *
-   * @return The length of the file in bytes
-   *
-   * @exception IOException If an error occurs
-   */
-  private native long nativeGetLength(long fd) throws IOException;
-
-  /**
-   * Sets the length of the file to the specified number of bytes
-   * This can result in truncation or extension.
-   *
-   * @param fd The native file descriptor  
-   * @param len The new length of the file
-   *
-   * @exception IOException If an error occurs
-   */
-  private native void nativeSetLength(long fd, long len) throws IOException;
-
-  /**
-   * Tests a file descriptor for validity
-   *
-   * @param fd The native file descriptor
-   *
-   * @return <code>true</code> if the fd is valid, <code>false</code> 
-   * otherwise
-   */
-  private native boolean nativeValid(long fd);
-
-  /**
-   * Flushes any buffered contents to disk
-   *
-   * @param fd The native file descriptor
-   *
-   * @exception IOException If an error occurs
-   */
-  private native void nativeSync(long fd) throws SyncFailedException;
 }
