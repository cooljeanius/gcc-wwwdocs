--- /home/tromey/gnu/Nightly/classpath/classpath/java/text/MessageFormat.java	2004-07-09 02:22:15.000000000 -0600
+++ java/text/MessageFormat.java	2004-05-05 02:18:55.000000000 -0600
@@ -1,5 +1,5 @@
 /* MessageFormat.java - Localized message formatting.
-   Copyright (C) 1999, 2001, 2002, 2004 Free Software Foundation, Inc.
+   Copyright (C) 1999, 2001, 2002 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -157,7 +157,7 @@
      * This is the attribute set for all characters produced
      * by MessageFormat during a formatting.
      */
-    public static final MessageFormat.Field ARGUMENT = new MessageFormat.Field("argument");
+    public static final MessageFormat.Field ARGUMENT = new Field("argument");
 
     // For deserialization
     private Field()
@@ -414,13 +414,10 @@
 
     for (int i = 0; i < elements.length; ++i)
       {
-	Object thisArg = null;
-	boolean unavailable = false;
-	if (arguments == null || elements[i].argNumber >= arguments.length)
-	  unavailable = true;
-	else
-	  thisArg = arguments[elements[i].argNumber];
+	if (elements[i].argNumber >= arguments.length)
+	  throw new IllegalArgumentException("Not enough arguments given");
 
+	Object thisArg = arguments[elements[i].argNumber];
 	AttributedCharacterIterator iterator = null;
 
 	Format formatter = null;
@@ -428,27 +425,22 @@
 	if (fp != null && i == fp.getField() && fp.getFieldAttribute() == Field.ARGUMENT)
 	  fp.setBeginIndex(appendBuf.length());
 
-	if (unavailable)
-	  appendBuf.append("{" + elements[i].argNumber + "}");
-	else
+	if (elements[i].setFormat != null)
+	  formatter = elements[i].setFormat;
+	else if (elements[i].format != null)
 	  {
-	    if (elements[i].setFormat != null)
-	      formatter = elements[i].setFormat;
-	    else if (elements[i].format != null)
-	      {
-	        if (elements[i].formatClass != null
-		    && ! elements[i].formatClass.isInstance(thisArg))
-	          throw new IllegalArgumentException("Wrong format class");
+	    if (elements[i].formatClass != null
+		&& ! elements[i].formatClass.isInstance(thisArg))
+	      throw new IllegalArgumentException("Wrong format class");
 	    
-	        formatter = elements[i].format;
-	      }
-	    else if (thisArg instanceof Number)
-	      formatter = NumberFormat.getInstance(locale);
-	    else if (thisArg instanceof Date)
-	      formatter = DateFormat.getTimeInstance(DateFormat.DEFAULT, locale);
-	    else
-	      appendBuf.append(thisArg);
+	    formatter = elements[i].format;
 	  }
+	else if (thisArg instanceof Number)
+	  formatter = NumberFormat.getInstance(locale);
+	else if (thisArg instanceof Date)
+	  formatter = DateFormat.getTimeInstance(DateFormat.DEFAULT, locale);
+	else
+	  appendBuf.append(thisArg);
 
 	if (fp != null && fp.getField() == i && fp.getFieldAttribute() == Field.ARGUMENT)
 	  fp.setEndIndex(appendBuf.length());
@@ -504,18 +496,29 @@
   }
 
   /**
-   * Returns the pattern with the formatted objects.  The first argument
-   * must be a array of Objects.
-   * This is equivalent to format((Object[]) objectArray, appendBuf, fpos)
+   * Returns the pattern with the formatted objects.
    *
-   * @param objectArray The object array to be formatted.
-   * @param appendBuf The StringBuffer where the text is appened.
+   * @param source The object to be formatted.
+   * @param result The StringBuffer where the text is appened.
    * @param fpos A FieldPosition object (it is ignored).
    */
-  public final StringBuffer format (Object objectArray, StringBuffer appendBuf,
+  public final StringBuffer format (Object singleArg, StringBuffer appendBuf,
 				    FieldPosition fpos)
   {
-    return format ((Object[])objectArray, appendBuf, fpos);
+    Object[] args;
+
+    if (singleArg instanceof Object[])
+      {
+	// This isn't specified in any manual, but it follows the
+	// JDK implementation.
+	args = (Object[]) singleArg;
+      }
+    else
+      {
+	args = new Object[1];
+	args[0] = singleArg;
+      }
+    return format (args, appendBuf, fpos);
   }
 
   /**
