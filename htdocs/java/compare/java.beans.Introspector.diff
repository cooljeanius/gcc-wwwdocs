--- /home/tromey/gnu/Nightly/classpath/classpath/java/beans/Introspector.java	2003-10-21 02:19:03.000000000 -0600
+++ java/beans/Introspector.java	2002-12-10 19:20:25.000000000 -0700
@@ -1,5 +1,5 @@
 /* java.beans.Introspector
-   Copyright (C) 1998, 2002, 2003 Free Software Foundation, Inc.
+   Copyright (C) 1998, 2002 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -518,54 +518,40 @@
   
   static BeanInfo reallyFindExplicitBeanInfo(Class beanClass) 
   {
-    ClassLoader beanClassLoader = beanClass.getClassLoader();
-    BeanInfo beanInfo;
-
-    beanInfo = getBeanInfo(beanClassLoader, beanClass.getName() + "BeanInfo");
-    if (beanInfo == null)
-      {
-	String newName;
-	newName = ClassHelper.getTruncatedClassName(beanClass) + "BeanInfo";
-
-	for(int i = 0; i < Introspector.beanInfoSearchPath.length; i++) 
-	  {
-	    if (Introspector.beanInfoSearchPath[i].equals("")) 
-	      beanInfo = getBeanInfo(beanClassLoader, newName);
-	    else 
-	      beanInfo = getBeanInfo(beanClassLoader,
-				     Introspector.beanInfoSearchPath[i] + "."
-				     + newName);
-
-	    if (beanInfo != null)
-	      return beanInfo;
-	  } 
-      }
-
-    return beanInfo;
-  }
-
-  /**
-   * Returns an instance of the given class name when it can be loaded
-   * through the given class loader, or null otherwise.
-   */
-  private static BeanInfo getBeanInfo(ClassLoader cl, String infoName)
-  {
-    try
-      {
-	return (BeanInfo) Class.forName(infoName, true, cl).newInstance();
-      }
-    catch (ClassNotFoundException cnfe)
+    try 
       {
-	return null;
-      }
-    catch (IllegalAccessException iae)
+      try 
+	{
+	  return (BeanInfo)Class.forName(beanClass.getName()+"BeanInfo").newInstance();
+	} 
+      catch(ClassNotFoundException E) 
+	{
+	}
+      String newName = ClassHelper.getTruncatedClassName(beanClass) + "BeanInfo";
+      for(int i=0;i<Introspector.beanInfoSearchPath.length;i++) 
+	{
+	  try 
+	    {
+	      if(Introspector.beanInfoSearchPath[i].equals("")) 
+		{
+		  return (BeanInfo)Class.forName(newName).newInstance();
+		} 
+	      else 
+		{
+		  return (BeanInfo)Class.forName(Introspector.beanInfoSearchPath[i] + "." + newName).newInstance();
+		}
+	    } 
+	  catch(ClassNotFoundException E) 
+	    {
+	    }
+	}
+      } 
+    catch(IllegalAccessException E) 
       {
-	return null;
-      }
-    catch (InstantiationException ie)
+      } 
+    catch(InstantiationException E) 
       {
-	return null;
       }
+    return null;
   }
-  
 }
