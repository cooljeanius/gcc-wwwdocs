--- /home/tromey/gnu/Nightly/classpath/classpath/gnu/java/nio/channels/FileChannelImpl.java	2004-04-11 06:02:06.000000000 -0600
+++ gnu/java/nio/channels/FileChannelImpl.java	2004-02-29 12:09:27.000000000 -0700
@@ -39,19 +39,12 @@
 package gnu.java.nio.channels;
 
 import gnu.classpath.Configuration;
+import gnu.gcj.RawData;
 import gnu.java.nio.FileLockImpl;
-
-import java.io.FileNotFoundException;
-import java.io.IOException;
+import java.io.*;
 import java.nio.ByteBuffer;
 import java.nio.MappedByteBuffer;
-import java.nio.channels.ClosedChannelException;
-import java.nio.channels.FileChannel;
-import java.nio.channels.FileLock;
-import java.nio.channels.NonReadableChannelException;
-import java.nio.channels.NonWritableChannelException;
-import java.nio.channels.ReadableByteChannel;
-import java.nio.channels.WritableByteChannel;
+import java.nio.channels.*;
 
 /**
  * This file is not user visible !
@@ -61,33 +54,22 @@
  * Upon a Input/Output/RandomAccessFile object.
  */
 
-public final class FileChannelImpl extends FileChannel
+public class FileChannelImpl extends FileChannel
 {
+  int mode;
   // These are WHENCE values for seek.
-//   public static final int SET = 0;
-//   public static final int CUR = 1;
+  static final int SET = 0;
+  static final int CUR = 1;
 
   // These are mode values for open().
-  public static final int READ   = 1;
-  public static final int WRITE  = 2;
-  public static final int APPEND = 4;
+  static final int READ   = 1;
+  static final int WRITE  = 2;
+  static final int APPEND = 4;
 
   // EXCL is used only when making a temp file.
-  public static final int EXCL   = 8;
-  public static final int SYNC   = 16;
-  public static final int DSYNC  = 32;
-
-  private static native void init();
-
-  static
-  {
-    if (Configuration.INIT_LOAD_LIBRARY)
-      {
-        System.loadLibrary("javanio");
-      }
-    
-    init();
-  }
+  static final int EXCL   = 8;
+  static final int SYNC   = 16;
+  static final int DSYNC  = 32;
 
   /**
    * This is the actual native file descriptor value
@@ -99,7 +81,8 @@
   // efficient way to accomplish that.
   private int fd = -1;
 
-  private int mode;
+  int length;
+  private long pos;
 
   public FileChannelImpl ()
   {
@@ -112,12 +95,8 @@
     this.mode = mode;
   }
 
-  /* Used by init() (native code) */
-  private FileChannelImpl (int fd, int mode)
-  {
-    this.fd = fd;
-    this.mode = mode;
-  }
+  private static native void init();
+  static { init (); }
 
   public static FileChannelImpl in;
   public static FileChannelImpl out;
@@ -125,12 +104,19 @@
 
   private native int open (String path, int mode) throws FileNotFoundException;
 
-  public native int available () throws IOException;
-  private native long implPosition () throws IOException;
-  private native void seek (long newPosition) throws IOException;
-  private native void implTruncate (long size) throws IOException;
+  /** Attach to an already-opened file.  */
+  public FileChannelImpl (int desc, int mode)
+  {
+    fd = desc;
+    this.mode = mode;
+  }
+
+  native int available () throws IOException;
+  private native long implPosition ();
+  private native void seek (long newPosition);
+  private native void implTruncate (long size);
   
-  public native void unlock (long pos, long len) throws IOException;
+  public native void unlock (long pos, long len);
 
   public native long size () throws IOException;
     
@@ -138,15 +124,7 @@
 
   public int read (ByteBuffer dst) throws IOException
   {
-    int result;
-    byte[] buffer = new byte [dst.remaining ()];
-    
-    result = read (buffer, 0, buffer.length);
-
-    if (result > 0)
-      dst.put (buffer, 0, result);
-
-    return result;
+    return implRead (dst);
   }
 
   public int read (ByteBuffer dst, long position)
@@ -156,12 +134,25 @@
       throw new IllegalArgumentException ();
     long oldPosition = implPosition ();
     position (position);
-    int result = read(dst);
+    int result = implRead (dst);
     position (oldPosition);
     
     return result;
   }
 
+  private int implRead (ByteBuffer dst) throws IOException
+  {
+    int result;
+    byte[] buffer = new byte [dst.remaining ()];
+    
+    result = read (buffer, 0, buffer.length);
+
+    if (result > 0)
+      dst.put (buffer, 0, result);
+
+    return result;
+  }
+  
   public native int read ()
     throws IOException;
 
@@ -183,20 +174,7 @@
 
   public int write (ByteBuffer src) throws IOException
   {
-    int len = src.remaining ();
-    if (src.hasArray())
-      {
-	byte[] buffer = src.array();
-	write(buffer, src.arrayOffset() + src.position(), len);
-      }
-    else
-      {
-	// Use a more efficient native method! FIXME!
-	byte[] buffer = new byte [len];
-    	src.get (buffer, 0, len);
-	write (buffer, 0, len);
-      }
-    return len;
+    return implWrite (src);
   }
     
   public int write (ByteBuffer src, long position)
@@ -216,12 +194,30 @@
 
     oldPosition = implPosition ();
     seek (position);
-    result = write(src);
+    result = implWrite (src);
     seek (oldPosition);
     
     return result;
   }
 
+  private int implWrite (ByteBuffer src) throws IOException
+  {
+    int len = src.remaining ();
+    if (src.hasArray())
+      {
+	byte[] buffer = src.array();
+	write(buffer, src.arrayOffset() + src.position(), len);
+      }
+    else
+      {
+	// Use a more efficient native method! FIXME!
+	byte[] buffer = new byte [len];
+    	src.get (buffer, 0, len);
+	write (buffer, 0, len);
+      }
+    return len;
+  }
+  
   public native void write (byte[] buffer, int offset, int length)
     throws IOException;
   
@@ -354,7 +350,7 @@
    * Otherwise return false.
    */
   private native boolean lock(long position, long size,
-			      boolean shared, boolean wait) throws IOException;
+			      boolean shared, boolean wait);
   
   public FileLock lock (long position, long size, boolean shared)
     throws IOException
