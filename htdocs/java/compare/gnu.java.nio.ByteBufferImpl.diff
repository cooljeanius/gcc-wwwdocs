--- /home/tromey/gnu/Nightly/classpath/classpath/gnu/java/nio/ByteBufferImpl.java	Tue Dec  3 06:23:51 2002
+++ gnu/java/nio/ByteBufferImpl.java	Thu Feb 20 02:17:57 2003
@@ -43,37 +43,35 @@
 import java.nio.FloatBuffer;
 import java.nio.IntBuffer;
 import java.nio.LongBuffer;
+import java.nio.ReadOnlyBufferException;
 import java.nio.ShortBuffer;
 
+/**
+ * This is a Heap memory implementation
+ */
 public final class ByteBufferImpl extends ByteBuffer
 {
-  private byte[] backing_buffer;
-  private int array_offset;
-  private boolean ro;
-
+  private boolean readOnly;
+  
   public ByteBufferImpl (int cap, int off, int lim)
   {
-    this.cap = cap;
-    limit (lim);
-    position (off);
-    this.backing_buffer = new byte[cap];
+    super (cap, lim, off, 0);
+    this.backing_buffer = new byte [cap];
+    readOnly = false;
   }
 
-  public ByteBufferImpl (byte[] array, int off, int lim)
+  public ByteBufferImpl (byte[] array, int offset, int length)
   {
-    this.cap = array.length;
-    limit (lim);
-    position (off);
+    super (array.length, length, offset, 0);
     this.backing_buffer = array;
+    readOnly = false;
   }
 
   public ByteBufferImpl (ByteBufferImpl copy)
   {
-    this.cap = copy.capacity ();
-    limit (copy.limit ());
-    position (copy.position ());
-    ro = copy.ro;
+    super (copy.capacity (), copy.limit (), copy.position (), 0);
     backing_buffer = copy.backing_buffer;
+    readOnly = copy.isReadOnly ();
   }
 
   void inc_pos (int toAdd)
@@ -81,17 +79,19 @@
     position (position () + toAdd);
   }
 
-  private static native byte[] nio_cast (byte[] copy);
-  private static native byte[] nio_cast (char[] copy);
-  private static native byte[] nio_cast (short[] copy);
-  private static native byte[] nio_cast (long[] copy);
-  private static native byte[] nio_cast (int[] copy);
-  private static native byte[] nio_cast (float[] copy);
-  private static native byte[] nio_cast (double[] copy);
+  private static native byte[] nio_cast(byte[]copy);
+  private static native byte[] nio_cast(char[]copy);
+  private static native byte[] nio_cast(short[]copy);
+  private static native byte[] nio_cast(long[]copy);
+  private static native byte[] nio_cast(int[]copy);
+  private static native byte[] nio_cast(float[]copy);
+  private static native byte[] nio_cast(double[]copy);
 
   ByteBufferImpl (byte[] copy)
   {
+    super (copy.length, copy.length, 0, 0);
     this.backing_buffer = copy != null ? nio_cast (copy) : null;
+    readOnly = false;
   }
 
   private static native byte nio_get_Byte (ByteBufferImpl b, int index, int limit);
@@ -107,7 +107,9 @@
 
   ByteBufferImpl (char[] copy)
   {
+    super (copy.length * 2, copy.length * 2, 0, 0);
     this.backing_buffer = copy != null ? nio_cast (copy) : null;
+    readOnly = false;
   }
 
   private static native char nio_get_Char (ByteBufferImpl b, int index, int limit);
@@ -117,13 +119,15 @@
   public CharBuffer asCharBuffer ()
   {
     CharBufferImpl res = new CharBufferImpl (backing_buffer);
-    res.limit((limit()*2)/1);
+    res.limit ((limit () * 2) / 1);
     return res;
   }
 
   ByteBufferImpl (short[] copy)
   {
+    super (copy.length, copy.length, 0, 0);
     this.backing_buffer = copy != null ? nio_cast (copy) : null;
+    readOnly = false;
   }
   
   private static native short nio_get_Short (ByteBufferImpl b, int index, int limit);
@@ -139,7 +143,9 @@
 
   ByteBufferImpl (int[] copy)
   {
+    super (copy.length * 4, copy.length * 4, 0, 0);
     this.backing_buffer = copy != null ? nio_cast(copy) : null;
+    readOnly = false;
   }
   
   private static native int nio_get_Int (ByteBufferImpl b, int index, int limit);
@@ -155,7 +161,9 @@
 
   ByteBufferImpl (long[] copy)
   {
+    super (copy.length * 8, copy.length * 8, 0, 0);
     this.backing_buffer = copy != null ? nio_cast (copy) : null;
+    readOnly = false;
   }
   
   private static native long nio_get_Long (ByteBufferImpl b, int index, int limit);
@@ -171,7 +179,9 @@
 
   ByteBufferImpl (float[] copy)
   {
+    super (copy.length * 4, copy.length * 4, 0, 0);
     this.backing_buffer = copy != null ? nio_cast (copy) : null;
+    readOnly = false;
   }
   
   private static native float nio_get_Float (ByteBufferImpl b, int index, int limit);
@@ -187,7 +197,9 @@
 
   ByteBufferImpl (double[] copy)
   {
+    super (copy.length * 8, copy.length * 8, 0, 0);
     this.backing_buffer = copy != null ? nio_cast (copy) : null;
+    readOnly = false;
   }
   
   private static native double nio_get_Double (ByteBufferImpl b, int index, int limit);
@@ -203,14 +215,12 @@
 
   public boolean isReadOnly()
   {
-    return ro;
+    return readOnly;
   }
   
   public ByteBuffer slice()
   {
-    ByteBufferImpl A = new ByteBufferImpl(this);
-    A.array_offset = position();
-    return A;
+    return new ByteBufferImpl(this);
   }
 
   public ByteBuffer duplicate()
@@ -221,7 +231,7 @@
   public ByteBuffer asReadOnlyBuffer()
   {
     ByteBufferImpl a = new ByteBufferImpl(this);
-    a.ro = true;
+    a.readOnly = true;
     return a;
   }
 
@@ -232,7 +242,7 @@
 
   public boolean isDirect()
   {
-    return backing_buffer != null;
+    return false;
   }
   
   final public byte get()
@@ -244,6 +254,9 @@
   
   final public ByteBuffer put(byte b)
   {
+    if (readOnly)
+      throw new ReadOnlyBufferException ();
+    
     backing_buffer[position()] = b;
     position(position()+1);
     return this;
@@ -256,14 +269,201 @@
   
   final public ByteBuffer put(int index, byte b)
   {
+    if (readOnly)
+      throw new ReadOnlyBufferException ();
+    
     backing_buffer[index] = b;
     return this;
   }
   
-  final public char getChar() { char a = nio_get_Char(this, position(), limit()); inc_pos(2); return a; } final public ByteBuffer putChar(char value) { nio_put_Char(this, position(), limit(), value); inc_pos(2); return this; } final public char getChar(int index) { char a = nio_get_Char(this, index, limit()); return a; } final public ByteBuffer putChar(int index, char value) { nio_put_Char(this, index, limit(), value); return this; };
-  final public short getShort() { short a = nio_get_Short(this, position(), limit()); inc_pos(2); return a; } final public ByteBuffer putShort(short value) { nio_put_Short(this, position(), limit(), value); inc_pos(2); return this; } final public short getShort(int index) { short a = nio_get_Short(this, index, limit()); return a; } final public ByteBuffer putShort(int index, short value) { nio_put_Short(this, index, limit(), value); return this; };
-  final public int getInt() { int a = nio_get_Int(this, position(), limit()); inc_pos(4); return a; } final public ByteBuffer putInt(int value) { nio_put_Int(this, position(), limit(), value); inc_pos(4); return this; } final public int getInt(int index) { int a = nio_get_Int(this, index, limit()); return a; } final public ByteBuffer putInt(int index, int value) { nio_put_Int(this, index, limit(), value); return this; };
-  final public long getLong() { long a = nio_get_Long(this, position(), limit()); inc_pos(8); return a; } final public ByteBuffer putLong(long value) { nio_put_Long(this, position(), limit(), value); inc_pos(8); return this; } final public long getLong(int index) { long a = nio_get_Long(this, index, limit()); return a; } final public ByteBuffer putLong(int index, long value) { nio_put_Long(this, index, limit(), value); return this; };
-  final public float getFloat() { float a = nio_get_Float(this, position(), limit()); inc_pos(4); return a; } final public ByteBuffer putFloat(float value) { nio_put_Float(this, position(), limit(), value); inc_pos(4); return this; } final public float getFloat(int index) { float a = nio_get_Float(this, index, limit()); return a; } final public ByteBuffer putFloat(int index, float value) { nio_put_Float(this, index, limit(), value); return this; };
-  final public double getDouble() { double a = nio_get_Double(this, position(), limit()); inc_pos(8); return a; } final public ByteBuffer putDouble(double value) { nio_put_Double(this, position(), limit(), value); inc_pos(8); return this; } final public double getDouble(int index) { double a = nio_get_Double(this, index, limit()); return a; } final public ByteBuffer putDouble(int index, double value) { nio_put_Double(this, index, limit(), value); return this; };
+  final public char getChar ()
+  {
+    char a = nio_get_Char (this, position (), limit ());
+    inc_pos (2);
+    return a;
+  }
+  
+  final public ByteBuffer putChar (char value)
+  {
+    if (readOnly)
+      throw new ReadOnlyBufferException ();
+    
+    nio_put_Char (this, position (), limit (), value);
+    inc_pos (2);
+    return this;
+  }
+  
+  final public char getChar (int index)
+  {
+    char a = nio_get_Char (this, index, limit ());
+    return a;
+  }
+  
+  final public ByteBuffer putChar (int index, char value)
+  {
+    if (readOnly)
+      throw new ReadOnlyBufferException ();
+    
+    nio_put_Char (this, index, limit (), value);
+    return this;
+  }
+
+  final public short getShort ()
+  {
+    short a = nio_get_Short (this, position (), limit ());
+    inc_pos (2);
+    return a;
+  }
+  
+  final public ByteBuffer putShort (short value)
+  {
+    if (readOnly)
+      throw new ReadOnlyBufferException ();
+    
+    nio_put_Short (this, position (), limit(), value);
+    inc_pos (2);
+    return this;
+  }
+  
+  final public short getShort (int index)
+  {
+    short a = nio_get_Short (this, index, limit ());
+    return a;
+  }
+  
+  final public ByteBuffer putShort (int index, short value)
+  {
+    if (readOnly)
+      throw new ReadOnlyBufferException ();
+    
+    nio_put_Short (this, index, limit (), value);
+    return this;
+  }
+
+  final public int getInt ()
+  {
+    int a = nio_get_Int (this, position (), limit ());
+    inc_pos (4);
+    return a;
+  }
+  
+  final public ByteBuffer putInt (int value)
+  {
+    if (readOnly)
+      throw new ReadOnlyBufferException ();
+    
+    nio_put_Int (this, position (), limit , value);
+    inc_pos (4);
+    return this;
+  }
+  
+  final public int getInt (int index)
+  {
+    int a = nio_get_Int (this, index, limit ());
+    return a;
+  }
+  
+  final public ByteBuffer putInt (int index, int value)
+  {
+    if (readOnly)
+      throw new ReadOnlyBufferException ();
+    
+    nio_put_Int(this, index, limit (), value);
+    return this;
+  }
+
+  final public long getLong ()
+  {
+    long a = nio_get_Long (this, position (), limit ());
+    inc_pos (8);
+    return a;
+  }
+  
+  final public ByteBuffer putLong (long value)
+  {
+    if (readOnly)
+      throw new ReadOnlyBufferException ();
+    
+    nio_put_Long (this, position (), limit (), value);
+    inc_pos (8);
+    return this;
+  }
+  
+  final public long getLong (int index)
+  {
+    long a = nio_get_Long (this, index, limit ());
+    return a;
+  }
+  
+  final public ByteBuffer putLong (int index, long value)
+  {
+    if (readOnly)
+      throw new ReadOnlyBufferException ();
+    
+    nio_put_Long (this, index, limit (), value);
+    return this;
+  }
+
+  final public float getFloat ()
+  {
+    float a = nio_get_Float (this, position (), limit ());
+    inc_pos (4);
+    return a;
+  }
+  
+  final public ByteBuffer putFloat (float value)
+  {
+    if (readOnly)
+      throw new ReadOnlyBufferException ();
+    
+    nio_put_Float (this, position (), limit (), value);
+    inc_pos (4);
+    return this;
+  }
+  
+  final public float getFloat (int index)
+  {
+    float a = nio_get_Float (this, index, limit ());
+    return a;
+  }
+
+  final public ByteBuffer putFloat (int index, float value)
+  {
+    if (readOnly)
+      throw new ReadOnlyBufferException ();
+    
+    nio_put_Float (this, index, limit(), value);
+    return this;
+  }
+
+  final public double getDouble ()
+  {
+    double a = nio_get_Double (this, position (), limit ());
+    inc_pos (8);
+    return a;
+  }
+
+  final public ByteBuffer putDouble (double value)
+  {
+    if (readOnly)
+      throw new ReadOnlyBufferException ();
+    
+    nio_put_Double (this, position(), limit (), value);
+    inc_pos (8);
+    return this;
+  }
+  
+  final public double getDouble (int index)
+  {
+    return nio_get_Double (this, index, limit ());
+  }
+  
+  final public ByteBuffer putDouble (int index, double value)
+  {
+    if (readOnly)
+      throw new ReadOnlyBufferException ();
+    
+    nio_put_Double (this, index, limit (), value);
+    return this;
+  }
 }
