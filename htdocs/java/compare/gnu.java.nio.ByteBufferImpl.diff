--- /home/tromey/gnu/Nightly/classpath/classpath/gnu/java/nio/ByteBufferImpl.java	2003-03-11 10:27:46.000000000 -0700
+++ gnu/java/nio/ByteBufferImpl.java	2003-05-09 02:26:56.000000000 -0600
@@ -79,138 +79,58 @@
     position (position () + toAdd);
   }
 
-  private static native byte[] nio_cast(byte[]copy);
-  private static native byte[] nio_cast(char[]copy);
-  private static native byte[] nio_cast(short[]copy);
-  private static native byte[] nio_cast(long[]copy);
-  private static native byte[] nio_cast(int[]copy);
-  private static native byte[] nio_cast(float[]copy);
-  private static native byte[] nio_cast(double[]copy);
-
-  ByteBufferImpl (byte[] copy)
-  {
-    super (copy.length, copy.length, 0, 0);
-    this.backing_buffer = copy != null ? nio_cast (copy) : null;
-    readOnly = false;
-  }
-
-  private static native byte nio_get_Byte (ByteBufferImpl b, int index, int limit);
-  
-  private static native void nio_put_Byte (ByteBufferImpl b, int index, int limit, byte value);
-  
-  public ByteBuffer asByteBuffer ()
-  {
-    ByteBufferImpl res = new ByteBufferImpl (backing_buffer);
-    res.limit ((limit () * 1) / 1);
-    return res;
-  }
-
-  ByteBufferImpl (char[] copy)
-  {
-    super (copy.length * 2, copy.length * 2, 0, 0);
-    this.backing_buffer = copy != null ? nio_cast (copy) : null;
-    readOnly = false;
-  }
-
   private static native char nio_get_Char (ByteBufferImpl b, int index, int limit);
 
   private static native void nio_put_Char (ByteBufferImpl b, int index, int limit, char value);
 
   public CharBuffer asCharBuffer ()
   {
-    CharBufferImpl res = new CharBufferImpl (backing_buffer);
-    res.limit ((limit () * 2) / 1);
-    return res;
+    throw new Error ("Not implemented");
   }
 
-  ByteBufferImpl (short[] copy)
-  {
-    super (copy.length, copy.length, 0, 0);
-    this.backing_buffer = copy != null ? nio_cast (copy) : null;
-    readOnly = false;
-  }
-  
   private static native short nio_get_Short (ByteBufferImpl b, int index, int limit);
   
   private static native void nio_put_Short (ByteBufferImpl b, int index, int limit, short value);
   
   public ShortBuffer asShortBuffer ()
   {
-    ShortBufferImpl res = new ShortBufferImpl (backing_buffer);
-    res.limit ((limit () * 2) / 1);
-    return res;
+    throw new Error ("Not implemented");
   }
 
-  ByteBufferImpl (int[] copy)
-  {
-    super (copy.length * 4, copy.length * 4, 0, 0);
-    this.backing_buffer = copy != null ? nio_cast(copy) : null;
-    readOnly = false;
-  }
-  
   private static native int nio_get_Int (ByteBufferImpl b, int index, int limit);
   
   private static native void nio_put_Int (ByteBufferImpl b, int index, int limit, int value);
   
   public IntBuffer asIntBuffer ()
   {
-    IntBufferImpl res = new IntBufferImpl (backing_buffer);
-    res.limit ((limit() * 4) / 1);
-    return res;
+    throw new Error ("Not implemented");
   }
 
-  ByteBufferImpl (long[] copy)
-  {
-    super (copy.length * 8, copy.length * 8, 0, 0);
-    this.backing_buffer = copy != null ? nio_cast (copy) : null;
-    readOnly = false;
-  }
-  
   private static native long nio_get_Long (ByteBufferImpl b, int index, int limit);
   
   private static native void nio_put_Long (ByteBufferImpl b, int index, int limit, long value);
   
   public LongBuffer asLongBuffer ()
   {
-    LongBufferImpl res = new LongBufferImpl (backing_buffer);
-    res.limit ((limit() * 8) / 1);
-    return res;
+    throw new Error ("Not implemented");
   }
 
-  ByteBufferImpl (float[] copy)
-  {
-    super (copy.length * 4, copy.length * 4, 0, 0);
-    this.backing_buffer = copy != null ? nio_cast (copy) : null;
-    readOnly = false;
-  }
-  
   private static native float nio_get_Float (ByteBufferImpl b, int index, int limit);
   
   private static native void nio_put_Float (ByteBufferImpl b, int index, int limit, float value);
   
   public FloatBuffer asFloatBuffer ()
   {
-    FloatBufferImpl res = new FloatBufferImpl (backing_buffer);
-    res.limit ((limit() * 4) / 1);
-    return res;
+    throw new Error ("Not implemented");
   }
 
-  ByteBufferImpl (double[] copy)
-  {
-    super (copy.length * 8, copy.length * 8, 0, 0);
-    this.backing_buffer = copy != null ? nio_cast (copy) : null;
-    readOnly = false;
-  }
-  
   private static native double nio_get_Double (ByteBufferImpl b, int index, int limit);
   
   private static native void nio_put_Double (ByteBufferImpl b, int index, int limit, double value);
   
   public DoubleBuffer asDoubleBuffer ()
   {
-    DoubleBufferImpl res = new DoubleBufferImpl (backing_buffer);
-    res.limit ((limit () * 8) / 1);
-    return res;
+    throw new Error ("Not implemented");
   }
 
   public boolean isReadOnly()
