--- /home/tromey/gnu/egcs/classpath/classpath/java/security/GuardedObject.java	Wed Mar 22 12:26:19 2000
+++ java/security/GuardedObject.java	Wed Apr 25 09:45:12 2001
@@ -7,7 +7,7 @@
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2, or (at your option)
 any later version.
- 
+
 GNU Classpath is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
@@ -24,81 +24,61 @@
 This exception does not however invalidate any other reasons why the
 executable file might be covered by the GNU General Public License. */
 
-
 package java.security;
 
 import java.io.Serializable;
 
 /**
-  * This class is an object that is guarded by a <code>Guard</code> object.
-  * The object that is being guarded is retrieved by a call to the only 
-  * method in this class - <code>getObject</code>.  That method returns the
-  * guarded <code>Object</code> after first checking with the 
-  * <code>Guard</code>.  If the <code>Guard</code> disallows access, an
-  * exception will be thrown.
-  *
-  * @version 0.0
-  *
-  * @author Aaron M. Renn (arenn@urbanophile.com)
-  */
-public class GuardedObject implements Serializable
-{
-
-/*************************************************************************/
-
-/*
- * Instance Variables
+ * This class is an object that is guarded by a <code>Guard</code> object.
+ * The object that is being guarded is retrieved by a call to the only 
+ * method in this class - <code>getObject</code>.  That method returns the
+ * guarded <code>Object</code> after first checking with the 
+ * <code>Guard</code>.  If the <code>Guard</code> disallows access, an
+ * exception will be thrown.
+ *
+ * @version 0.0
+ *
+ * @author Aaron M. Renn (arenn@urbanophile.com)
  */
-
-/**
-  * This is the Guard that is protecting the object.
-  */
-private Guard guard;
-
-/**
-  * This is the object that is being guarded.
-  */
-private Object object;
-
-/*************************************************************************/
-
-/*
- * Constructors
- */
-
-/**
-  * This method initializes a new instance of <code>GuardedObject</code>
-  * that protects the specified <code>Object</code> using the specified
-  * <code>Guard</code>
-  *
-  * @param object The <code>Object</code> to guard
-  * @param guard The <code>Guard</code> that is protecting the object.
-  */
-public
-GuardedObject(Object object, Guard guard)
-{
-  this.object = object;
-  this.guard = guard;
-}
-
-/*************************************************************************/
-
-/**
-  * This method first call the <code>checkGuard</code> method on the 
-  * <code>Guard</code> object protecting the guarded object.  If the 
-  * <code>Guard</code> disallows access, an exception is thrown, otherwise
-  * the <code>Object</code> is returned.
-  *
-  * @return The object being guarded
-  *
-  * @exception SecurityException If the <code>Guard</code> disallows access to the object.
-  */
-public Object
-getObject() throws SecurityException
+public class GuardedObject implements Serializable
 {
-  guard.checkGuard(object);
-  return(object);
+  /**
+   * This is the Guard that is protecting the object.
+   */
+  private Guard guard;
+
+  /**
+   * This is the object that is being guarded.
+   */
+  private Object object;
+
+  /**
+   * This method initializes a new instance of <code>GuardedObject</code>
+   * that protects the specified <code>Object</code> using the specified
+   * <code>Guard</code>
+   *
+   * @param object The <code>Object</code> to guard
+   * @param guard The <code>Guard</code> that is protecting the object.
+   */
+  public GuardedObject(Object object, Guard guard)
+  {
+    this.object = object;
+    this.guard = guard;
+  }
+
+  /**
+   * This method first call the <code>checkGuard</code> method on the 
+   * <code>Guard</code> object protecting the guarded object.  If the 
+   * <code>Guard</code> disallows access, an exception is thrown, otherwise
+   * the <code>Object</code> is returned.
+   *
+   * @return The object being guarded
+   *
+   * @exception SecurityException If the <code>Guard</code> disallows access to the object.
+   */
+  public Object getObject() throws SecurityException
+  {
+    guard.checkGuard(object);
+    return (object);
+  }
 }
-
-} // class GuardedObject
-
