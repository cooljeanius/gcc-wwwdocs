--- /home/tromey/gnu/classpath/classpath/java/awt/color/ColorSpace.java	Sat Nov  9 16:09:30 2002
+++ java/awt/color/ColorSpace.java	Tue Jan 22 15:40:06 2002
@@ -1,5 +1,4 @@
-/* ColorSpace.java -- transforms between color spaces
-   Copyright (C) 2000, 2002 Free Software Foundation
+/* Copyright (C) 2000, 2002  Free Software Foundation
 
 This file is part of GNU Classpath.
 
@@ -35,36 +34,25 @@
 obligated to do so.  If you do not wish to do so, delete this
 exception statement from your version. */
 
-
 package java.awt.color;
 
-import java.io.Serializable;
-
 /**
- * NEEDS DOCUMENTATION
- *
  * @author Rolf W. Rasmussen <rolfwr@ii.uib.no>
- * @since 1.2
  */
 public abstract class ColorSpace
 {
-  /**
-   * Compatible with JDK 1.2+.
-   */
-  private static final long serialVersionUID = -409452704308689724L;
-
-  public static final int TYPE_XYZ = 0;
-  public static final int TYPE_Lab = 1;
-  public static final int TYPE_Luv = 2;
+  public static final int TYPE_XYZ   = 0;
+  public static final int TYPE_Lab   = 1;
+  public static final int TYPE_Luv   = 2;
   public static final int TYPE_YCbCr = 3;
-  public static final int TYPE_Yxy = 4;
-  public static final int TYPE_RGB = 5;
-  public static final int TYPE_GRAY = 6;
-  public static final int TYPE_HSV = 7;
-  public static final int TYPE_HLS = 8;
-  public static final int TYPE_CMYK = 9;
+  public static final int TYPE_Yxy   = 4;
+  public static final int TYPE_RGB   = 5;
+  public static final int TYPE_GRAY  = 6;
+  public static final int TYPE_HSV   = 7;
+  public static final int TYPE_HLS   = 8;
+  public static final int TYPE_CMYK  = 9;
   // mysterious gap in the enumeration sequenece
-  public static final int TYPE_CMY = 11;
+  public static final int TYPE_CMY  = 11;
   public static final int TYPE_2CLR = 12;
   public static final int TYPE_3CLR = 13;
   public static final int TYPE_4CLR = 14;
@@ -79,64 +67,54 @@
   public static final int TYPE_DCLR = 23;
   public static final int TYPE_ECLR = 24;
   public static final int TYPE_FCLR = 25;
-
-  public static final int CS_sRGB = 1000;
+  
+  public static final int CS_sRGB       = 1000;
+  public static final int CS_CIEXYZ     = 1001;
+  public static final int CS_PYCC       = 1002;
+  public static final int CS_GRAY       = 1003;
   public static final int CS_LINEAR_RGB = 1004;
-  public static final int CS_CIEXYZ = 1001;
-  public static final int CS_PYCC = 1002;
-  public static final int CS_GRAY = 1003;
-
-  private static final int CS_BASE = CS_sRGB;
-  private static final int CS_END = CS_LINEAR_RGB + 1;
+  
+  private static final int CS_BASE  = CS_sRGB;
+  private static final int CS_END   = CS_LINEAR_RGB+1;
   private static final int CS_COUNT = CS_END - CS_BASE;
-
+  
   // Instances are lazily instantiated
   private static final ColorSpace[] INSTANCES = new ColorSpace[CS_COUNT];
 
-  /**
-   * @serial
-   */
-  // Visible in subclass.
-  final int type;
-
-  /**
-   * @serial
-   */
-  // Visible in subclass.
-  final int numComponents;
-
+  private int type;
+  private int numcomponents;
   protected ColorSpace(int type, int numcomponents)
   {
     this.type = type;
-    numComponents = numcomponents;
+    this.numcomponents = numcomponents;
   }
-
+	
   public static ColorSpace getInstance(int colorspace)
   {
     if ((colorspace >= CS_BASE) && (colorspace < CS_END))
       {
-        int instanceIndex = colorspace - CS_BASE;
-        if (INSTANCES[instanceIndex] == null)
-          {
-            ICC_Profile profile = new ICC_Profile(colorspace);
-            INSTANCES[instanceIndex] = new ICC_ColorSpace(profile);
-          }
-        return INSTANCES[instanceIndex];
+	int instanceIndex = colorspace - CS_BASE;
+	if (INSTANCES[instanceIndex] == null)
+	  {
+	    ICC_Profile profile = new ICC_Profile(colorspace);
+	    INSTANCES[instanceIndex] = new ICC_ColorSpace(profile);
+	  }
+	return INSTANCES[instanceIndex];
       }
     throw new IllegalArgumentException("unknown/unsupported colorspace");
   }
-
+  
   public boolean isCS_sRGB()
   {
     return false;
   }
 
   public abstract float[] toRGB(float[] colorvalue);
-
+  
   public abstract float[] fromRGB(float[] rgbvalue);
-
+  
   public abstract float[] toCIEXYZ(float[] colorvalue);
-
+  
   public abstract float[] fromCIEXYZ(float[] colorvalue);
 
   public int getType()
@@ -146,31 +124,16 @@
 
   public int getNumComponents()
   {
-    return numComponents;
+    return numcomponents;
   }
-
+  
   public String getName(int idx)
   {
     return "type " + type;
   }
-
-  /**
-   * @since 1.4
-   */
-  public float getMinValue(int idx)
-  {
-    if (idx < 0 || idx >= numComponents)
-      throw new IllegalArgumentException();
-    return 0;
-  }
-
-  /**
-   * @since 1.4
-   */
-  public float getMaxValue(int idx)
-  {
-    if (idx < 0 || idx >= numComponents)
-      throw new IllegalArgumentException();
-    return 1;
+  
+  public String toString()
+  {
+    return getClass().getName() + "[type=" + type + "]";
   }
-} // class ColorSpace
+}
