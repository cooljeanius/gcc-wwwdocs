--- /home/tromey/gnu/Nightly/classpath/classpath/java/awt/GridBagLayout.java	2003-07-02 02:19:07.000000000 -0600
+++ java/awt/GridBagLayout.java	2002-12-10 19:20:24.000000000 -0700
@@ -1,5 +1,5 @@
 /* GridBagLayout - Layout manager for components according to GridBagConstraints
-   Copyright (C) 2002, 2003 Free Software Foundation, Inc.
+   Copyright (C) 2002 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -35,395 +35,64 @@
 obligated to do so.  If you do not wish to do so, delete this
 exception statement from your version. */
 
-
 package java.awt;
 
 import java.io.Serializable;
-import java.util.Hashtable;
 
 /**
- * @author Michael Koch <konqueror@gmx.de>
+ * Stub implementation.
  */
 public class GridBagLayout
   implements Serializable, LayoutManager2
 {
-  private static final long serialVersionUID = 8838754796412211005L;
-
-  protected static final int MINSIZE = 1;
-  protected static final int PREFERREDSIZE = 2;
-  protected static final int MAXGRIDSIZE = 512;
-
-  protected Hashtable comptable;
-  protected GridBagLayoutInfo layoutInfo;
-  protected GridBagConstraints defaultConstraints;
-
-  public double[] colWeights;
-  public int[] colWidths;
-  public double[] rowWeights;
-  public int[] rowHeights;
-
-  public GridBagLayout ()
-  {
-    this.comptable = new Hashtable();
-    this.defaultConstraints= new GridBagConstraints();
-  }
-
-  /**
-   * Helper method to calc the sum of all elements in an int array.
-   */
-  private int sumIntArray (int[] array)
-  {
-    int result = 0;
-
-    for (int i = 0; i < array.length; i++)
-       result += array [i];
-
-    return result;
-  }
-
-  /**
-   * Helper method to calc the sum of all elements in an double array.
-   */
-  private double sumDoubleArray (double[] array)
-  {
-    double result = 0;
-
-    for (int i = 0; i < array.length; i++)
-       result += array [i];
-
-    return result;
-  }
-
-  public void addLayoutComponent (String name, Component component)
-  {
-    // do nothing here.
-  }
-
-  public void removeLayoutComponent (Component component)
-  {
-    // do nothing here
-  }
-
-  public void addLayoutComponent (Component component, Object constraints)
-  {
-    if (constraints == null)
-      return;
-
-    if (!(constraints instanceof GridBagConstraints))
-      throw new IllegalArgumentException();
-
-    setConstraints (component, (GridBagConstraints) constraints);
-  }
-
-  public Dimension preferredLayoutSize (Container parent)
-  {
-    if (parent == null)
-      return new Dimension (0, 0);
-    
-    GridBagLayoutInfo li = getLayoutInfo (parent, PREFERREDSIZE);
-    return getMinSize (parent, li);
-  }
-
-  public Dimension minimumLayoutSize (Container parent)
-  {
-    if (parent == null)
-      return new Dimension (0, 0);
-    
-    GridBagLayoutInfo li = getLayoutInfo (parent, MINSIZE);
-    return getMinSize (parent, li);
-  }
+  static final long serialVersionUID = 8838754796412211005L;
 
-  public Dimension maximumLayoutSize (Container target)
+  public void addLayoutComponent(String name, Component component)
   {
-    return new Dimension (Integer.MAX_VALUE, Integer.MAX_VALUE);
   }
 
-  public void layoutContainer (Container parent)
+  public void removeLayoutComponent(Component component)
   {
-    arrangeGrid (parent);
   }
 
-  public float getLayoutAlignmentX (Container target)
+  public Dimension preferredLayoutSize(Container parent)
   {
-    return Component.CENTER_ALIGNMENT;
+    return null;
   }
 
-  public float getLayoutAlignmentY (Container target)
+  public Dimension minimumLayoutSize(Container parent)
   {
-    return Component.CENTER_ALIGNMENT;
+    return null;
   }
 
-  public void invalidateLayout (Container target)
+  public void layoutContainer(Container parent)
   {
-    this.layoutInfo = null;
   }
 
-  public void setConstraints (Component component,
-			      GridBagConstraints constraints)
+  public void addLayoutComponent(Component component, Object contraint)
   {
-    GridBagConstraints clone = (GridBagConstraints) constraints.clone();
-
-    if (clone.gridx < 0)
-      clone.gridx = GridBagConstraints.RELATIVE;
-    
-    if (clone.gridy < 0)
-      clone.gridy = GridBagConstraints.RELATIVE;
-
-    if (clone.gridwidth == 0)
-      clone.gridwidth = GridBagConstraints.REMAINDER;
-    else if (clone.gridwidth < 0
-	     && clone.gridwidth != GridBagConstraints.REMAINDER
-	     && clone.gridwidth != GridBagConstraints.RELATIVE)
-      clone.gridwidth = 1;
-    
-    if (clone.gridheight == 0)
-      clone.gridheight = GridBagConstraints.REMAINDER;
-    else if (clone.gridheight < 0
-	     && clone.gridheight != GridBagConstraints.REMAINDER
-	     && clone.gridheight != GridBagConstraints.RELATIVE)
-      clone.gridheight = 1;
-    
-    comptable.put (component, clone);
   }
 
-  public GridBagConstraints getConstraints (Component component)
+  public Dimension maximumLayoutSize(Container target)
   {
-    return (GridBagConstraints) (lookupConstraints (component).clone());
+    return null;
   }
 
-  protected GridBagConstraints lookupConstraints (Component component)
+  public float getLayoutAlignmentX(Container target)
   {
-    GridBagConstraints result = (GridBagConstraints) comptable.get (component);
-
-    if (result == null)
-      {
-	setConstraints (component, defaultConstraints);
-	result = (GridBagConstraints) comptable.get (component);
-      }
-    
-    return result;
-  }
-
-  /**
-   * @since 1.1
-   */
-  public Point getLayoutOrigin ()
-  {
-    if (layoutInfo == null)
-      return new Point (0, 0);
-    
-    return new Point (layoutInfo.pos_x, layoutInfo.pos_y);
-  }
-
-  /**
-   * @since 1.1
-   */
-  public int[][] getLayoutDimensions ()
-  {
-    if (layoutInfo == null)
-      return new int [2][];
-
-    int[][] result = new int [2][];
-    result [0] = new int [layoutInfo.cols];
-    System.arraycopy (layoutInfo.colWidths, 0, result [0], 0, layoutInfo.cols);
-    result [1] = new int [layoutInfo.rows];
-    System.arraycopy (layoutInfo.rowHeights, 0, result [1], 0, layoutInfo.rows);
-    return result;
+    return 0.0f;
   }
 
-  public double[][] getLayoutWeights ()
+  public float getLayoutAlignmentY(Container target)
   {
-    if (layoutInfo == null)
-      return new double [2][];
-      
-    double[][] result = new double [2][];
-    result [0] = new double [layoutInfo.cols];
-    System.arraycopy (layoutInfo.colWeights, 0, result [0], 0, layoutInfo.cols);
-    result [1] = new double [layoutInfo.rows];
-    System.arraycopy (layoutInfo.rowWeights, 0, result [1], 0, layoutInfo.rows);
-    return result;
+    return 0.0f;
   }
 
-  /**
-   * @since 1.1
-   */
-  public Point location (int x, int y)
+  public void invalidateLayout(Container target)
   {
-    if (layoutInfo == null)
-      return new Point (0, 0);
-
-    int col;
-    int row;
-    int pixel_x = layoutInfo.pos_x;
-    int pixel_y = layoutInfo.pos_y;
-
-    for (col = 0; col < layoutInfo.cols; col++)
-      {
-        if (pixel_x < x)
-	  break;
-
-	pixel_x += layoutInfo.colWidths [col];
-      }
-
-    for (row = 0; row < layoutInfo.rows; row++)
-      {
-	if (pixel_y < y)
-	  break;
-
-	pixel_y += layoutInfo.rowHeights [row];
-      }
-
-    return new Point (col, row);
-  }
-
-  /**
-   * Obsolete.
-   */
-  protected void AdjustForGravity (GridBagConstraints gbc, Rectangle rect)
-  {
-    adjustForGravity (gbc, rect);
-  }
-
-  /**
-   * Obsolete.
-   */
-  protected void ArrangeGrid (Container parent)
-  {
-    arrangeGrid (parent);
-  }
-
-  /**
-   * Obsolete.
-   */
-  protected GridBagLayoutInfo GetLayoutInfo (Container parent, int sizeflag)
-  {
-    return getLayoutInfo (parent, sizeflag);
-  }
-
-  /**
-   * Obsolete.
-   */
-  protected Dimension GetMinSize (Container parent, GridBagLayoutInfo info)
-  {
-    return getMinSize (parent, info);
-  }
-
-  /**
-   * @since 1.4
-   */
-  protected Dimension getMinSize (Container parent, GridBagLayoutInfo info)
-  {
-    if (parent == null || info == null)
-      return new Dimension (0, 0);
-
-    Insets insets = parent.getInsets();
-    int width = sumIntArray (info.colWidths) + insets.left + insets.right;
-    int height = sumIntArray (info.rowHeights) + insets.top + insets.bottom;
-    return new Dimension (width, height);
-  }
-
-  private void calcCellSizes (int[] sizes, double[] weights)
-  {
-    int diff = sumIntArray (sizes);
-    
-    if (diff == 0)
-      return;
-    
-    double weight = sumDoubleArray (weights);
-
-    for (int i = 0; i < sizes.length; i++)
-      {
-	sizes [i] += (int) (((double) diff) * weights [i] / weight );
-
-	if (sizes [i] < 0)
-	  sizes [i] = 0;
-      }
-  }
-
-  private void dumpLayoutInfo (GridBagLayoutInfo info)
-  {
-    System.out.println ("GridBagLayoutInfo:");
-    System.out.println ("cols: " + info.cols + ", rows: " + info.rows);
-    System.out.println ("colWiths: " + info.colWidths);
-    System.out.println ("rowHeights: " + info.rowHeights);
-    System.out.println ("colWeights: " + info.colWeights);
-    System.out.println ("rowWeights: " + info.rowWeights);
-  }
-  
-  /**
-   * @since 1.4
-   */
-  protected void arrangeGrid (Container parent)
-  {
-    Insets insets = parent.getInsets();
-    Component[] components = parent.getComponents();
-
-    if (components.length == 0
-	&& (colWidths == null || colWidths.length == 0)
-	&& (rowHeights == null || rowHeights.length == 0))
-      return;
-
-    GridBagLayoutInfo info = getLayoutInfo (parent, PREFERREDSIZE);
-    if (info.cols == 0 && info.rows == 0)
-      return;
-    layoutInfo = info;
-
-    // DEBUG
-    dumpLayoutInfo (layoutInfo);
-    
-    calcCellSizes (layoutInfo.colWidths, layoutInfo.colWeights);
-    calcCellSizes (layoutInfo.rowHeights, layoutInfo.rowWeights);
-    
-    // DEBUG
-    dumpLayoutInfo (layoutInfo);
-    
-    throw new Error ("Not implemented");
-  }
-
-  /**
-   * @since 1.4
-   */
-  protected GridBagLayoutInfo getLayoutInfo (Container parent, int sizeflag)
-  {
-    if (sizeflag != MINSIZE && sizeflag != PREFERREDSIZE)
-      throw new IllegalArgumentException();
-
-    GridBagLayoutInfo info = new GridBagLayoutInfo (0, 0);
-    
-    Component[] components = parent.getComponents();
-    for (int i = 0; i < components.length; i++)
-      {
-	Component component = components [i];
-	
-	// If component is not visible we dont have to care about it.
-	if (!component.isVisible())
-	  continue;
-
-	GridBagConstraints constraints = lookupConstraints (component);
-	
-	int max_x = 1;
-	int max_y = 1;
-	int cur_x = 0;
-
-	
-	
-	// FIXME
-      }
-
-    // FIXME
-    
-    // DEBUG
-    dumpLayoutInfo (info);
-
-    return info;
   }
 
-  /**
-   * @since 1.4
-   */
-  protected void adjustForGravity (GridBagConstraints gbc, Rectangle rect)
+  public void setConstraints(Component comp, GridBagConstraints constraints)
   {
-    // FIXME
-    throw new Error ("Not implemented");
   }
 }
