--- /home/tromey/gnu/Nightly/classpath/classpath/java/security/AlgorithmParameters.java	Sun Mar  9 02:19:35 2003
+++ java/security/AlgorithmParameters.java	Tue Jan 22 16:01:36 2002
@@ -1,5 +1,5 @@
 /* AlgorithmParameters.java --- Algorithm Parameters Implementation Class
-   Copyright (C) 1999, 2003, Free Software Foundation, Inc.
+   Copyright (C) 1999 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -35,49 +35,19 @@
 obligated to do so.  If you do not wish to do so, delete this
 exception statement from your version. */
 
-package java.security;
 
+package java.security;
 import java.security.spec.InvalidParameterSpecException;
 import java.security.spec.AlgorithmParameterSpec;
 import java.io.IOException;
 
 /**
- * <p>This class is used as an opaque representation of cryptographic
- * parameters.</p>
- *
- * <p>An <code>AlgorithmParameters</code> object for managing the parameters
- * for a particular algorithm can be obtained by calling one of the
- * <code>getInstance()</code> factory methods (static methods that return
- * instances of a given class).</p>
- *
- * <p>There are two ways to request such an implementation: by specifying
- * either just an algorithm name, or both an algorithm name and a package
- * provider.</p>
- *
- * <ul>
- *    <li>If just an algorithm name is specified, the system will determine if
- *    there is an AlgorithmParameters implementation for the algorithm requested
- *    available in the environment, and if there is more than one, if there is
- *    a preferred one.</li>
- *    <li>If both an algorithm name and a package provider are specified, the
- *    system will determine if there is an implementation in the package
- *    requested, and throw an exception if there is not.</li>
- * </ul>
- *
- * <p>Once an <code>AlgorithmParameters</code> object is returned, it must be
- * initialized via a call to <code>init()</code>, using an appropriate
- * parameter specification or parameter encoding.</p>
- *
- * <p>A transparent parameter specification is obtained from an
- * <ocde>AlgorithmParameters</code> object via a call to
- * <code>getParameterSpec()</code>, and a byte encoding of the parameters is
- * obtained via a call to <code>getEncoded()</code>.</p>
- *
- * @author Mark Benvenuto
- * @since 1.2
- * @see AlgorithmParameterSpec
- * @see java.security.spec.DSAParameterSpec
- * @see KeyPairGenerator
+   AlgorithmParameters is the Algorithm Parameters class which 
+   provides an interface through which to modify parameters for 
+   classes. This class is used to manage the algorithm parameters.
+
+   @since JDK 1.2
+   @author Mark Benvenuto
  */
 public class AlgorithmParameters
 {
@@ -86,14 +56,14 @@
   private String algorithm;
 
   /**
-   * Creates an <code>AlgorithmParameters</code> object.
-   *
-   * @param paramSpi the delegate.
-   * @param provider the provider.
-   * @param algorithm the algorithm.
+     Creates an instance of AlgorithmParameters
+
+     @param paramSpi A parameters engine to use
+     @param provider A provider to use
+     @param algorithm The algorithm 
    */
   protected AlgorithmParameters(AlgorithmParametersSpi paramSpi,
-                                Provider provider, String algorithm)
+				Provider provider, String algorithm)
   {
     this.paramSpi = paramSpi;
     this.provider = provider;
@@ -101,151 +71,103 @@
   }
 
   /**
-   * Returns the name of the algorithm associated with this parameter object.
-   *
-   * @return the algorithm name.
+     Returns the name of the algorithm used
+
+     @return A string with the name of the algorithm
    */
   public final String getAlgorithm()
   {
     return algorithm;
   }
 
-  /**
-   * <p>Generates a parameter object for the specified algorithm.</p>
-   *
-   * <p>If the default provider package provides an implementation of the
-   * requested algorithm, an instance of <code>AlgorithmParameters</code>
-   * containing that implementation is returned. If the algorithm is not
-   * available in the default package, other packages are searched.</p>
-   *
-   * <p>The returned parameter object must be initialized via a call to
-   * <code>init()</code>, using an appropriate parameter specification or
-   * parameter encoding.</p>
-   *
-   * @param algorithm the name of the algorithm requested.
-   * @return the new parameter object.
-   * @throws NoSuchAlgorithmException if the algorithm is not available in the
-   * environment.
+  /** 
+     Gets an instance of the AlgorithmParameters class representing
+     the specified algorithm parameters. If the algorithm is not 
+     found then, it throws NoSuchAlgorithmException.
+
+     The returned AlgorithmParameters must still be intialized with
+     init().
+
+     @param algorithm the name of algorithm to choose
+     @return a AlgorithmParameters repesenting the desired algorithm
+
+     @throws NoSuchAlgorithmException if the algorithm is not implemented by providers
    */
-  public static AlgorithmParameters getInstance(String algorithm)
-    throws NoSuchAlgorithmException
+  public static AlgorithmParameters getInstance(String algorithm) throws
+    NoSuchAlgorithmException
   {
     Provider[] p = Security.getProviders();
+
     for (int i = 0; i < p.length; i++)
-      try
-        {
-          return getInstance(algorithm, p[i]);
-        }
-      catch (NoSuchAlgorithmException ignored) {}
+      {
+	String classname =
+	  p[i].getProperty("AlgorithmParameters." + algorithm);
+	if (classname != null)
+	  return getInstance(classname, algorithm, p[i]);
+      }
 
     throw new NoSuchAlgorithmException(algorithm);
   }
 
-  /**
-   * <p>Generates a parameter object for the specified algorithm, as supplied
-   * by the specified provider, if such an algorithm is available from the
-   * provider.</p>
-   *
-   * <p>The returned parameter object must be initialized via a call to
-   * <code>init()</code>, using an appropriate parameter specification or
-   * parameter encoding.</p>
-   *
-   * @param algorithm the name of the algorithm requested.
-   * @param provider the name of the provider.
-   * @return the new parameter object.
-   * @throws NoSuchAlgorithmException if the algorithm is not available in the
-   * package supplied by the requested provider.
-   * @throws NoSuchProviderException if the provider is not available in the
-   * environment.
-   * @throws IllegalArgumentException if the provider name is null or empty.
-   * @see Provider
+  /** 
+     Gets an instance of the AlgorithmParameters class representing
+     the specified algorithm parameters from the specified provider. 
+     If the algorithm is not found then, it throws 
+     NoSuchAlgorithmException. If the provider is not found, then 
+     it throws NoSuchProviderException.
+
+     The returned AlgorithmParameters must still be intialized with
+     init().
+
+     @param algorithm the name of algorithm to choose
+     @param provider the name of the provider to find the algorithm in
+     @return a AlgorithmParameters repesenting the desired algorithm
+
+     @throws NoSuchAlgorithmException if the algorithm is not implemented by the provider
+     @throws NoSuchProviderException if the provider is not found
    */
-  public static AlgorithmParameters getInstance(String algorithm, String provider)
-    throws NoSuchAlgorithmException, NoSuchProviderException
+  public static AlgorithmParameters getInstance(String algorithm,
+						String provider) throws
+    NoSuchAlgorithmException, NoSuchProviderException
   {
     Provider p = Security.getProvider(provider);
     if (p == null)
       throw new NoSuchProviderException();
 
-    return getInstance(algorithm, p);
-  }
-
-  /**
-   * Generates an <code>AlgorithmParameterGenerator</code> object for the
-   * requested algorithm, as supplied from the specified provider, if such a
-   * parameter generator is available from the provider. Note: the
-   * <code>provider</code> doesn't have to be registered.
-   *
-   * @param algorithm the string name of the algorithm.
-   * @param provider the provider.
-   * @return the new <code>AlgorithmParameterGenerator</code> object.
-   * @throws NoSuchAlgorithmException if the <code>algorithm</code> is not
-   * available from the <code>provider</code>.
-   * @throws IllegalArgumentException if the <code>provider</code> is
-   * <code>null</code>.
-   * @since 1.4
-   */
-  public static AlgorithmParameters getInstance(String algorithm,
-                                                Provider provider)
-    throws NoSuchAlgorithmException
-  {
-    if (provider == null)
-      throw new IllegalArgumentException();
-
-    // try the name as is
-    String className = provider.getProperty("AlgorithmParameters." + algorithm);
-    if (className == null) // try all uppercase
-      {
-        String upper = algorithm.toUpperCase();
-        className = provider.getProperty("AlgorithmParameters." + upper);
-        if (className == null) // try if it's an alias
-          {
-            String alias =
-                provider.getProperty("Alg.Alias.AlgorithmParameters." + algorithm);
-            if (alias == null) // try all-uppercase alias name
-              {
-                alias = provider.getProperty("Alg.Alias.AlgorithmParameters." + upper);
-                if (alias == null) // spit the dummy
-                  throw new NoSuchAlgorithmException(algorithm);
-              }
-            className = provider.getProperty("AlgorithmParameters." + alias);
-            if (className == null)
-              throw new NoSuchAlgorithmException(algorithm);
-          }
-      }
-    return getInstance(className, algorithm, provider);
+    return getInstance(p.getProperty("AlgorithmParameters." + algorithm),
+		       algorithm, p);
   }
 
   private static AlgorithmParameters getInstance(String classname,
-                                                 String algorithm,
+						 String algorithm,
 						 Provider provider)
     throws NoSuchAlgorithmException
   {
+
     try
       {
-        return new AlgorithmParameters(
-            (AlgorithmParametersSpi) Class.forName(classname).newInstance(),
-            provider,
-            algorithm);
+	return new AlgorithmParameters((AlgorithmParametersSpi) Class.
+				       forName(classname).newInstance(),
+				       provider, algorithm);
       }
     catch (ClassNotFoundException cnfe)
       {
-        throw new NoSuchAlgorithmException("Class not found");
+	throw new NoSuchAlgorithmException("Class not found");
       }
     catch (InstantiationException ie)
       {
-        throw new NoSuchAlgorithmException("Class instantiation failed");
+	throw new NoSuchAlgorithmException("Class instantiation failed");
       }
     catch (IllegalAccessException iae)
       {
-        throw new NoSuchAlgorithmException("Illegal Access");
+	throw new NoSuchAlgorithmException("Illegal Access");
       }
   }
 
   /**
-   * Returns the provider of this parameter object.
-   *
-   * @return the provider of this parameter object.
+     Gets the provider that the class is from.
+
+     @return the provider of this class
    */
   public final Provider getProvider()
   {
@@ -253,28 +175,29 @@
   }
 
   /**
-   * Initializes this parameter object using the parameters specified in
-   * <code>paramSpec</code>.
-   *
-   * @param paramSpec the parameter specification.
-   * @throws InvalidParameterSpecException if the given parameter specification
-   * is inappropriate for the initialization of this parameter object, or if
-   * this parameter object has already been initialized.
+     Initializes the engine with the specified 
+     AlgorithmParameterSpec class.
+
+     @param paramSpec A AlgorithmParameterSpec to initialize with
+
+     @throws InvalidParameterSpecException For an inapporiate ParameterSpec class
    */
-  public final void init(AlgorithmParameterSpec paramSpec)
-    throws InvalidParameterSpecException
+  public final void init(AlgorithmParameterSpec paramSpec) throws
+    InvalidParameterSpecException
   {
     paramSpi.engineInit(paramSpec);
   }
 
   /**
-   * Imports the specified parameters and decodes them according to the primary
-   * decoding format for parameters. The primary decoding format for parameters
-   * is ASN.1, if an ASN.1 specification for this type of parameters exists.
-   *
-   * @param params the encoded parameters.
-   * @throws IOException on decoding errors, or if this parameter object has
-   * already been initialized.
+     Initializes the engine with the specified 
+     parameters stored in the byte array and decodes them
+     according to the ASN.1 specification. If the ASN.1
+     specification exists then it succeeds or else it throws
+     IOException.
+
+     @param params Parameters to initialize with
+
+     @throws IOException Decoding Error
    */
   public final void init(byte[]params) throws IOException
   {
@@ -282,15 +205,17 @@
   }
 
   /**
-   * Imports the parameters from params and decodes them according to the
-   * specified decoding scheme. If <code>format</code> is <code>null</code>,
-   * the primary decoding format for parameters is used. The primary decoding
-   * format is ASN.1, if an ASN.1 specification for these parameters exists.
-   *
-   * @param params the encoded parameters.
-   * @param format the name of the decoding scheme.
-   * @throws IOException on decoding errors, or if this parameter object has
-   * already been initialized.
+     Initializes the engine with the specified 
+     parameters stored in the byte array and decodes them
+     according to the specified decoding specification. 
+     If format is null, then it is decoded using the ASN.1 
+     specification if it exists or else it throws
+     IOException.
+
+     @param params Parameters to initialize with
+     @param format Name of decoding format to use
+
+     @throws IOException Decoding Error
    */
   public final void init(byte[]params, String format) throws IOException
   {
@@ -298,34 +223,28 @@
   }
 
   /**
-   * Returns a (transparent) specification of this parameter object.
-   * <code>paramSpec</code> identifies the specification class in which the
-   * parameters should be returned. It could, for example, be
-   * <code>DSAParameterSpec.class</code>, to indicate that the parameters should
-   * be returned in an instance of the {@link java.security.spec.DSAParameterSpec}
-   * class.
-   *
-   * @param paramSpec the specification class in which the parameters should be
-   * returned.
-   * @return the parameter specification.
-   * @throws InvalidParameterSpecException if the requested parameter
-   * specification is inappropriate for this parameter object, or if this
-   * parameter object has not been initialized.
+     Returns a specification of this AlgorithmParameters object.
+     paramSpec identifies the class to return the AlgortihmParameters
+     in. 
+
+     @param paramSpec Class to return AlgorithmParameters in
+
+     @return the parameter specification
+
+     @throws InvalidParameterSpecException if the paramSpec is an invalid parameter class
    */
-  public final AlgorithmParameterSpec getParameterSpec(Class paramSpec)
-    throws InvalidParameterSpecException
+  public final AlgorithmParameterSpec getParameterSpec(Class paramSpec) throws
+    InvalidParameterSpecException
   {
     return paramSpi.engineGetParameterSpec(paramSpec);
   }
 
   /**
-   * Returns the parameters in their primary encoding format. The primary
-   * encoding format for parameters is ASN.1, if an ASN.1 specification for
-   * this type of parameters exists.
-   *
-   * @return the parameters encoded using their primary encoding format.
-   * @throws IOException on encoding errors, or if this parameter object has not
-   * been initialized.
+     Returns the parameters in the default encoding format. 
+     The primary encoding format is ASN.1 format if it exists
+     for the specified type.
+
+     @return byte array representing the parameters
    */
   public final byte[] getEncoded() throws IOException
   {
@@ -333,15 +252,12 @@
   }
 
   /**
-   * Returns the parameters encoded in the specified scheme. If format is
-   * <code>null</code>, the primary encoding format for parameters is used. The
-   * primary encoding format is ASN.1, if an ASN.1 specification for these
-   * parameters exists.
-   *
-   * @param format the name of the encoding format.
-   * @return the parameters encoded using the specified encoding scheme.
-   * @throws IOException on encoding errors, or if this parameter object has
-   * not been initialized.
+     Returns the parameters in the specified encoding format. 
+     If <code>format</code> is <code>null</code> then the 
+     primary encoding format is used, the ASN.1 format, 
+     if it exists for the specified type.
+
+     @return byte array representing the parameters
    */
   public final byte[] getEncoded(String format) throws IOException
   {
@@ -349,10 +265,9 @@
   }
 
   /**
-   * Returns a formatted string describing the parameters.
-   *
-   * @return a formatted string describing the parameters, or <code>null</code>
-   * if this parameter object has not been initialized.
+     Returns a string representation of the encoding format
+
+     @return a string containing the string representation
    */
   public final String toString()
   {
