--- /home/tromey/gnu/Nightly/classpath/classpath/java/net/PlainSocketImpl.java	2003-07-31 02:19:11.000000000 -0600
+++ java/net/PlainSocketImpl.java	2003-06-28 02:18:20.000000000 -0600
@@ -69,6 +69,23 @@
           System.loadLibrary("javanet");
         }
     }
+  
+  // These fields are mirrored for use in native code to avoid cpp conflicts
+  // when the #defines in system header files are the same as the public fields.
+  static final int _Jv_TCP_NODELAY_ = SocketOptions.TCP_NODELAY,
+                   _Jv_SO_BINDADDR_ = SocketOptions.SO_BINDADDR,
+                   _Jv_SO_REUSEADDR_ = SocketOptions.SO_REUSEADDR,
+                   _Jv_SO_BROADCAST_ = SocketOptions.SO_BROADCAST,
+                   _Jv_SO_OOBINLINE_ = SocketOptions.SO_OOBINLINE,
+                   _Jv_IP_MULTICAST_IF_ = SocketOptions.IP_MULTICAST_IF,
+                   _Jv_IP_MULTICAST_IF2_ = SocketOptions.IP_MULTICAST_IF2,
+                   _Jv_IP_MULTICAST_LOOP_ = SocketOptions.IP_MULTICAST_LOOP,
+                   _Jv_IP_TOS_ = SocketOptions.IP_TOS,
+                   _Jv_SO_LINGER_ = SocketOptions.SO_LINGER,
+                   _Jv_SO_TIMEOUT_ = SocketOptions.SO_TIMEOUT,
+                   _Jv_SO_SNDBUF_ = SocketOptions.SO_SNDBUF,
+                   _Jv_SO_RCVBUF_ = SocketOptions.SO_RCVBUF,
+                   _Jv_SO_KEEPALIVE_ = SocketOptions.SO_KEEPALIVE;
 
   /**
    * The OS file handle representing the socket.
@@ -77,7 +94,13 @@
    *
    * When the socket is closed this is reset to -1.
    */
-  protected int native_fd = -1;
+  int fnum = -1;
+
+  // This value is set/read by setOption/getOption.
+  int timeout = 0;
+  
+  // localAddress cache
+  InetAddress localAddress;
 
   /**
    * A cached copy of the in stream for reading from the socket.
@@ -95,6 +118,23 @@
   public PlainSocketImpl()
   {
   }
+  
+  protected void finalize() throws Throwable
+  {
+    synchronized (this)
+      {
+	if (fnum != -1)
+	  try
+	    {
+	      close();
+	    }
+	  catch (IOException ex)
+	    {
+	      // ignore
+	    }
+      }
+    super.finalize();
+  }
 
   /**
    * Sets the specified option on a socket to the passed in object.  For
@@ -122,15 +162,9 @@
    */
   public native Object getOption(int optID) throws SocketException;
 
-  public void shutdownInput()
-  {
-    throw new InternalError ("PlainSocketImpl::shutdownInput not implemented");
-  }
+  public native void shutdownInput () throws IOException;
 
-  public void shutdownOutput()
-  {
-    throw new InternalError ("PlainSocketImpl::shutdownOutput not implemented");
-  }
+  public native void shutdownOutput () throws IOException;
 
   /**
    * Creates a new socket that is not bound to any local address/port and
@@ -140,8 +174,7 @@
    *
    * @param stream true for a stream socket, false for a datagram socket
    */
-  protected native synchronized void create(boolean stream)
-    throws IOException;
+  protected native void create (boolean stream)  throws IOException;
 
   /**
    * Connects to the remote hostname and port specified as arguments.
@@ -151,9 +184,9 @@
    *
    * @exception IOException If an error occurs
    */
-  protected synchronized void connect (String host, int port) throws IOException
+  protected void connect (String host, int port) throws IOException
   {
-    connect (InetAddress.getByName (host), port);
+    connect (new InetSocketAddress (InetAddress.getByName(host), port), 0);
   }
 
   /**
@@ -164,38 +197,14 @@
    *
    * @exception IOException If an error occurs
    */
-  protected native void connect(InetAddress addr, int port)
-    throws IOException;
-
-  protected synchronized void connect(SocketAddress address, int timeout)
-    throws IOException
+  protected void connect (InetAddress host, int port) throws IOException
   {
-    InetSocketAddress sockAddr = (InetSocketAddress) address;
-    InetAddress addr = sockAddr.getAddress();
-
-    if (addr == null)
-      throw new IllegalArgumentException ("address is unresolved: " + sockAddr);
-
-    int port = sockAddr.getPort();
-    
-    if (timeout < 0)
-      throw new IllegalArgumentException ("negative timeout");
-
-    Object oldTimeoutObj = null;
-    
-    try
-      {
- 	oldTimeoutObj = this.getOption (SocketOptions.SO_TIMEOUT);
- 	this.setOption (SocketOptions.SO_TIMEOUT, new Integer (timeout));
- 	connect (addr, port);
-      }
-    finally
-      {
-	if (oldTimeoutObj != null)
-	  this.setOption (SocketOptions.SO_TIMEOUT, oldTimeoutObj);
-      }
+    connect (new InetSocketAddress (host, port), 0);
   }
 
+  protected native void connect (SocketAddress addr, int timeout)
+    throws IOException;
+
   /**
    * Binds to the specified port on the specified addr.  Note that this addr
    * must represent a local IP address.  **** How bind to INADDR_ANY? ****
@@ -205,8 +214,7 @@
    *
    * @exception IOException If an error occurs
    */
-  protected native synchronized void bind(InetAddress addr, int port)
-    throws IOException;
+  protected native void bind (InetAddress host, int port) throws IOException;
 
   /**
    * Starts listening for connections on a socket. The queuelen parameter
@@ -218,8 +226,9 @@
    * 
    * @exception IOException If an error occurs
    */
-  protected native synchronized void listen(int queuelen)
-    throws IOException;
+  protected native void listen (int backlog) throws IOException;
+
+  private native void accept (PlainSocketImpl s) throws IOException;
 
   /**
    * Accepts a new connection on this socket and returns in in the 
@@ -227,8 +236,10 @@
    *
    * @param impl The SocketImpl object to accept this connection.
    */
-  protected native synchronized void accept(SocketImpl impl)
-    throws IOException;
+  protected void accept (SocketImpl s) throws IOException
+  {
+    accept((PlainSocketImpl) s);
+  }
 
   /**
    * Returns the number of bytes that the caller can read from this socket
@@ -251,10 +262,10 @@
    */
   protected native void close () throws IOException;
 
-  public void sendUrgentData(int data)
-  {
-    throw new InternalError ("PlainSocketImpl::sendUrgentData not implemented");
-  }
+  protected native void sendUrgentData(int data)
+    throws IOException;
+
+  native int read() throws IOException;
 
   /**
    * Internal method used by SocketInputStream for reading data from
@@ -265,9 +276,11 @@
    *
    * @exception IOException If an error occurs
    */
-  protected native int read(byte[] buf, int offset, int len)
+  native int read(byte[] buffer, int offset, int count)
     throws IOException;
 
+  native void write(int c) throws IOException;
+
   /**
    * Internal method used by SocketOuputStream for writing data to
    * the connection.  Writes up to len bytes of data from the buffer
@@ -275,7 +288,7 @@
    *
    * @exception IOException If an error occurs
    */
-  protected native void write(byte[] buf, int offset, int len)
+  native void write(byte[] buffer, int offset, int count)
     throws IOException;
 
   /**
@@ -289,7 +302,7 @@
   protected synchronized InputStream getInputStream() throws IOException
   {
     if (in == null)
-      in = new SocketInputStream (this);
+      in = new SocketInputStream();
     
     return in;
   }
@@ -305,8 +318,78 @@
   protected synchronized OutputStream getOutputStream() throws IOException
   {
     if (out == null)
-      out = new SocketOutputStream (this);
+      out = new SocketOutputStream();
     
     return out;
   }
+
+  /**
+   * A stream which reads from the socket implementation.
+   *
+   * @author Nic Ferrier <nferrier@tapsellferrier.co.uk>
+   */
+  class SocketInputStream
+    extends InputStream
+  {
+    SocketInputStream()
+    {
+    }
+    
+    public final void close() throws IOException
+    {
+      PlainSocketImpl.this.close();
+    }
+
+    public final int available() throws IOException
+    {
+      return PlainSocketImpl.this.available();
+    }
+
+    public final int read() throws IOException
+    {
+      return PlainSocketImpl.this.read();
+    }
+
+    public final int read(byte[] buffer, int offset, int length)
+      throws IOException
+    {
+      return PlainSocketImpl.this.read(buffer, offset, length);
+    }
+
+    public final int read(byte[] buffer)
+      throws IOException
+    {
+      return PlainSocketImpl.this.read(buffer, 0, buffer.length);
+    }
+  }
+
+  /** A stream which writes to the socket implementation.
+   *
+   * @author Nic Ferrier  <nferrier@tapsellferrier.co.uk>
+   */
+  class SocketOutputStream
+    extends OutputStream
+  {
+    public final void close() throws IOException
+    {
+      PlainSocketImpl.this.close();
+    }
+
+    public final void write(int c) throws IOException
+    {
+      PlainSocketImpl.this.write(c);
+    }
+
+    public final void write(byte[] buffer, int offset, int length)
+      throws IOException
+    {
+      PlainSocketImpl.this.write(buffer, offset, length);
+    }
+
+    public final void write(byte[] buffer)
+      throws IOException
+    {
+      PlainSocketImpl.this.write(buffer, 0, buffer.length);
+    }
+  }
 }
