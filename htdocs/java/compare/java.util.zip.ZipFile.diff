--- /home/tromey/gnu/Nightly/classpath/classpath/java/util/zip/ZipFile.java	2004-10-28 02:27:40.000000000 -0600
+++ java/util/zip/ZipFile.java	2004-10-28 02:16:12.000000000 -0600
@@ -1,5 +1,5 @@
-/* ZipFile.java --
-   Copyright (C) 2001, 2002, 2003, 2004  Free Software Foundation, Inc.
+/* java.util.zip.ZipFile
+   Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -42,8 +42,8 @@
 import java.io.DataInput;
 import java.io.EOFException;
 import java.io.File;
-import java.io.IOException;
 import java.io.InputStream;
+import java.io.IOException;
 import java.io.RandomAccessFile;
 import java.util.Enumeration;
 import java.util.HashMap;
@@ -148,7 +148,7 @@
    * @exception IOException if a i/o error occured.
    * @exception EOFException if the file ends prematurely
    */
-  private int readLeShort(DataInput di, byte[] b) throws IOException
+  private final int readLeShort(DataInput di, byte[] b) throws IOException
   {
     di.readFully(b, 0, 2);
     return (b[0] & 0xff) | (b[1] & 0xff) << 8;
@@ -165,13 +165,14 @@
    * @exception IOException if a i/o error occured.
    * @exception EOFException if the file ends prematurely
    */
-  private int readLeInt(DataInput di, byte[] b) throws IOException
+  private final int readLeInt(DataInput di, byte[] b) throws IOException
   {
     di.readFully(b, 0, 4);
     return ((b[0] & 0xff) | (b[1] & 0xff) << 8)
 	    | ((b[2] & 0xff) | (b[3] & 0xff) << 8) << 16;
   }
 
+  
   /**
    * Read an unsigned short in little endian byte order from the given
    * byte buffer at the given offset.
@@ -180,7 +181,7 @@
    * @param off the offset to read from.
    * @return The value read.
    */
-  private int readLeShort(byte[] b, int off)
+  private final int readLeShort(byte[] b, int off)
   {
     return (b[off] & 0xff) | (b[off+1] & 0xff) << 8;
   }
@@ -193,7 +194,7 @@
    * @param off the offset to read from.
    * @return The value read.
    */
-  private int readLeInt(byte[] b, int off)
+  private final int readLeInt(byte[] b, int off)
   {
     return ((b[off] & 0xff) | (b[off+1] & 0xff) << 8)
 	    | ((b[off+2] & 0xff) | (b[off+3] & 0xff) << 8) << 16;
