--- /home/tromey/gnu/Nightly/classpath/classpath/java/nio/channels/SelectableChannel.java	2004-04-13 02:20:24.000000000 -0600
+++ java/nio/channels/SelectableChannel.java	2003-02-11 09:41:07.000000000 -0700
@@ -1,4 +1,4 @@
-/* SelectableChannel.java --
+/* SelectableChannel.java -- 
    Copyright (C) 2002 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
@@ -41,62 +41,62 @@
 import java.nio.channels.spi.AbstractInterruptibleChannel;
 import java.nio.channels.spi.SelectorProvider;
 
-
 /**
  * @author Michael Koch
  * @since 1.4
  */
-public abstract class SelectableChannel extends AbstractInterruptibleChannel
+public abstract class SelectableChannel
+  extends AbstractInterruptibleChannel
 {
   /**
    * Initializes the channel.
    */
-  protected SelectableChannel()
+  protected SelectableChannel ()
   {
   }
-
+ 
   /**
    * Returns the lock of this channel.
    */
-  public abstract Object blockingLock();
+  public abstract Object blockingLock ();
 
   /**
    * Adjusts this channel's blocking mode.
-   *
+   * 
    * @exception ClosedChannelException If this channel is closed.
    * @exception IllegalBlockingModeException If block is true and this channel
    * is registered with one or more selectors.
    * @exception IOException If an error occurs.
    */
-  public abstract SelectableChannel configureBlocking(boolean block)
+  public abstract SelectableChannel configureBlocking (boolean block)
     throws IOException;
-
+  
   /**
    * Tells whether this channel is blocking or not.
    */
-  public abstract boolean isBlocking();
-
+  public abstract boolean isBlocking ();
+  
   /**
    * Tells whether or not this channel is currently registered with
    * any selectors.
    */
-  public abstract boolean isRegistered();
-
+  public abstract boolean isRegistered ();
+  
   /**
    * Retrieves the key representing the channel's registration with
    * the given selector.
    */
-  public abstract SelectionKey keyFor(Selector sel);
-
+  public abstract SelectionKey keyFor (Selector sel);
+  
   /**
    * Returns the provider that created this channel.
    */
-  public abstract SelectorProvider provider();
-
+  public abstract SelectorProvider provider ();
+  
   /**
    * Registers this channel with the given selector,
    * returning a selection key.
-   *
+   * 
    * @exception CancelledKeyException If this channel is currently registered
    * with the given selector but the corresponding key has already been cancelled
    * @exception ClosedChannelException If this channel is closed.
@@ -108,12 +108,12 @@
    * @exception IllegalSelectorException If this channel was not created by
    * the same provider as the given selector.
    */
-  public final SelectionKey register(Selector sel, int ops)
+  public final SelectionKey register (Selector sel, int ops)
     throws ClosedChannelException
   {
-    return register(sel, ops, null);
+    return register (sel, ops, null);
   }
-
+  
   /**
    * Registers this channel with the given selector,
    * returning a selection key.
@@ -130,9 +130,9 @@
    * @exception IllegalSelectorException If this channel was not created by
    * the same provider as the given selector.
    */
-  public abstract SelectionKey register(Selector sel, int ops, Object att)
+  public abstract SelectionKey register (Selector sel, int ops, Object att)
     throws ClosedChannelException;
-
+  
   /**
    * Returns a set of valid operations on this channel.
    */
