--- /home/tromey/gnu/egcs/classpath/classpath/java/lang/StringBuffer.java	Thu Jul 12 21:28:06 2001
+++ java/lang/StringBuffer.java	Wed May 23 18:34:04 2001
@@ -1,28 +1,12 @@
-/* StringBuffer.java -- Growable strings
-   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.
+// StringBuffer.java - Growable strings.
 
-This file is part of GNU Classpath.
+/* Copyright (C) 1998, 1999, 2000  Free Software Foundation
 
-GNU Classpath is free software; you can redistribute it and/or modify
-it under the terms of the GNU General Public License as published by
-the Free Software Foundation; either version 2, or (at your option)
-any later version.
- 
-GNU Classpath is distributed in the hope that it will be useful, but
-WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-General Public License for more details.
-
-You should have received a copy of the GNU General Public License
-along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
-
-As a special exception, if you link this library with other files to
-produce an executable, this library does not by itself cause the
-resulting executable to be covered by the GNU General Public License.
-This exception does not however invalidate any other reasons why the
-executable file might be covered by the GNU General Public License. */
+   This file is part of libgcj.
+
+This software is copyrighted work licensed under the terms of the
+Libgcj License.  Please consult the file "LIBGCJ_LICENSE" for
+details.  */
 
 package java.lang;
 import java.io.Serializable;
@@ -73,7 +57,7 @@
  * @author Tom Tromey
  * @see java.lang.String
  */
-public final class StringBuffer implements Serializable, CharSequence
+public final class StringBuffer implements Serializable
 {
   /** Append the <code>String</code> value of the argument to this <code>StringBuffer</code>.
    *  Uses <code>String.valueOf()</code> to convert to
@@ -105,10 +89,7 @@
    *  @return this <code>StringBuffer</code>.
    *  @see java.lang.String#valueOf(int)
    */
-  public StringBuffer append (int inum)
-  {
-    return append (String.valueOf(inum));
-  }
+  public native StringBuffer append (int inum);
 
   /** Append the <code>String</code> value of the argument to this <code>StringBuffer</code>.
    *  Uses <code>String.valueOf()</code> to convert to
@@ -217,7 +198,7 @@
    *  @param index the index of the character to get, starting at 0.
    *  @return the character at the specified index.
    *  @exception IndexOutOfBoundsException if the desired character index
-   *             is negative or greater then length() - 1.
+   *             is not between 0 and length() - 1 (inclusive).
    */
   public synchronized char charAt (int index)
   {
@@ -671,28 +652,6 @@
     // enable sharing here.
     return new String (value, beginIndex, endIndex - beginIndex);
   }
-
-  /**
-   * Creates a substring of this StringBuffer, starting at a specified index
-   * and ending at one character before a specified index.
-   * <p>
-   * To implement <code>CharSequence</code>.
-   * Calls <code>substring(beginIndex, endIndex)</code>.
-   *
-   * @param beginIndex index to start substring (base 0)
-   * @param endIndex index after the last character to be 
-   *   copied into the substring
-   * 
-   * @return new String which is a substring of this StringBuffer
-   *
-   * @exception StringIndexOutOfBoundsException 
-   *   if (beginIndex < 0 || endIndex > this.length() || beginIndex > endIndex)
-   */
-  public CharSequence subSequence (int beginIndex, int endIndex) 
-  {
-    return substring(beginIndex, endIndex);
-  }
-
 
   /** Convert this <code>StringBuffer</code> to a <code>String</code>.
    *  @return the characters in this StringBuffer
