--- /home/tromey/gnu/Nightly/classpath/classpath/java/io/PushbackReader.java	2004-04-13 02:20:21.000000000 -0600
+++ java/io/PushbackReader.java	2003-03-24 02:17:54.000000000 -0700
@@ -266,34 +266,33 @@
    * of the chars requested, the remaining chars are read from the 
    * underlying stream.
    *
-   * @param buffer The array into which the chars read should be stored
+   * @param buf The array into which the chars read should be stored
    * @param offset The offset into the array to start storing chars
-   * @param length The requested number of chars to read
+   * @param len The requested number of chars to read
    *
    * @return The actual number of chars read, or -1 if end of stream.
    *
    * @exception IOException If an error occurs.
    */
-  public synchronized int read(char[] buffer, int offset, int length)
-    throws IOException
+  public synchronized int read(char[] b, int offset, int len) throws IOException
   {
     synchronized (lock)
       {
 	if (buf == null)
           throw new IOException("stream closed");
 
-	if (offset < 0 || length < 0 || offset + length > buffer.length)
+	if (offset < 0 || len < 0 || offset + len > b.length)
           throw new ArrayIndexOutOfBoundsException();
 
-	int numBytes = Math.min(buf.length - pos, length);
+	int numBytes = Math.min(buf.length - pos, len);
 	if (numBytes > 0)
 	  {
-	    System.arraycopy (buf, pos, buffer, offset, numBytes);
+	    System.arraycopy (buf, pos, b, offset, numBytes);
 	    pos += numBytes;
 	    return numBytes;
 	  }
 
-	return super.read(buffer, offset, length);
+	return super.read(b, offset, len);
       }
   }
 
@@ -354,30 +353,30 @@
    * If the pushback buffer cannot hold all of the requested chars, an
    * exception is thrown.
    *
-   * @param buffer The char array to be pushed back
+   * @param buf The char array to be pushed back
    * @param offset The index into the array where the chars to be push start
-   * @param length The number of chars to be pushed.
+   * @param len The number of chars to be pushed.
    *
    * @exception IOException If the pushback buffer is full
    */
-  public synchronized void unread(char[] buffer, int offset, int length)
+  public synchronized void unread(char[] b, int offset, int len)
     throws IOException
   {
     synchronized (lock)
       {
 	if (buf == null)
           throw new IOException("stream closed");
-	if (pos < length)
+	if (pos < len)
 	  throw new IOException("Pushback buffer is full");
 
 	// Note the order that these chars are being added is the opposite
 	// of what would be done if they were added to the buffer one at a time.
 	// See the Java Class Libraries book p. 1397.
-	System.arraycopy(buffer, offset, buf, pos - length, length);
+	System.arraycopy(b, offset, buf, pos - len, len);
 
 	// Don't put this into the arraycopy above, an exception might be thrown
 	// and in that case we don't want to modify pos.
-	pos -= length;
+	pos -= len;
       }
   }
 }
