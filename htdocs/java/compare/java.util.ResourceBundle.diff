--- /home/tromey/gnu/Nightly/classpath/classpath/java/util/ResourceBundle.java	2004-04-18 02:22:27.000000000 -0600
+++ java/util/ResourceBundle.java	2003-04-30 02:19:07.000000000 -0600
@@ -42,8 +42,6 @@
 import java.lang.ref.SoftReference;
 import java.io.InputStream;
 import java.io.IOException;
-import java.security.AccessController;
-import java.security.PrivilegedAction;
 import gnu.classpath.Configuration;
 
 /**
@@ -53,7 +51,7 @@
  * <code>getObject</code> or <code>getString</code> on that bundle.
  *
  * <p>When a bundle is demanded for a specific locale, the ResourceBundle
- * is searched in following order (<i>def. language</i> stands for the
+ * is searched in following order (<i>def. language<i> stands for the
  * two letter ISO language code of the default locale (see
  * <code>Locale.getDefault()</code>).
  *
@@ -105,62 +103,7 @@
    */
   private Locale locale;
 
-  private static Class resourceBundleClass;
-  private static Class securityClass;
-
-  static
-  {
-    try
-      {
-	resourceBundleClass = Class.forName("java.util.ResourceBundle");
-	securityClass = Class.forName("java.util.ResourceBundle$Security");
-      }
-    catch (ClassNotFoundException e)
-      {
-      }
-  }
-      
-  /**
-   * We override SecurityManager in order to access getClassContext().
-   */
-  private static final class Security extends SecurityManager
-  {
-    /**
-     * Avoid accessor method of private constructor.
-     */
-    Security()
-    {
-    }
-
-    /**
-     * Return the ClassLoader of the class which called into this
-     * ResourceBundle, or null if it cannot be determined.
-     */
-    ClassLoader getCallingClassLoader()
-    {
-      Class[] stack = getClassContext();
-      for (int i = 0; i < stack.length; i++)
-	{
-	  if (stack[i] != securityClass && stack[i] != resourceBundleClass)
-	    return stack[i].getClassLoader();
-	}
-
-      return null;
-    }
-  }
-
-  /** A security context for grabbing the correct class loader. */
-  private static final Security security
-    = (Security) AccessController.doPrivileged(new PrivilegedAction()
-      {
-        // This will always work since java.util classes have (all) system
-        // permissions.
-        public Object run()
-        {
-          return new Security();
-        }
-      }
-    );
+  private static native ClassLoader getCallingClassLoader();
 
   /**
    * The resource bundle cache. This is a two-level hash map: The key
@@ -281,7 +224,7 @@
   public static final ResourceBundle getBundle(String baseName)
   {
     return getBundle(baseName, Locale.getDefault(),
-                     security.getCallingClassLoader());
+                     getCallingClassLoader());
   }
 
   /**
@@ -299,7 +242,7 @@
   public static final ResourceBundle getBundle(String baseName,
                                                Locale locale)
   {
-    return getBundle(baseName, locale, security.getCallingClassLoader());
+    return getBundle(baseName, locale, getCallingClassLoader());
   }
 
   /**
@@ -308,22 +251,18 @@
    *
    * <p>A sequence of candidate bundle names are generated, and tested in
    * this order, where the suffix 1 means the string from the specified
-   * locale, and the suffix 2 means the string from the default locale:</p>
-   *
-   * <ul>
+   * locale, and the suffix 2 means the string from the default locale:<ul>
    * <li>baseName + "_" + language1 + "_" + country1 + "_" + variant1</li>
    * <li>baseName + "_" + language1 + "_" + country1</li>
    * <li>baseName + "_" + language1</li>
    * <li>baseName + "_" + language2 + "_" + country2 + "_" + variant2</li>
    * <li>baseName + "_" + language2 + "_" + country2</li>
-   * <li>baseName + "_" + language2</li>
+   * <li>baseName + "_" + language2<li>
    * <li>baseName</li>
    * </ul>
    *
    * <p>In the sequence, entries with an empty string are ignored. Next,
-   * <code>getBundle</code> tries to instantiate the resource bundle:</p>
-   *
-   * <ul>
+   * <code>getBundle</code> tries to instantiate the resource bundle:<ul>
    * <li>First, an attempt is made to load a class in the specified classloader
    * which is a subclass of ResourceBundle, and which has a public constructor
    * with no arguments, via reflection.</li>
@@ -338,7 +277,7 @@
    * in the above sequence are tested in a similar manner, and if any results
    * in a resource bundle, it is assigned as the parent of the first bundle
    * using the <code>setParent</code> method (unless the first bundle already
-   * has a parent).</p>
+   * has a parent).
    *
    * <p>For example, suppose the following class and property files are
    * provided: MyResources.class, MyResources_fr_CH.properties,
@@ -347,12 +286,10 @@
    * all files are valid (that is, public non-abstract subclasses of
    * ResourceBundle with public nullary constructors for the ".class" files,
    * syntactically correct ".properties" files). The default locale is
-   * Locale("en", "UK").</p>
+   * Locale("en", "UK").
    *
    * <p>Calling getBundle with the shown locale argument values instantiates
-   * resource bundles from the following sources:</p>
-   *
-   * <ul>
+   * resource bundles from the following sources:<ul>
    * <li>Locale("fr", "CH"): result MyResources_fr_CH.class, parent
    *   MyResources_fr.properties, parent MyResources.class</li>
    * <li>Locale("fr", "FR"): result MyResources_fr.properties, parent
@@ -364,9 +301,8 @@
    * <li>Locale("es", "ES"): result MyResources_es_ES.class, parent
    *   MyResources.class</li>
    * </ul>
-   * 
-   * <p>The file MyResources_fr_CH.properties is never used because it is hidden
-   * by MyResources_fr_CH.class.</p>
+   * The file MyResources_fr_CH.properties is never used because it is hidden
+   * by MyResources_fr_CH.class.
    *
    * @param baseName the name of the ResourceBundle
    * @param locale A locale
