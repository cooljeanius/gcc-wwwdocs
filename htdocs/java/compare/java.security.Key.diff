--- /home/tromey/gnu/egcs/classpath/classpath/java/security/Key.java	Sun Mar 31 23:08:12 2002
+++ java/security/Key.java	Tue Jan 22 16:01:36 2002
@@ -1,5 +1,5 @@
 /* Key.java -- A abstract representation of a digital key
-   Copyright (C) 1998, 2000, 2002 Free Software Foundation, Inc.
+   Copyright (C) 1998, 2000 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -43,36 +43,28 @@
  * This interfaces models the base characteristics that all keys must
  * have.  These are:  a key algorithm, an encoded form, and a format used
  * to encode the key.  Specific key types inherit from this interface.
+ * <p>
  * Note that since this interface extends <code>Serializable</code>, all
- * keys may be serialized. Keys are generally obtained through key generators,
- * including {@link KeyFactory}.
+ * keys may be serialized.
  *
- * @author Aaron M. Renn <arenn@urbanophile.com>
- * @see PublicKey
- * @see PrivateKey
- * @see KeyPair
- * @see KeyPairGenerator
- * @see KeyFactory
- * @see KeySpec
- * @see Identity
- * @see Signer
- * @since 1.1
- * @status updated to 1.4
+ * @version 0.0
+ *
+ * @author Aaron M. Renn (arenn@urbanophile.com)
  */
 public interface Key extends Serializable
 {
-  /**
+ /**
    * The verion identifier used for serialization.
    */
-  long serialVersionUID = 6603384152749567654L;
+  public static final long serialVersionUID = 6603384152749567654L;
 
   /**
    * This method returns the name of the algorithm for this key.  This is a
    * <code>String</code> such as "RSA".
    *
-   * @return the name of the algorithm in use
+   * @return The name of the algorithm in use
    */
-  String getAlgorithm();
+  public abstract String getAlgorithm();
 
   /**
    * This method returns the name of the encoding format for this key.  This
@@ -80,15 +72,15 @@
    * "X.509" or "PKCS#8".  This method returns <code>null</code> if this key
    * does not have an encoding format.
    *
-   * @return the name of the encoding format for this key, or null
+   * @return The name of the encoding format for this key, or <code>null</code> if there is no such format.
    */
-  String getFormat();
+  public abstract String getFormat();
 
   /**
    * This method returns the encoded form of the key.  If this key does not
-   * support encoding, this method returns <code>null</code>.
+   * support encoding, this method returns <code>null</code>
    *
-   * @return the encoded form of the key, or null
+   * @return The encoded form of the key, or <code>null</code> if no encoded form is available.
    */
-  byte[] getEncoded();
-} // interface Key
+  public abstract byte[] getEncoded();
+}
