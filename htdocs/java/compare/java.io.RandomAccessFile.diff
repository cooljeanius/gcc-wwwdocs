--- /home/tromey/gnu/Nightly/classpath/classpath/java/io/RandomAccessFile.java	2003-04-22 02:26:42.000000000 -0600
+++ java/io/RandomAccessFile.java	2003-04-01 02:18:00.000000000 -0700
@@ -62,12 +62,12 @@
 
   // The underlying file.
   private FileDescriptor fd;
+  // The corresponding input and output streams.
+  private DataOutputStream out;
+  private DataInputStream in;
   
   private FileChannel ch; /* cached associated file-channel */
   
-  // Used for DataOutput methods writing values to the underlying file
-  private byte[] buf = new byte[8];
-  
   /**
    * This method initializes a new instance of <code>RandomAccessFile</code>
    * to read from the specified <code>File</code> object with the specified 
@@ -96,17 +96,15 @@
   /**
    * This method initializes a new instance of <code>RandomAccessFile</code>
    * to read from the specified file name with the specified access mode.
-   * The access mode is either "r" for read only access, "rw" for read
-   * write access, "rws" for synchronized read/write access of both
-   * content and metadata, or "rwd" for read/write access
-   * where only content is required to be synchronous.
+   * The access mode is either "r" for read only access or "rw" for read
+   * write access.
    * <p>
    * Note that a <code>SecurityManager</code> check is made prior to
    * opening the file to determine whether or not this file is allowed to
    * be read or written.
    *
    * @param fileName The name of the file to read and/or write
-   * @param mode "r", "rw", "rws", or "rwd"
+   * @param mode "r" for read only or "rw" for read-write access to the file
    *
    * @exception IllegalArgumentException If <code>mode</code> has an 
    * illegal value
@@ -117,19 +115,18 @@
   public RandomAccessFile (String fileName, String mode)
     throws FileNotFoundException
   {
+    // Check the mode
+    if (!mode.equals("r") && !mode.equals("rw") && !mode.equals("rws") &&
+        !mode.equals("rwd"))
+      throw new IllegalArgumentException("Bad mode value: " + mode);
+  
     int fdmode;
-    if (mode.equals("r"))
+    if (mode.compareTo ("r") == 0)
       fdmode = FileDescriptor.READ;
-    else if (mode.equals("rw"))
+    else if (mode.compareTo ("rw") == 0)
       fdmode = FileDescriptor.READ | FileDescriptor.WRITE;
-    else if (mode.equals("rws") || mode.equals("rwd"))
-      {
-	// FIXME: for now we treat rws and rwd and synonyms.
-	fdmode = (FileDescriptor.READ | FileDescriptor.WRITE
-		  | FileDescriptor.SYNC);
-      }
     else
-      throw new IllegalArgumentException("Bad mode value: " + mode);
+      throw new IllegalArgumentException ("invalid mode: " + mode);
 
     // The obligatory SecurityManager stuff
     SecurityManager s = System.getSecurityManager();
@@ -141,7 +138,9 @@
           s.checkWrite(fileName);
       }
 
-    fd = new FileDescriptor(fileName, fdmode);
+    fd = new FileDescriptor (fileName, fdmode);
+    out = new DataOutputStream (new FileOutputStream (fd));
+    in = new DataInputStream (new FileInputStream (fd));
   }
 
   /**
@@ -198,9 +197,9 @@
    *
    * @exception IOException If an error occurs
    */
-  public void setLength(long newlen) throws IOException
+  public void setLength (long pos) throws IOException
   {
-    fd.setLength(newlen);
+    fd.setLength(pos);
   }
 
   /**
@@ -212,7 +211,7 @@
    */
   public long length () throws IOException
   {
-    return fd.getLength();
+    return fd.length();
   }
 
   /**
@@ -225,7 +224,7 @@
    */
   public int read () throws IOException
   {
-    return fd.read();
+    return in.read();
   }
 
   /**
@@ -241,7 +240,7 @@
    */
   public int read (byte[] buffer) throws IOException
   {
-    return read (buffer, 0, buffer.length);
+    return in.read (buffer);
   }
 
   /**
@@ -258,7 +257,7 @@
    */
   public int read (byte[] buffer, int offset, int len) throws IOException
   {
-    return fd.read (buffer, offset, len);
+    return in.read (buffer, offset, len);
   }
 
   /**
@@ -280,12 +279,7 @@
    */
   public final boolean readBoolean () throws IOException
   {
-    int byte_read = read();
-  
-    if (byte_read == -1)
-      throw new EOFException("Unexpected end of stream");
-  
-    return byte_read != 0;
+    return in.readBoolean ();
   }
 
   /**
@@ -305,12 +299,7 @@
    */
   public final byte readByte () throws IOException
   {
-    int byte_read = read ();
-  
-    if (byte_read == -1)
-      throw new EOFException ("Unexpected end of stream");
-  
-    return (byte) byte_read;
+    return in.readByte ();
   }
 
   /**
@@ -338,11 +327,9 @@
    *
    * @see DataOutput
    */
-  public final synchronized char readChar () throws IOException
+  public final char readChar () throws IOException
   {
-    readFully (buf, 0, 2);
-  
-    return (char) ((buf[0] << 8) | (buf[1] & 0xff));
+    return in.readChar();
   }
 
   /**
@@ -369,9 +356,7 @@
    */
   public final double readDouble () throws IOException
   {
-    long val = readLong();
-  
-    return Double.longBitsToDouble(val);
+    return in.readDouble ();
   }
 
   /**
@@ -396,9 +381,7 @@
    */
   public final float readFloat () throws IOException
   {
-    int val = readInt();
-  
-    return Float.intBitsToFloat(val);
+    return in.readFloat();
   }
 
   /**
@@ -415,7 +398,7 @@
    */
   public final void readFully (byte[] buffer) throws IOException
   {
-    readFully (buffer, 0, buffer.length);
+    in.readFully(buffer);
   }
 
   /**
@@ -435,19 +418,10 @@
    * the buffer
    * @exception IOException If any other error occurs
    */
-  public synchronized final void readFully (byte[] buffer, int offset, int len) 
+  public final void readFully (byte[] buffer, int offset, int count)
     throws IOException
   {
-    int total_read = 0;
-  
-    while (total_read < len)
-      {
-        int bytes_read = read (buffer, offset + total_read, len - total_read);
-        if (bytes_read == -1)
-          throw new EOFException("Unexpected end of stream");
-  
-        total_read += bytes_read;
-      }
+    in.readFully (buffer, offset, count);
   }
 
   /**
@@ -478,12 +452,9 @@
    *
    * @see DataOutput
    */
-  public final synchronized int readInt() throws IOException
+  public final int readInt () throws IOException
   {
-    readFully(buf, 0, 4);
-  
-    return (((buf[0] & 0xff) << 24) | ((buf[1] & 0xff) << 16) |
-            ((buf[2] & 0xff) << 8) | (buf[3] & 0xff));
+    return in.readInt();
   }
 
   /**
@@ -513,33 +484,9 @@
    *
    * @deprecated
    */
-  public synchronized final String readLine () throws IOException
+  public final String readLine () throws IOException
   {
-    StringBuffer sb = new StringBuffer ("");
-  
-    for (;;)
-      {
-        int byte_read = read ();
-   
-        if (byte_read == -1)
-          return sb.toString();
-  
-        char c = (char) byte_read;
-  
-        if (c == '\r')
-          {
-            byte_read = read();
-            if (((char)byte_read) != '\n')
-              seek (getFilePointer() - 1);
-  
-            return sb.toString();
-          }
-  
-        if (c == '\n')
-          return sb.toString();
-  
-        sb.append (c);
-      }
+    return in.readLine ();
   }
 
   /**
@@ -573,18 +520,9 @@
    *
    * @see DataOutput
    */
-  public final synchronized long readLong() throws IOException
+  public final long readLong () throws IOException
   {
-    readFully(buf, 0, 8);
-  
-    return (((long)(buf[0] & 0xff) << 56) |
-            ((long)(buf[1] & 0xff) << 48) |
-            ((long)(buf[2] & 0xff) << 40) |
-            ((long)(buf[3] & 0xff) << 32) |
-            ((long)(buf[4] & 0xff) << 24) |
-            ((long)(buf[5] & 0xff) << 16) |
-            ((long)(buf[6] & 0xff) <<  8) |
-            ((long)(buf[7] & 0xff)));
+    return in.readLong();
   }
 
   /**
@@ -614,11 +552,9 @@
    *
    * @see DataOutput
    */
-  public final synchronized short readShort () throws IOException
+  public final short readShort () throws IOException
   {
-    readFully (buf, 0, 2);
-    
-    return (short) ((buf[0] << 8) | (buf[1] & 0xff));
+    return in.readShort();
   }
 
   /**
@@ -639,12 +575,7 @@
    */
   public final int readUnsignedByte () throws IOException
   {
-    int byte_read = read ();
-  
-    if (byte_read == -1)
-      throw new EOFException ("Unexpected end of stream");
-  
-    return byte_read & 0xFF;
+    return in.readUnsignedByte();
   }
 
   /**
@@ -672,12 +603,9 @@
    * @exception EOFException If end of file is reached before reading the value
    * @exception IOException If any other error occurs
    */
-  public final synchronized int readUnsignedShort () 
-    throws IOException
+  public final int readUnsignedShort () throws IOException
   {
-    readFully(buf, 0, 2);
-    
-    return (((buf[0] & 0xff) << 8) | (buf[1] & 0xff));
+    return in.readUnsignedShort();
   }
 
   /**
@@ -752,16 +680,9 @@
    *
    * @see DataOutput
    */
-  public synchronized final String readUTF () throws IOException
+  public final String readUTF () throws IOException
   {
-    StringBuffer sb = new StringBuffer("");
-  
-    int num_bytes = readUnsignedShort();
-    byte[] buf = new byte[num_bytes];
-    readFully(buf);
-  
-    // FIXME: Look to migrate to new String(buf, "UTF-8") if performance ok
-    return DataInputStream.convertFromUTF(buf);
+    return in.readUTF();
   }
 
   /**
@@ -816,7 +737,7 @@
    */
   public void write (int oneByte) throws IOException
   {
-    fd.write (oneByte);
+    out.write(oneByte);
   }
 
   /**
@@ -827,7 +748,7 @@
    */
   public void write (byte[] buffer) throws IOException
   {
-    write (buffer, 0, buffer.length);
+    out.write(buffer);
   }
 
   /**
@@ -842,7 +763,7 @@
    */
   public void write (byte[] buffer, int offset, int len) throws IOException
   {
-    fd.write (buffer, offset, len);
+    out.write (buffer, offset, len);
   }
 
   /**
@@ -856,7 +777,7 @@
    */
   public final void writeBoolean (boolean val) throws IOException
   {
-    write (val ? 1 : 0);
+    out.writeBoolean(val);
   }
 
   /**
@@ -870,7 +791,7 @@
    */
   public final void writeByte (int v) throws IOException
   {
-    write (v & 0xFF);
+    out.writeByte(v);
   }
 
   /**
@@ -882,12 +803,9 @@
    *
    * @exception IOException If an error occurs
    */
-  public final synchronized void writeShort (int s) throws IOException
+  public final void writeShort (int v) throws IOException
   {
-    buf[0] = (byte)((s & 0xFF00) >> 8);
-    buf[1] = (byte)(s & 0x00FF);
-  
-    write(buf, 0, 2);
+    out.writeShort(v);
   }
 
   /**
@@ -899,12 +817,9 @@
    *
    * @exception IOException If an error occurs
    */
-  public final synchronized void writeChar (int v) throws IOException
+  public final void writeChar (int v) throws IOException
   {
-    buf[0] = (byte)((v & 0xFF00) >> 8);
-    buf[1] = (byte)((int)v & 0x00FF);
-  
-    write(buf, 0, 2);
+    out.writeChar(v);
   }
 
   /**
@@ -915,14 +830,9 @@
    *
    * @exception IOException If an error occurs
    */
-  public final synchronized void writeInt (int v) throws IOException
+  public final void writeInt (int v) throws IOException
   {
-    buf[0] = (byte)((v & 0xFF000000) >> 24);
-    buf[1] = (byte)((v & 0x00FF0000) >> 16);
-    buf[2] = (byte)((v & 0x0000FF00) >> 8);
-    buf[3] = (byte)(v & 0x000000FF);
-  
-    write (buf, 0, 4);
+    out.writeInt(v);
   }
 
   /**
@@ -933,18 +843,9 @@
    *
    * @exception IOException If an error occurs
    */
-  public final synchronized void writeLong (long v) throws IOException
+  public final void writeLong (long v) throws IOException
   {
-    buf[0] = (byte)((v & 0xFF00000000000000L) >> 56);
-    buf[1] = (byte)((v & 0x00FF000000000000L) >> 48);
-    buf[2] = (byte)((v & 0x0000FF0000000000L) >> 40);
-    buf[3] = (byte)((v & 0x000000FF00000000L) >> 32);
-    buf[4] = (byte)((v & 0x00000000FF000000L) >> 24);
-    buf[5] = (byte)((v & 0x0000000000FF0000L) >> 16);
-    buf[6] = (byte)((v & 0x000000000000FF00L) >> 8);
-    buf[7] = (byte)(v & 0x00000000000000FFL);
-  
-    write (buf, 0, 8);
+    out.writeLong(v);
   }
 
   /**
@@ -963,8 +864,7 @@
    */
   public final void writeFloat (float v) throws IOException
   {
-    int i = Float.floatToIntBits (v);
-    writeInt (i);
+    out.writeFloat(v);
   }
 
   /**
@@ -984,8 +884,7 @@
    */
   public final void writeDouble (double v) throws IOException
   {
-    long l = Double.doubleToLongBits (v);
-    writeLong (l);
+    out.writeDouble(v);
   }
 
   /**
@@ -999,17 +898,7 @@
    */
   public final void writeBytes (String s) throws IOException
   {
-    int len = s.length();
-
-    if (len == 0)
-      return;
-  
-    byte[] buf = new byte[len];
-  
-    for (int i = 0; i < len; i++)
-      buf[i] = (byte)(s.charAt(i) & 0xFF);
-  
-    write(buf);
+    out.writeBytes(s);
   }
   
   /**
@@ -1023,19 +912,7 @@
    */
   public final void writeChars (String s) throws IOException
   {
-    int len = s.length();
-    if (len == 0)
-      return;
-  
-    byte[] buf = new byte[len * 2];
-  
-    for (int i = 0; i < len; i++)
-      {
-        buf[i * 2] = (byte)((s.charAt(i) & 0xFF00) >> 8);
-        buf[(i * 2) + 1] = (byte)(s.charAt(i) & 0x00FF);
-      }
-  
-    write(buf, 0, buf.length);
+    out.writeChars(s);
   }
   
   /**
@@ -1069,11 +946,7 @@
    */
   public final void writeUTF (String s) throws IOException
   {
-    // FIXME:  Look to migrate to s.getBytes("UTF-8") if performance ok
-    byte[] buf = DataOutputStream.convertToUTF(s);
-  
-    writeShort(buf.length);
-    write(buf);
+    out.writeUTF(s);
   }
   
   /**
