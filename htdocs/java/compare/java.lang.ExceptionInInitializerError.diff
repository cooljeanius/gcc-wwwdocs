--- /home/tromey/gnu/egcs/classpath/classpath/java/lang/ExceptionInInitializerError.java	Sat Mar  2 12:13:11 2002
+++ java/lang/ExceptionInInitializerError.java	Tue Jan 22 16:01:34 2002
@@ -1,6 +1,5 @@
-/* ExceptionInInitializerError.java -- thrown when class initialization fails
-   with an uncaught exception
-   Copyright (C) 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.
+/* ExceptionInInitializerError.java 
+   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -8,7 +7,7 @@
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2, or (at your option)
 any later version.
-
+ 
 GNU Classpath is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
@@ -39,85 +38,118 @@
 
 package java.lang;
 
+import java.io.PrintStream;
+import java.io.PrintWriter;
+
+/* Written using "Java Class Libraries", 2nd edition, ISBN 0-201-31002-3
+ * "The Java Language Specification", ISBN 0-201-63451-1
+ * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.
+ * Status:  Believed complete and correct.
+ */
+
 /**
- * An <code>ExceptionInInitializerError</code> is thrown when an uncaught
- * exception has occurred in a static initializer or the initializer for a
- * static variable. In general, this wraps only RuntimeExceptions, since the
- * compiler does not allow a checked exception to be uncaught in an
- * initializer. This exception only occurs during reflection, when a class
- * is initialized as part of another action.
+ * An <code>ExceptionInInitializerError</code> is thrown when an 
+ * unexpected exception has occurred in a static initializer or the
+ * initializer for a static variable.
  *
+ * @since JDK 1.1
+ * 
  * @author Brian Jones
  * @author Tom Tromey <tromey@cygnus.com>
- * @author Eric Blake <ebb9@email.byu.edu>
- * @since 1.1
- * @status updated to 1.4
+ * @date October 1, 1998 
  */
 public class ExceptionInInitializerError extends LinkageError
 {
-  /**
-   * Compatible with JDK 1.1+.
-   */
   static final long serialVersionUID = 1521711792217232256L;
 
-  /**
-   * The cause of this exception (duplicates the one stored in Throwable).
-   *
-   * @serial the exception cause
-   */
-  private final Throwable exception;
+  private Throwable exception = null;
 
   /**
-   * Create an error without a message. The cause is initialized as null.
+   * Create an error without a message.
    */
   public ExceptionInInitializerError()
-  {
-    this((String) null);
-  }
+    {
+      super();
+    }
 
   /**
-   * Create an error with a message. The cause is initialized as null.
-   *
-   * @param s the message
+   * Create an error with a message.
    */
   public ExceptionInInitializerError(String s)
-  {
-    super(s);
-    exception = null;
-  }
+    {
+      super(s);
+    }
 
   /**
    * Creates an error an saves a reference to the <code>Throwable</code>
-   * object. The message string is null.
+   * object.
    *
    * @param t the exception thrown
    */
   public ExceptionInInitializerError(Throwable t)
-  {
-    super(null);
-    initCause(t);
-    exception = t;
-  }
-
-  /**
-   * Return the exception that caused this error to be created. This is a
-   * legacy method; the preferred choice now is {@link Throwable#getCause()}.
-   *
-   * @return the cause, or null if unknown
+    {
+      super(t.toString());
+      exception = t;
+    }
+
+  /** 
+   * Return the exception that caused this error to be created.
+   * @return the stored <code>Throwable</code> object or <code>null</code>
+   * if this <code>ExceptionInInitializerError</code> has no stored
+   * <code>Throwable</code> object.
    */
   public Throwable getException()
-  {
-    return exception;
-  }
-
-  /**
-   * Return the exception that cause this error to be created.
-   *
-   * @return the cause, or null if unknown
-   * @since 1.4
-   */
-  public Throwable getCause()
-  {
-    return exception;
-  }
+    {
+      return exception;
+    }
+
+  /**
+   * Print a stack trace of the exception that occurred.
+   */
+  public void printStackTrace()
+    {
+      if (exception == null)
+	{
+	  super.printStackTrace();
+	}
+      else
+	{
+	  System.err.print(this.getClass() + ": ");
+	  exception.printStackTrace();
+	}
+    }
+
+  /**
+   * Print a stack trace of the exception that occurred to 
+   * the specified <code>PrintStream</code>.
+   */
+  public void printStackTrace(PrintStream ps)
+    {
+      if (exception == null)
+	{
+	  super.printStackTrace(ps);
+	}
+      else
+	{
+	  ps.print(this.getClass() + ": ");
+	  exception.printStackTrace(ps);
+	}
+    }
+
+  /**
+   * Print a stack trace of the exception that occurred to 
+   * the specified <code>PrintWriter</code>.
+   */
+  public void printStackTrace(PrintWriter pw)
+    {
+      if (exception == null)
+	{
+	  super.printStackTrace(pw);
+	}
+      else
+	{
+	  pw.print(this.getClass() + ": ");
+	  exception.printStackTrace(pw);
+	}
+    }
 }
