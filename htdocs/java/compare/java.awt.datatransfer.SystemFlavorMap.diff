--- /home/tromey/gnu/classpath/classpath/java/awt/datatransfer/SystemFlavorMap.java	Mon Dec 30 15:39:04 2002
+++ java/awt/datatransfer/SystemFlavorMap.java	Wed Jan 23 18:32:09 2002
@@ -40,7 +40,6 @@
 
 import java.util.HashMap;
 import java.util.Map;
-import java.util.List;
 
 /**
   * This class maps between native platform type names and DataFlavors.
@@ -48,122 +47,134 @@
   * XXX - The current implementation does no mapping at all.
   *
   * @author Mark Wielaard (mark@klomp.org)
+  */
+public final class SystemFlavorMap implements FlavorMap
+{
+
+/**
+  * The default (instance) flavor map.
+  */
+private static FlavorMap defaultFlavorMap;
+
+/**
+  * Private constructor.
+  */
+private SystemFlavorMap()
+{
+}
+
+/*************************************************************************/
+
+/**
+  * Maps the specified <code>DataFlavor</code> objects to the native
+  * data type name.  The returned <code>Map</code> has keys that are
+  * the data flavors and values that are strings.  The returned map
+  * may be modified.  This can be useful for implementing nested mappings.
+  *
+  * @param flavors An array of data flavors to map
+  *                or null for all data flavors.
   *
-  * @since 1.2
+  * @return A <code>Map</code> of native data types to data flavors.
+  */
+public Map
+getNativesForFlavors(DataFlavor[] flavors)
+{
+  return(new HashMap());
+}
+
+/*************************************************************************/
+
+/**
+  * Maps the specified native type names to <code>DataFlavor</code>'s.
+  * The returned <code>Map</code> has keys that are strings and values
+  * that are <code>DataFlavor</code>'s.  The returned map may be
+  * modified.  This can be useful for implementing nested mappings.
+  *
+  * @param natives An array of native types to map
+  *                or null for all native types.
+  *
+  * @return A <code>Map</code> of data flavors to native type names.
+  */
+public Map
+getFlavorsForNatives(String[] natives)
+{
+  return(new HashMap());
+}
+
+/*************************************************************************/
+
+/**
+  * Returns the default (instance) (System)FlavorMap.
+  */
+public static FlavorMap
+getDefaultFlavorMap()
+{
+  if (defaultFlavorMap == null)
+    defaultFlavorMap = new SystemFlavorMap();
+
+  return(defaultFlavorMap);
+}
+
+/*************************************************************************/
+
+/**
+  * Returns the native type name for the given java mime type.
+  */
+public static String
+encodeJavaMIMEType(String mime)
+{
+  return null;
+}
+
+/*************************************************************************/
+
+/**
+  * Returns the native type name for the given data flavor.
+  */
+public static String
+encodeDataFlavor(DataFlavor df)
+{
+  return null;
+}
+
+/*************************************************************************/
+
+/**
+  * Returns true if the native type name can be represented as
+  * a java mime type.
+  */
+public static boolean
+isJavaMIMEType(String name)
+{
+  return(false);
+}
+
+/*************************************************************************/
+
+/**
+  * Returns the java mime type for the given the native type name.
   */
-public final class SystemFlavorMap implements FlavorMap, FlavorTable
+public static String
+decodeJavaMIMEType(String name)
 {
-  /**
-   * The default (instance) flavor map.
-   */
-  private static FlavorMap defaultFlavorMap;
-
-  /**
-   * Private constructor.
-   */
-  private SystemFlavorMap ()
-  {
-  }
-
-  /**
-   * Maps the specified <code>DataFlavor</code> objects to the native
-   * data type name.  The returned <code>Map</code> has keys that are
-   * the data flavors and values that are strings.  The returned map
-   * may be modified.  This can be useful for implementing nested mappings.
-   *
-   * @param flavors An array of data flavors to map
-   *                or null for all data flavors.
-   *
-   * @return A <code>Map</code> of native data types to data flavors.
-   */
-  public Map getNativesForFlavors (DataFlavor[] flavors)
-  {
-    return new HashMap();
-  }
-
-  /**
-   * Maps the specified native type names to <code>DataFlavor</code>'s.
-   * The returned <code>Map</code> has keys that are strings and values
-   * that are <code>DataFlavor</code>'s.  The returned map may be
-   * modified.  This can be useful for implementing nested mappings.
-   *
-   * @param natives An array of native types to map
-   *                or null for all native types.
-   *
-   * @return A <code>Map</code> of data flavors to native type names.
-   */
-  public Map getFlavorsForNatives (String[] natives)
-  { 
-    return new HashMap();
-  }
-
-  /**
-   * Returns the default (instance) (System)FlavorMap.
-   */
-  public static FlavorMap getDefaultFlavorMap ()
-  {
-    if (defaultFlavorMap == null)
-      defaultFlavorMap = new SystemFlavorMap ();
-
-    return defaultFlavorMap;
-  }
-
-  /**
-   * Returns the native type name for the given java mime type.
-   */
-  public static String encodeJavaMIMEType (String mime)
-  {
-    return null;
-  }
-
-  /**
-   * Returns the native type name for the given data flavor.
-   */
-  public static String encodeDataFlavor (DataFlavor df)
-  {
-    return null;
-  }
-
-  /**
-   * Returns true if the native type name can be represented as
-   * a java mime type.
-   */
-  public static boolean isJavaMIMEType (String name)
-  {
-    return false;
-  }
-
-  /**
-   * Returns the java mime type for the given the native type name.
-   */
-  public static String decodeJavaMIMEType (String name)
-  {
-    return null;
-  }
-
-  /**
-   * Returns the data flavor given the native type name
-   * or null when no such data flavor exists.
-   */
-  public static DataFlavor decodeDataFlavor (String name)
-    throws ClassNotFoundException
-  {
-    String javaMIMEType = decodeJavaMIMEType (name);
-    
-    if (javaMIMEType != null)
-      return new DataFlavor (javaMIMEType);
-    else
-      return null;
-  }
-
-  public List getFlavorsForNative (String nat)
-  {
-    throw new Error ("Not implemented");
-  }
-
-  public List getNativesForFlavor (DataFlavor flav)
-  {
-    throw new Error ("Not implemented");
-  }
+  return null;
+}
+
+/*************************************************************************/
+
+/**
+  * Returns the data flavor given the native type name
+  * or null when no such data flavor exists.
+  */
+public static DataFlavor
+decodeDataFlavor(String name) throws ClassNotFoundException
+{
+  String javaMIMEType = decodeJavaMIMEType(name);
+  if (javaMIMEType != null)
+    return(new DataFlavor(javaMIMEType));
+  else
+    return(null);
+}
 
 } // class SystemFlavorMap
+
