--- /home/tromey/gnu/Nightly/classpath/classpath/gnu/java/security/provider/DSASignature.java	2003-04-24 02:22:05.000000000 -0600
+++ gnu/java/security/provider/DSASignature.java	2002-08-12 10:10:53.000000000 -0600
@@ -1,5 +1,5 @@
 /* DSASignature.java
-   Copyright (C) 1999,2003 Free Software Foundation, Inc.
+   Copyright (C) 1999 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -37,12 +37,7 @@
 
 package gnu.java.security.provider;
 
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
-
 import java.math.BigInteger;
-
 import java.security.InvalidAlgorithmParameterException;
 import java.security.InvalidKeyException;
 import java.security.InvalidParameterException;
@@ -57,17 +52,8 @@
 import java.security.interfaces.DSAPrivateKey;
 import java.security.interfaces.DSAPublicKey;
 import java.security.spec.AlgorithmParameterSpec;
-
-import java.util.ArrayList;
-import java.util.List;
 import java.util.Random;
-
-import gnu.java.io.ASN1ParsingException;
-import gnu.java.security.der.DER;
 import gnu.java.security.der.DEREncodingException;
-import gnu.java.security.der.DERReader;
-import gnu.java.security.der.DERValue;
-import gnu.java.security.der.DERWriter;
 
 public class DSASignature extends SignatureSpi
 {
@@ -171,14 +157,9 @@
       BigInteger s = sha.add( x.multiply( r ) );
       s = s.multiply( k.modInverse(q) ).mod( q );
 
-      ByteArrayOutputStream bout = new ByteArrayOutputStream();
-      ArrayList seq = new ArrayList(2);
-      seq.set(0, new DERValue(DER.INTEGER, r));
-      seq.set(1, new DERValue(DER.INTEGER, s));
-      DERWriter.write(bout, new DERValue(DER.CONSTRUCTED | DER.SEQUENCE, seq));
-      return bout.toByteArray();
-    } catch (IOException ioe) {
-      throw new SignatureException();
+      DERWriter writer = new DERWriter();
+      return writer.joinarrays( writer.writeBigInteger( r ),  writer.writeBigInteger( s ) );
+
     } catch ( ArithmeticException ae ) {
       throw new SignatureException();
     }
@@ -199,12 +180,9 @@
   {
     //Decode sigBytes from ASN.1 DER encoding
     try {
-      DERReader in = new DERReader(sigBytes);
-      DERValue val = in.read();
-      if (!val.isConstructed())
-        throw new SignatureException("badly formed signature");
-      BigInteger r = (BigInteger) in.read().getValue();
-      BigInteger s = (BigInteger) in.read().getValue();
+      DERReader reader = new DERReader( sigBytes );
+      BigInteger r = reader.getBigInteger();
+      BigInteger s = reader.getBigInteger();
 
       BigInteger g = publicKey.getParams().getG();
       BigInteger p = publicKey.getParams().getP();
@@ -228,8 +206,8 @@
 	return true;
       else
 	return false;
-    } catch (IOException ioe) {
-      throw new SignatureException("badly formed signature");
+    } catch ( DEREncodingException deree ) {
+      throw new SignatureException();
     }
   }
 
