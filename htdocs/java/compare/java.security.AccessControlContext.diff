--- /home/tromey/gnu/Nightly/classpath/classpath/java/security/AccessControlContext.java	2004-07-05 02:22:23.000000000 -0600
+++ java/security/AccessControlContext.java	2002-01-22 16:01:36.000000000 -0700
@@ -1,5 +1,5 @@
 /* AccessControlContext.java --- Access Control Context Class
-   Copyright (C) 1999, 2004 Free Software Foundation, Inc.
+   Copyright (C) 1999 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -37,71 +37,78 @@
 
 package java.security;
 
-import java.util.HashSet;
-
 /**
- * AccessControlContext makes system resource access decsion 
- * based on permission rights.  
- *
- * It is used for a specific context and has only one method
- * checkPermission. It is similar to AccessController except
- * that it makes decsions based on the current context instead
- * of the the current thread.
- *
- * It is created by call AccessController.getContext method.
- *
- * @author Mark Benvenuto
- * @since 1.2
+   AccessControlContext makes system resource access decsion 
+   based on permission rights.  
+
+   It is used for a specific context and has only one method
+   checkPermission. It is similar to AccessController except
+   that it makes decsions based on the current context instead
+   of the the current thread.
+
+   It is created by call AccessController.getContext method.
+
+   @author Mark Benvenuto
+   @since JDK 1.2
  */
 public final class AccessControlContext
 {
-  private final ProtectionDomain[] protectionDomains;
-  private final DomainCombiner combiner;
+  private ProtectionDomain protectionDomain[];
+  private DomainCombiner combiner;
 
   /**
-   * Construct a new AccessControlContext with the specified
-   * ProtectionDomains. <code>context</code> must not be 
-   * null and duplicates will be removed.
-   *
-   * @param context The ProtectionDomains to use
+     Construct a new AccessControlContext with the specified
+     ProtectionDomains. <code>context</code> must not be 
+     null and duplicates will be removed.
+
+     @param context The ProtectionDomains to use
    */
   public AccessControlContext(ProtectionDomain[]context)
   {
-    HashSet domains = new HashSet (context.length);
-    for (int i = 0; i < context.length; i++)
-      domains.add (context[i]);
-    protectionDomains = (ProtectionDomain[])
-      domains.toArray (new ProtectionDomain[domains.size()]);
-    combiner = null;
+    int i, j, k, count = context.length, count2 = 0;
+    for (i = 0, j = 0; i < count; i++)
+      {
+	for (k = 0; k < i; k++)
+	  if (context[k] == protectionDomain[i])
+	    break;
+	if (k != i)		//it means previous loop did not complete
+	  continue;
+
+	count2++;
+      }
+
+    protectionDomain = new ProtectionDomain[count2];
+    for (i = 0, j = 0; i < count2; i++)
+      {
+	for (k = 0; k < i; k++)
+	  if (context[k] == protectionDomain[i])
+	    break;
+	if (k != i)		//it means previous loop did not complete
+	  continue;
+
+	protectionDomain[j++] = context[i];
+      }
   }
 
   /**
-   * Construct a new AccessControlContext with the specified
-   * ProtectionDomains and DomainCombiner
-   *
-   * @since 1.3
+     Construct a new AccessControlContext with the specified
+     ProtectionDomains and DomainCombiner
+
+     @param context The ProtectionDomains to use
+
+     @since JDK 1.3
    */
   public AccessControlContext(AccessControlContext acc,
 			      DomainCombiner combiner)
   {
-    // XXX check permission to call this.
-    AccessControlContext acc2 = AccessController.getContext();
-    protectionDomains = combiner.combine (acc2.protectionDomains,
-                                          acc.protectionDomains);
-    this.combiner = combiner;
-  }
-
-  AccessControlContext (ProtectionDomain[] domains, AccessControlContext acc,
-                        DomainCombiner combiner)
-  {
-    protectionDomains = combiner.combine (domains, acc.protectionDomains);
+    this(acc.protectionDomain);
     this.combiner = combiner;
   }
 
   /**
-   * Returns the Domain Combiner associated with the AccessControlContext
-   *
-   * @return the DomainCombiner
+     Returns the Domain Combiner associated with the AccessControlContext
+
+     @returns the DomainCombiner
    */
   public DomainCombiner getDomainCombiner()
   {
@@ -109,31 +116,31 @@
   }
 
   /**
-   * Determines whether or not the specific permission is granted
-   * depending on the context it is within. 
-   *
-   * @param perm a permission to check
-   *
-   * @throws AccessControlException if the permssion is not permitted
+     Determines whether or not the specific permission is granted
+     depending on the context it is within. 
+
+     @param perm a permission to check
+
+     @throws AccessControlException if the permssion is not permitted
    */
   public void checkPermission(Permission perm) throws AccessControlException
   {
-    if (protectionDomains.length == 0)
-      throw new AccessControlException ("permission not granted");
-    for (int i = 0; i < protectionDomains.length; i++)
-      if (!protectionDomains[i].implies(perm))
-        throw new AccessControlException ("permission not granted");
+    for (int i = 0; i < protectionDomain.length; i++)
+      if (protectionDomain[i].implies(perm) == true)
+	return;
+
+    throw new AccessControlException("Permission not granted");
   }
 
   /**
-   * Checks if two AccessControlContexts are equal.
-   *
-   * It first checks if obj is an AccessControlContext class, and
-   * then checks if each ProtectionDomain matches.
-   *
-   * @param obj The object to compare this class to
-   *
-   * @return true if equal, false otherwise
+     Checks if two AccessControlContexts are equal.
+
+     It first checks if obj is an AccessControlContext class, and
+     then checks if each ProtectionDomain matches.
+
+     @param obj The object to compare this class to
+
+     @return true if equal, false otherwise
    */
   public boolean equals(Object obj)
   {
@@ -141,35 +148,27 @@
       {
 	AccessControlContext acc = (AccessControlContext) obj;
 
-	if (acc.protectionDomains.length != protectionDomains.length)
+	if (acc.protectionDomain.length != protectionDomain.length)
 	  return false;
 
-        int i, j;
-        for (i = 0; i < protectionDomains.length; i++)
-          {
-            for (j = 0; j < acc.protectionDomains.length; j++)
-              {
-                if (acc.protectionDomains[j].equals (protectionDomains[i]))
-                  break;
-              }
-            if (j == acc.protectionDomains.length)
-              return false;
-          }
-        return true;
+	for (int i = 0; i < protectionDomain.length; i++)
+	  if (acc.protectionDomain[i] != protectionDomain[i])
+	    return false;
+	return true;
       }
     return false;
   }
 
   /**
-   * Computes a hash code of this class
-   *
-   * @return a hash code representing this class
+     Computes a hash code of this class
+
+     @return a hash code representing this class
    */
   public int hashCode()
   {
     int h = 0;
-    for (int i = 0; i < protectionDomains.length; i++)
-      h ^= protectionDomains[i].hashCode();
+    for (int i = 0; i < protectionDomain.length; i++)
+      h ^= protectionDomain[i].hashCode();
 
     return h;
   }
