--- /home/tromey/gnu/egcs/classpath/classpath/java/security/AccessControlContext.java	Wed Mar 22 12:26:19 2000
+++ java/security/AccessControlContext.java	Wed Apr 25 09:45:12 2001
@@ -7,7 +7,7 @@
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2, or (at your option)
 any later version.
- 
+
 GNU Classpath is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
@@ -24,23 +24,22 @@
 This exception does not however invalidate any other reasons why the
 executable file might be covered by the GNU General Public License. */
 
-
 package java.security;
 
 /**
    AccessControlContext makes system resource access decsion 
-   based on permission rights.	
-   
+   based on permission rights.  
+
    It is used for a specific context and has only one method
    checkPermission. It is similar to AccessController except
    that it makes decsions based on the current context instead
    of the the current thread.
-   
+
    It is created by call AccessController.getContext method.
-   
+
    @author Mark Benvenuto
    @since JDK 1.2
-*/
+ */
 public final class AccessControlContext
 {
   private ProtectionDomain protectionDomain[];
@@ -50,32 +49,34 @@
      Construct a new AccessControlContext with the specified
      ProtectionDomains. <code>context</code> must not be 
      null and duplicates will be removed.
-     
+
      @param context The ProtectionDomains to use
-  */
-  public AccessControlContext(ProtectionDomain[] context)
+   */
+  public AccessControlContext(ProtectionDomain[]context)
   {
     int i, j, k, count = context.length, count2 = 0;
-    for( i = 0, j = 0; i < count; i++) {
-      for( k = 0; k < i; k++)
-	if( context[k] == protectionDomain[i] )
-	  break;
-      if( k != i) //it means previous loop did not complete
-	continue;
-
-      count2++;
-    }
-
-    protectionDomain = new ProtectionDomain[ count2 ];
-    for( i = 0, j = 0; i < count2; i++) {
-      for( k = 0; k < i; k++)
-	if( context[k] == protectionDomain[i] )
-	  break;
-      if( k != i) //it means previous loop did not complete
-	continue;
+    for (i = 0, j = 0; i < count; i++)
+      {
+	for (k = 0; k < i; k++)
+	  if (context[k] == protectionDomain[i])
+	    break;
+	if (k != i)		//it means previous loop did not complete
+	  continue;
+
+	count2++;
+      }
+
+    protectionDomain = new ProtectionDomain[count2];
+    for (i = 0, j = 0; i < count2; i++)
+      {
+	for (k = 0; k < i; k++)
+	  if (context[k] == protectionDomain[i])
+	    break;
+	if (k != i)		//it means previous loop did not complete
+	  continue;
 
-      protectionDomain[j++] = context[i];
-    }
+	protectionDomain[j++] = context[i];
+      }
   }
 
   /**
@@ -85,19 +86,19 @@
      @param context The ProtectionDomains to use
 
      @since JDK 1.3
-  */
+   */
   public AccessControlContext(AccessControlContext acc,
 			      DomainCombiner combiner)
   {
-    this( acc.protectionDomain );
+    this(acc.protectionDomain);
     this.combiner = combiner;
   }
 
   /**
      Returns the Domain Combiner associated with the AccessControlContext
-      
+
      @returns the DomainCombiner
-  */
+   */
   public DomainCombiner getDomainCombiner()
   {
     return combiner;
@@ -110,11 +111,11 @@
      @param perm a permission to check
 
      @throws AccessControlException if the permssion is not permitted
-  */
+   */
   public void checkPermission(Permission perm) throws AccessControlException
   {
-    for( int i = 0; i < protectionDomain.length; i++)
-      if( protectionDomain[i].implies( perm ) == true )
+    for (int i = 0; i < protectionDomain.length; i++)
+      if (protectionDomain[i].implies(perm) == true)
 	return;
 
     throw new AccessControlException("Permission not granted");
@@ -129,20 +130,21 @@
      @param obj The object to compare this class to
 
      @return true if equal, false otherwise
-  */
+   */
   public boolean equals(Object obj)
   {
-    if( obj instanceof AccessControlContext ) {
-      AccessControlContext acc = (AccessControlContext)obj;
+    if (obj instanceof AccessControlContext)
+      {
+	AccessControlContext acc = (AccessControlContext) obj;
 
-      if( acc.protectionDomain.length != protectionDomain.length)
-	return false;
-
-      for( int i = 0; i < protectionDomain.length; i++)
-	if( acc.protectionDomain[i] != protectionDomain[i])
+	if (acc.protectionDomain.length != protectionDomain.length)
 	  return false;
-      return true;
-    }
+
+	for (int i = 0; i < protectionDomain.length; i++)
+	  if (acc.protectionDomain[i] != protectionDomain[i])
+	    return false;
+	return true;
+      }
     return false;
   }
 
@@ -150,11 +152,11 @@
      Computes a hash code of this class
 
      @return a hash code representing this class
-  */
+   */
   public int hashCode()
   {
     int h = 0;
-    for( int i = 0; i < protectionDomain.length; i++)
+    for (int i = 0; i < protectionDomain.length; i++)
       h ^= protectionDomain[i].hashCode();
 
     return h;
