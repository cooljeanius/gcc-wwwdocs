--- /home/tromey/gnu/Nightly/classpath/classpath/java/net/Socket.java	2003-09-19 02:19:00.000000000 -0600
+++ java/net/Socket.java	2003-11-26 02:18:16.000000000 -0700
@@ -68,27 +68,22 @@
  */
 public class Socket
 {
-
-  // Class Variables
-
   /**
    * This is the user SocketImplFactory for this class.  If this variable is
    * null, a default factory is used.
    */
   static SocketImplFactory factory;
 
-  // Instance Variables
-
   /**
    * The implementation object to which calls are redirected
    */
-  SocketImpl impl;
+  private SocketImpl impl;
+
+  private boolean implCreated = false;
 
   private boolean inputShutdown = false;
   private boolean outputShutdown = false;
 
-  private boolean closed = false;
-
   /**
    * Initializes a new instance of <code>Socket</code> object without 
    * connecting to a remote host.  This useful for subclasses of socket that 
@@ -173,7 +168,7 @@
    *
    * @param host The name of the remote host to connect to.
    * @param port The remote port to connect to.
-   * @param loadAddr The local address to bind to.
+   * @param localAddr The local address to bind to.
    * @param localPort The local port to bind to.
    *
    * @exception SecurityException If the <code>SecurityManager</code>
@@ -296,6 +291,26 @@
     // that default.  JDK 1.2 doc infers not to do a bind.
   }
 
+  // This has to be accessible from java.net.ServerSocket.
+  SocketImpl getImpl()
+    throws SocketException
+  {
+    try
+      {
+	if (!implCreated)
+	  {
+	    impl.create(true);
+	    implCreated = true;
+	  }
+      }
+    catch (IOException e)
+      {
+	throw new SocketException(e.getMessage());
+      }
+
+    return impl;
+  }
+
   /**
    * Binds the socket to the givent local address/port
    *
@@ -310,8 +325,8 @@
    */
   public void bind (SocketAddress bindpoint) throws IOException
   {
-    if (closed)
-      throw new SocketException ("Socket is closed");
+    if (isClosed())
+      throw new SocketException("socket is closed");
 
     // XXX: JDK 1.4.1 API documentation says that if bindpoint is null the
     // socket will be bound to an ephemeral port and a valid local address.
@@ -323,13 +338,10 @@
 
     InetSocketAddress tmp = (InetSocketAddress) bindpoint;
     
-    // create socket
-    impl.create (true);
-    
     // bind to address/port
     try
       {
-        impl.bind (tmp.getAddress(), tmp.getPort());
+        getImpl().bind (tmp.getAddress(), tmp.getPort());
       }
     catch (IOException exception)
       {
@@ -372,6 +384,8 @@
    * until established or an error occurs.
    *
    * @param endpoint The address to connect to
+   * @param timeout The length of the timeout in milliseconds, or 
+   * 0 to indicate no timeout.
    *
    * @exception IOException If an error occurs
    * @exception IllegalArgumentException If the address type is not supported
@@ -384,11 +398,11 @@
   public void connect (SocketAddress endpoint, int timeout)
     throws IOException
   {
-    if (closed)
-      throw new SocketException ("Socket is closed");
+    if (isClosed())
+      throw new SocketException("socket is closed");
     
     if (! (endpoint instanceof InetSocketAddress))
-      throw new IllegalArgumentException ("Address type not supported");
+      throw new IllegalArgumentException("unsupported address type");
 
     if (getChannel() != null
         && !getChannel().isBlocking ())
@@ -399,7 +413,7 @@
 
     try
       {
-        impl.connect (endpoint, timeout);
+        getImpl().connect (endpoint, timeout);
       }
     catch (IOException exception)
       {
@@ -426,7 +440,19 @@
    */
   public InetAddress getInetAddress ()
   {
-    return impl.getInetAddress();
+    if (!isConnected())
+      return null;
+
+    try
+      {
+	return getImpl().getInetAddress();
+      }
+    catch (SocketException e)
+      {
+	// This cannot happen as we are connected.
+      }
+
+    return null;
   }
 
   /**
@@ -440,9 +466,10 @@
   public InetAddress getLocalAddress ()
   {
     InetAddress addr = null;
+    
     try
       {
-        addr = (InetAddress)impl.getOption(SocketOptions.SO_BINDADDR);
+        addr = (InetAddress) getImpl().getOption(SocketOptions.SO_BINDADDR);
       }
     catch(SocketException e)
       {
@@ -472,8 +499,18 @@
    */
   public int getPort ()
   {
-    if (impl != null)
-      return impl.getPort();
+    if (!isConnected())
+      return 0;
+
+    try
+      {
+	if (getImpl() != null)
+	  return getImpl().getPort();
+      }
+    catch (SocketException e)
+      {
+	// This cannot happen as we are connected.
+      }
 
     return -1;
   }
@@ -486,8 +523,18 @@
    */
   public int getLocalPort ()
   {
-    if (impl != null)
-      return impl.getLocalPort();
+    if (!isBound())
+      return -1;
+    
+    try
+      {
+	if (getImpl() != null)
+	  return getImpl().getLocalPort();
+      }
+    catch (SocketException e)
+      {
+	// This cannot happen as we are bound.
+      }
 
     return -1;
   }
@@ -500,12 +547,20 @@
    */
   public SocketAddress getLocalSocketAddress()
   {
-    InetAddress addr = getLocalAddress ();
-
-    if (addr == null)
+    if (!isBound())
       return null;
     
-    return new InetSocketAddress (addr, impl.getLocalPort());
+    InetAddress addr = getLocalAddress ();
+
+    try
+      {
+	return new InetSocketAddress (addr, getImpl().getLocalPort());
+      }
+    catch (SocketException e)
+      {
+	// This cannot happen as we are bound.
+	return null;
+      }
   }
 
   /**
@@ -519,7 +574,15 @@
     if (!isConnected ())
       return null;
 
-    return new InetSocketAddress (impl.getInetAddress (), impl.getPort ());
+    try
+      {
+	return new InetSocketAddress (getImpl().getInetAddress (), getImpl().getPort ());
+      }
+    catch (SocketException e)
+      {
+	// This cannot happen as we are connected.
+	return null;
+      }
   }
 
   /**
@@ -531,10 +594,13 @@
    */
   public InputStream getInputStream () throws IOException
   {
-    if (impl != null)
-      return(impl.getInputStream());
-
-    throw new IOException("Not connected");
+    if (isClosed())
+      throw new SocketException("socket is closed");
+    
+    if (!isConnected())
+      throw new IOException("not connected");
+	    
+    return getImpl().getInputStream();
   }
 
   /**
@@ -546,10 +612,13 @@
    */
   public OutputStream getOutputStream () throws IOException
   {
-    if (impl != null)
-      return impl.getOutputStream();
-
-    throw new IOException("Not connected");
+    if (isClosed())
+      throw new SocketException("socket is closed");
+    
+    if (!isConnected())
+      throw new IOException("not connected");
+    
+    return getImpl().getOutputStream();
   }
 
   /**
@@ -563,7 +632,10 @@
    */
   public void setTcpNoDelay (boolean on)  throws SocketException
   {
-    impl.setOption(SocketOptions.TCP_NODELAY, new Boolean(on));
+    if (isClosed())
+      throw new SocketException("socket is closed");
+    
+    getImpl().setOption(SocketOptions.TCP_NODELAY, new Boolean(on));
   }
 
   /**
@@ -580,7 +652,10 @@
    */
   public boolean getTcpNoDelay() throws SocketException
   {
-    Object on = impl.getOption(SocketOptions.TCP_NODELAY);
+    if (isClosed())
+      throw new SocketException("socket is closed");
+    
+    Object on = getImpl().getOption(SocketOptions.TCP_NODELAY);
   
     if (on instanceof Boolean)
       return(((Boolean)on).booleanValue());
@@ -607,6 +682,9 @@
    */
   public void setSoLinger(boolean on, int linger) throws SocketException
   {
+    if (isClosed())
+      throw new SocketException("socket is closed");
+    
     if (on == true)
       {
         if (linger < 0)
@@ -615,11 +693,11 @@
         if (linger > 65535)
           linger = 65535;
 
-        impl.setOption(SocketOptions.SO_LINGER, new Integer(linger));
+        getImpl().setOption(SocketOptions.SO_LINGER, new Integer(linger));
       }
     else
       {
-        impl.setOption(SocketOptions.SO_LINGER, new Boolean(false));
+        getImpl().setOption(SocketOptions.SO_LINGER, new Boolean(false));
       }
   }
 
@@ -641,7 +719,11 @@
    */
   public int getSoLinger() throws SocketException
   {
-    Object linger = impl.getOption(SocketOptions.SO_LINGER);
+    if (isClosed())
+      throw new SocketException("socket is closed");
+    
+    Object linger = getImpl().getOption(SocketOptions.SO_LINGER);
+
     if (linger instanceof Integer)
       return(((Integer)linger).intValue());
     else
@@ -660,7 +742,10 @@
    */
   public void sendUrgentData (int data) throws IOException
   {
-    impl.sendUrgentData (data);
+    if (isClosed())
+      throw new SocketException("socket is closed");
+    
+    getImpl().sendUrgentData (data);
   }
 
   /**
@@ -674,19 +759,27 @@
    */
   public void setOOBInline (boolean on) throws SocketException
   {
-    impl.setOption(SocketOptions.SO_OOBINLINE, new Boolean(on));
+    if (isClosed())
+      throw new SocketException("socket is closed");
+    
+    getImpl().setOption(SocketOptions.SO_OOBINLINE, new Boolean(on));
   }
 
   /**
    * Returns the current setting of the SO_OOBINLINE option for this socket
    * 
+   * @return True if SO_OOBINLINE is set, false otherwise.
+   *
    * @exception SocketException If an error occurs
    * 
    * @since 1.4
    */
   public boolean getOOBInline () throws SocketException
   {
-    Object buf = impl.getOption(SocketOptions.SO_OOBINLINE);
+    if (isClosed())
+      throw new SocketException("socket is closed");
+    
+    Object buf = getImpl().getOption(SocketOptions.SO_OOBINLINE);
 
     if (buf instanceof Boolean)
       return(((Boolean)buf).booleanValue());
@@ -713,10 +806,13 @@
    */
   public synchronized void setSoTimeout (int timeout) throws SocketException
   {
+    if (isClosed())
+      throw new SocketException("socket is closed");
+    
     if (timeout < 0)
       throw new IllegalArgumentException("SO_TIMEOUT value must be >= 0");
       
-    impl.setOption(SocketOptions.SO_TIMEOUT, new Integer(timeout));
+    getImpl().setOption(SocketOptions.SO_TIMEOUT, new Integer(timeout));
   }
 
   /**
@@ -738,7 +834,10 @@
    */
   public synchronized int getSoTimeout () throws SocketException
   {
-    Object timeout = impl.getOption(SocketOptions.SO_TIMEOUT);
+    if (isClosed())
+      throw new SocketException("socket is closed");
+    
+    Object timeout = getImpl().getOption(SocketOptions.SO_TIMEOUT);
     if (timeout instanceof Integer)
       return(((Integer)timeout).intValue());
     else
@@ -759,10 +858,13 @@
    */
   public void setSendBufferSize (int size) throws SocketException
   {
+    if (isClosed())
+      throw new SocketException("socket is closed");
+    
     if (size <= 0)
       throw new IllegalArgumentException("SO_SNDBUF value must be > 0");
     
-    impl.setOption(SocketOptions.SO_SNDBUF, new Integer(size));
+    getImpl().setOption(SocketOptions.SO_SNDBUF, new Integer(size));
   }
 
   /**
@@ -778,7 +880,10 @@
    */
   public int getSendBufferSize () throws SocketException
   {
-    Object buf = impl.getOption(SocketOptions.SO_SNDBUF);
+    if (isClosed())
+      throw new SocketException("socket is closed");
+    
+    Object buf = getImpl().getOption(SocketOptions.SO_SNDBUF);
 
     if (buf instanceof Integer)
       return(((Integer)buf).intValue());
@@ -800,10 +905,13 @@
    */
   public void setReceiveBufferSize (int size) throws SocketException
   {
+    if (isClosed())
+      throw new SocketException("socket is closed");
+    
     if (size <= 0)
       throw new IllegalArgumentException("SO_RCVBUF value must be > 0");
       
-    impl.setOption(SocketOptions.SO_RCVBUF, new Integer(size));
+    getImpl().setOption(SocketOptions.SO_RCVBUF, new Integer(size));
   }
 
   /**
@@ -819,7 +927,10 @@
    */
   public int getReceiveBufferSize () throws SocketException
   {
-    Object buf = impl.getOption(SocketOptions.SO_RCVBUF);
+    if (isClosed())
+      throw new SocketException("socket is closed");
+    
+    Object buf = getImpl().getOption(SocketOptions.SO_RCVBUF);
 
     if (buf instanceof Integer)
       return(((Integer)buf).intValue());
@@ -839,7 +950,10 @@
    */
   public void setKeepAlive (boolean on) throws SocketException
   {
-    impl.setOption(SocketOptions.SO_KEEPALIVE, new Boolean(on));
+    if (isClosed())
+      throw new SocketException("socket is closed");
+    
+    getImpl().setOption(SocketOptions.SO_KEEPALIVE, new Boolean(on));
   }
 
   /**
@@ -854,7 +968,10 @@
    */
   public boolean getKeepAlive () throws SocketException
   {
-    Object buf = impl.getOption(SocketOptions.SO_KEEPALIVE);
+    if (isClosed())
+      throw new SocketException("socket is closed");
+    
+    Object buf = getImpl().getOption(SocketOptions.SO_KEEPALIVE);
 
     if (buf instanceof Boolean)
       return(((Boolean)buf).booleanValue());
@@ -869,13 +986,15 @@
    */
   public synchronized void close ()  throws IOException
   {
-    if (impl != null)
-      impl.close();
+    if (isClosed())
+      throw new SocketException("socket is closed");
+    
+    getImpl().close();
 
     if (getChannel() != null)
       getChannel().close();
     
-    closed = true;
+    impl = null;
   }
 
   /**
@@ -885,10 +1004,21 @@
    */
   public String toString ()
   {
-    return("Socket " + impl);
-  }
+    try
+      {
+	if (isConnected())
+	  return ("Socket[addr=" + getImpl().getInetAddress()
+		  + ",port=" + getImpl().getPort()
+		  + ",localport=" + getImpl().getLocalPort()
+		  + "]");
+      }
+    catch (SocketException e)
+      {
+	// This cannot happen as we are connected.
+      }
 
-  // Class Methods
+    return "Socket[unconnected]";
+  }
 
   /**
    * Sets the <code>SocketImplFactory</code>.  This may be done only once per 
@@ -930,9 +1060,10 @@
    */
   public void shutdownInput() throws IOException
   {
-    if (impl != null)
-      impl.shutdownInput();
-
+    if (isClosed())
+      throw new SocketException("socket is closed");
+    
+    getImpl().shutdownInput();
     inputShutdown = true;
   }
 
@@ -945,9 +1076,10 @@
    */
   public void shutdownOutput() throws IOException
   {
-    if (impl != null)
-      impl.shutdownOutput();
+    if (isClosed())
+      throw new SocketException("socket is closed");
     
+    getImpl().shutdownOutput();
     outputShutdown = true;
   }
 
@@ -966,13 +1098,18 @@
   /**
    * Checks if the SO_REUSEADDR option is enabled
    *
+   * @return True if SO_REUSEADDR is set, false otherwise.
+   *
    * @exception SocketException If an error occurs
    *
    * @since 1.4
    */
   public boolean getReuseAddress () throws SocketException
   {
-    Object reuseaddr = impl.getOption (SocketOptions.SO_REUSEADDR);
+    if (isClosed())
+      throw new SocketException("socket is closed");
+    
+    Object reuseaddr = getImpl().getOption (SocketOptions.SO_REUSEADDR);
 
     if (!(reuseaddr instanceof Boolean))
       throw new SocketException ("Internal Error");
@@ -983,18 +1120,22 @@
   /**
    * Enables/Disables the SO_REUSEADDR option
    *
+   * @param reuseAddress True if SO_REUSEADDR should be set.
+   * 
    * @exception SocketException If an error occurs
    *
    * @since 1.4
    */
   public void setReuseAddress (boolean on) throws SocketException
   {
-    impl.setOption (SocketOptions.SO_REUSEADDR, new Boolean (on));
+    getImpl().setOption (SocketOptions.SO_REUSEADDR, new Boolean (on));
   }
 
   /**
    * Returns the current traffic class
    *
+   * @return The current traffic class.
+   * 
    * @exception SocketException If an error occurs
    *
    * @see Socket#setTrafficClass(int tc)
@@ -1003,7 +1144,10 @@
    */
   public int getTrafficClass () throws SocketException
   {
-    Object obj = impl.getOption(SocketOptions.IP_TOS);
+    if (isClosed())
+      throw new SocketException("socket is closed");
+    
+    Object obj = getImpl().getOption(SocketOptions.IP_TOS);
 
     if (obj instanceof Integer)
       return ((Integer) obj).intValue ();
@@ -1025,25 +1169,39 @@
    */
   public void setTrafficClass (int tc) throws SocketException
   {
+    if (isClosed())
+      throw new SocketException("socket is closed");
+    
     if (tc < 0 || tc > 255)
       throw new IllegalArgumentException();
 
-    impl.setOption (SocketOptions.IP_TOS, new Integer (tc));
+    getImpl().setOption (SocketOptions.IP_TOS, new Integer (tc));
   }
 
   /**
    * Checks if the socket is connected
    *
+   * @return True if socket is connected, false otherwise.
+   *
    * @since 1.4
    */
   public boolean isConnected ()
   {
-    return impl.getInetAddress () != null;
+    try
+      {
+	return getImpl().getInetAddress () != null;
+      }
+    catch (SocketException e)
+      {
+	return false;
+      }
   }
 
   /**
    * Checks if the socket is already bound.
    *
+   * @return True if socket is bound, false otherwise.
+   *
    * @since 1.4
    */
   public boolean isBound ()
@@ -1054,16 +1212,20 @@
   /**
    * Checks if the socket is closed.
    * 
+   * @return True if socket is closed, false otherwise.
+   *
    * @since 1.4
    */
   public boolean isClosed ()
   {
-    return closed;
+    return impl == null;
   }
 
   /**
    * Checks if the socket's input stream is shutdown
    *
+   * @return True if input is shut down.
+   * 
    * @since 1.4
    */
   public boolean isInputShutdown ()
@@ -1074,6 +1236,8 @@
   /**
    * Checks if the socket's output stream is shutdown
    *
+   * @return True if output is shut down.
+   * 
    * @since 1.4
    */
   public boolean isOutputShutdown ()
