--- /home/tromey/gnu/Nightly/classpath/classpath/java/nio/channels/FileLock.java	2004-04-13 02:20:24.000000000 -0600
+++ java/nio/channels/FileLock.java	2003-06-13 02:27:39.000000000 -0600
@@ -1,4 +1,4 @@
-/* FileLock.java --
+/* FileLock.java -- 
    Copyright (C) 2002 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
@@ -39,7 +39,6 @@
 
 import java.io.IOException;
 
-
 /**
  * @since 1.4
  */
@@ -49,41 +48,42 @@
   long position;
   long size;
   boolean shared;
-
+  
   /**
    * Initializes the file lock.
    *
    * @exception IllegalArgumentException If the preconditions on the parameters do not hold
    */
-  protected FileLock(FileChannel channel, long position, long size,
-                     boolean shared)
+  protected FileLock (FileChannel channel, long position, long size,
+                      boolean shared)
   {
-    if (position < 0 || size < 0)
-      throw new IllegalArgumentException();
+    if (position < 0 ||
+        size < 0)
+      throw new IllegalArgumentException ();
 
     this.channel = channel;
     this.position = position;
     this.size = size;
     this.shared = shared;
   }
-
+ 
   /**
    * Tells whether or not this lock is valid.
    */
   public abstract boolean isValid();
-
+ 
   /**
    * Releases this lock.
    *
    * @exception IOException If an error occurs
    * @exception ClosedChannelException If the locked channel is no longer open.
    */
-  public abstract void release() throws IOException;
-
+  public abstract void release () throws IOException;
+  
   /**
    * Returns the file channel upon whose file this lock is held.
    */
-  public final FileChannel channel()
+  public final FileChannel channel ()
   {
     return channel;
   }
@@ -91,15 +91,15 @@
   /**
    * Tells whether this lock is shared.
    */
-  public final boolean isShared()
+  public final boolean isShared ()
   {
     return shared;
-  }
+  }    
 
   /**
    * Tells whether or not this lock overlaps the given lock range.
    */
-  public final boolean overlaps(long position, long size)
+  public final boolean overlaps (long position, long size)
   {
     if (position > this.position + this.size)
       return false;
@@ -114,15 +114,15 @@
    * Returns the position within the file of the first byte of the
    * locked region.
    */
-  public final long position()
+  public final long position ()
   {
     return position;
   }
-
+    
   /**
    * Returns the size of the locked region in bytes.
    */
-  public final long size()
+  public final long size ()
   {
     return size;
   }
@@ -130,7 +130,7 @@
   /**
    * Returns a string describing the range, type, and validity of this lock.
    */
-  public final String toString()
+  public final String toString ()
   {
     return "file-lock:pos=" + position + "size=" + size;
   }
