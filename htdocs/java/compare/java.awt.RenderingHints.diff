--- /home/tromey/gnu/egcs/classpath/classpath/java/awt/RenderingHints.java	Mon May  6 10:40:01 2002
+++ java/awt/RenderingHints.java	Tue Jan 22 16:01:31 2002
@@ -1,5 +1,4 @@
-/* RenderingHints.java --
-   Copyright (C) 2000, 2001, 2002  Free Software Foundation
+/* Copyright (C) 2000, 2001, 2002  Free Software Foundation
 
 This file is part of GNU Classpath.
 
@@ -35,59 +34,50 @@
 obligated to do so.  If you do not wish to do so, delete this
 exception statement from your version. */
 
-
 package java.awt;
 
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Map;
-import java.util.Set;
-
 /**
- * NEEDS DOCUMENTATION
- *
  * @author Rolf W. Rasmussen <rolfwr@ii.uib.no>
- * @author Eric Blake <ebb9@email.byu.edu>
  */
-public class RenderingHints implements Map, Cloneable
+public class RenderingHints implements
+    //java.util.Map,
+    Cloneable
 {
+
   public abstract static class Key
   {
-    private final int key;
+    private int intKey;
 
     protected Key(int privateKey)
     {
-      key = privateKey;
+      intKey = privateKey;
     }
 
     public abstract boolean isCompatibleValue(Object value);
-
-    protected final int intKey()
+    
+    protected final int intKey() 
     {
-      return key;
-    }
+      return intKey;
+    }    
 
-    public final int hashCode()
+    public final int hashCode() 
     {
       return System.identityHashCode(this);
     }
-
-    public final boolean equals(Object other)
+    
+    public final boolean equals(Object other) 
     {
-      return this == other;
+      return (this == other);
     }
-  } // class Key
+  }
 
-  private static final class KeyImpl extends Key
+  private static class KeyImpl extends Key
   {
-    final String description;
-    final Object v1;
-    final Object v2;
-    final Object v3;
+    String description;
+    Object v1, v2, v3;
 
     KeyImpl(int privateKey, String description,
-            Object v1, Object v2, Object v3)
+	    Object v1, Object v2, Object v3)
     {
       super(privateKey);
       this.description = description;
@@ -95,268 +85,243 @@
       this.v2 = v2;
       this.v3 = v3;
     }
-
-    public boolean isCompatibleValue(Object value)
+    
+    public boolean isCompatibleValue(Object value) 
     {
-      return value == v1 || value == v2 || value == v3;
+      return (value == v1) || (value == v2) || (value == v3);
     }
 
-    public String toString()
+    public String toString() 
     {
       return description;
     }
-  } // class KeyImpl
-
-  private HashMap hintMap = new HashMap();
+  }
 
-  public static final Key KEY_ANTIALIASING;
 
-  public static final Object VALUE_ANTIALIAS_ON
-    = "Antialiased rendering mode";
+  //java.util.HashMap hintMap;
 
-  public static final Object VALUE_ANTIALIAS_OFF
-    = "Nonantialiased rendering mode";
+  public static final Key KEY_ANTIALIASING;
+  public static final Object
+    VALUE_ANTIALIAS_ON = "Antialiased rendering mode",
+    VALUE_ANTIALIAS_DEFAULT = "Default antialiasing rendering mode";
 
-  public static final Object VALUE_ANTIALIAS_DEFAULT
-    = "Default antialiasing rendering mode";
+  static 
+  {
+    KEY_ANTIALIASING = new KeyImpl(1, "Global antialiasing enable key",
+				   VALUE_ANTIALIAS_ON,
+				   VALUE_ANTIALIAS_DEFAULT,
+				   VALUE_ANTIALIAS_DEFAULT);
+  }
 
   public static final Key KEY_RENDERING;
+  public static final Object 
+    VALUE_RENDER_SPEED = "Fastest rendering methods",
+    VALUE_RENDER_QUALITY = "Highest quality rendering methods",
+    VALUE_RENDER_DEFAULT = "Default rendering methods";
 
-  public static final Object VALUE_RENDER_SPEED
-    = "Fastest rendering methods";
-
-  public static final Object VALUE_RENDER_QUALITY
-    = "Highest quality rendering methods";
-
-  public static final Object VALUE_RENDER_DEFAULT
-    = "Default rendering methods";
-
+  static
+  {
+    KEY_RENDERING = new KeyImpl(2, "Global rendering quality key",
+				VALUE_RENDER_SPEED,
+				VALUE_RENDER_QUALITY,
+				VALUE_RENDER_DEFAULT);
+  }
+  
   public static final Key KEY_DITHERING;
+  public static final Object
+    VALUE_DITHER_DISABLE = "Nondithered rendering mode",
+    VALUE_DITHER_ENABLE = "Dithered rendering mode",
+    VALUE_DITHER_DEFAULT = "Default dithering mode";
 
-  public static final Object VALUE_DITHER_DISABLE
-    = "Nondithered rendering mode";
-
-  public static final Object VALUE_DITHER_ENABLE
-    = "Dithered rendering mode";
-
-  public static final Object VALUE_DITHER_DEFAULT
-    = "Default dithering mode";
-
+  static
+  {
+    KEY_DITHERING = new KeyImpl(3, "Dithering quality key",
+				VALUE_DITHER_DISABLE,
+				VALUE_DITHER_ENABLE,
+				VALUE_DITHER_DEFAULT);
+  }
+  
   public static final Key KEY_TEXT_ANTIALIASING;
-
-  public static final Object VALUE_TEXT_ANTIALIAS_ON
-    = "Antialiased text mode";
-
-  public static final Object VALUE_TEXT_ANTIALIAS_OFF
-    = "Nonantialiased text mode";
-
-  public static final Object VALUE_TEXT_ANTIALIAS_DEFAULT
-    = "Default antialiasing text mode";
-
+  public static final Object
+    VALUE_TEXT_ANTIALIAS_ON = "Antialiased text mode",
+    VALUE_TEXT_ANTIALIAS_OFF = "Nonantialiased text mode",
+    VALUE_TEXT_ANTIALIAS_DEFAULT = "Default antialiasing text mode";
+
+  static 
+  {
+    KEY_TEXT_ANTIALIASING = new KeyImpl(4, "Text-specific antialiasing enable key",
+					VALUE_TEXT_ANTIALIAS_ON,
+					VALUE_TEXT_ANTIALIAS_OFF,
+					VALUE_TEXT_ANTIALIAS_DEFAULT);
+  }
+  
   public static final Key KEY_FRACTIONALMETRICS;
+  public static final Object
+    VALUE_FRACTIONALMETRICS_OFF = "Integer text metrics mode",
+    VALUE_FRACTIONALMETRICS_ON = "Fractional text metrics mode",
+    VALUE_FRACTIONALMETRICS_DEFAULT = "Default fractional text metrics mode";
 
-  public static final Object VALUE_FRACTIONALMETRICS_OFF
-    = "Integer text metrics mode";
-
-  public static final Object VALUE_FRACTIONALMETRICS_ON
-    = "Fractional text metrics mode";
-
-  public static final Object VALUE_FRACTIONALMETRICS_DEFAULT
-    = "Default fractional text metrics mode";
-
+  static 
+  {
+    KEY_FRACTIONALMETRICS = new KeyImpl(5, "Fractional metrics enable key",
+					VALUE_FRACTIONALMETRICS_OFF,
+					VALUE_FRACTIONALMETRICS_ON,
+					VALUE_FRACTIONALMETRICS_DEFAULT);
+  }
+  
   public static final Key KEY_INTERPOLATION;
+  public static final Object
+    VALUE_INTERPOLATION_NEAREST_NEIGHBOR = "Nearest Neighbor image interpolation mode",
+    VALUE_INTERPOLATION_BILINEAR = "Bilinear image interpolation mode",
+    VALUE_INTERPOLATION_BICUBIC = "Bicubic image interpolation mode";
 
-  public static final Object VALUE_INTERPOLATION_NEAREST_NEIGHBOR
-    = "Nearest Neighbor image interpolation mode";
-
-  public static final Object VALUE_INTERPOLATION_BILINEAR
-    = "Bilinear image interpolation mode";
-
-  public static final Object VALUE_INTERPOLATION_BICUBIC
-    = "Bicubic image interpolation mode";
-
+  static 
+  {
+    KEY_INTERPOLATION = new KeyImpl(6, "Image interpolation method key",
+				    VALUE_INTERPOLATION_NEAREST_NEIGHBOR,
+				    VALUE_INTERPOLATION_BILINEAR,
+				    VALUE_INTERPOLATION_BICUBIC);
+  }
+  
   public static final Key KEY_ALPHA_INTERPOLATION;
+  public static final Object
+    VALUE_ALPHA_INTERPOLATION_SPEED = "Fastest alpha blending methods",
+    VALUE_ALPHA_INTERPOLATION_QUALITY = "Highest quality alpha blending methods",
+    VALUE_ALPHA_INTERPOLATION_DEFAULT = "Default alpha blending methods";
 
-  public static final Object VALUE_ALPHA_INTERPOLATION_SPEED
-    = "Fastest alpha blending methods";
-
-  public static final Object VALUE_ALPHA_INTERPOLATION_QUALITY
-    = "Highest quality alpha blending methods";
-
-  public static final Object VALUE_ALPHA_INTERPOLATION_DEFAULT
-    = "Default alpha blending methods";
-
+  static
+  {
+    KEY_ALPHA_INTERPOLATION = new KeyImpl(7, "Alpha blending interpolation method key",
+					  VALUE_ALPHA_INTERPOLATION_SPEED,
+					  VALUE_ALPHA_INTERPOLATION_QUALITY,
+					  VALUE_ALPHA_INTERPOLATION_DEFAULT);
+  }
+  
   public static final Key KEY_COLOR_RENDERING;
+  public static final Object
+    VALUE_COLOR_RENDER_SPEED = "Fastest color rendering mode",
+    VALUE_COLOR_RENDER_QUALITY = "Highest quality color rendering mode",
+    VALUE_COLOR_RENDER_DEFAULT = "Default color rendering mode";
 
-  public static final Object VALUE_COLOR_RENDER_SPEED
-    = "Fastest color rendering mode";
-
-  public static final Object VALUE_COLOR_RENDER_QUALITY
-    = "Highest quality color rendering mode";
-
-  public static final Object VALUE_COLOR_RENDER_DEFAULT
-    = "Default color rendering mode";
-
-  public static final Key KEY_STROKE_CONTROL;
-
-  public static final Object VALUE_STROKE_DEFAULT
-    = "Default stroke normalization";
-
-  public static final Object VALUE_STROKE_NORMALIZE
-    = "Normalize strokes for consistent rendering";
-
-  public static final Object VALUE_STROKE_PURE
-    = "Pure stroke conversion for accurate paths";
-
-  static
+  static 
   {
-    KEY_ANTIALIASING = new KeyImpl(1, "Global antialiasing enable key",
-                                   VALUE_ANTIALIAS_ON,
-                                   VALUE_ANTIALIAS_OFF,
-                                   VALUE_ANTIALIAS_DEFAULT);
-    KEY_RENDERING = new KeyImpl(2, "Global rendering quality key",
-                                VALUE_RENDER_SPEED,
-                                VALUE_RENDER_QUALITY,
-                                VALUE_RENDER_DEFAULT);
-    KEY_DITHERING = new KeyImpl(3, "Dithering quality key",
-                                VALUE_DITHER_DISABLE,
-                                VALUE_DITHER_ENABLE,
-                                VALUE_DITHER_DEFAULT);
-    KEY_TEXT_ANTIALIASING
-      = new KeyImpl(4, "Text-specific antialiasing enable key",
-                    VALUE_TEXT_ANTIALIAS_ON,
-                    VALUE_TEXT_ANTIALIAS_OFF,
-                    VALUE_TEXT_ANTIALIAS_DEFAULT);
-    KEY_FRACTIONALMETRICS = new KeyImpl(5, "Fractional metrics enable key",
-                                        VALUE_FRACTIONALMETRICS_OFF,
-                                        VALUE_FRACTIONALMETRICS_ON,
-                                        VALUE_FRACTIONALMETRICS_DEFAULT);
-    KEY_INTERPOLATION = new KeyImpl(6, "Image interpolation method key",
-                                    VALUE_INTERPOLATION_NEAREST_NEIGHBOR,
-                                    VALUE_INTERPOLATION_BILINEAR,
-                                    VALUE_INTERPOLATION_BICUBIC);
-    KEY_ALPHA_INTERPOLATION
-      = new KeyImpl(7, "Alpha blending interpolation method key",
-                    VALUE_ALPHA_INTERPOLATION_SPEED,
-                    VALUE_ALPHA_INTERPOLATION_QUALITY,
-                    VALUE_ALPHA_INTERPOLATION_DEFAULT);
     KEY_COLOR_RENDERING = new KeyImpl(8, "Color rendering quality key",
-                                      VALUE_COLOR_RENDER_SPEED,
-                                      VALUE_COLOR_RENDER_QUALITY,
-                                      VALUE_COLOR_RENDER_DEFAULT);
-    KEY_STROKE_CONTROL = new KeyImpl(9, "Stroke normalization control key",
-                                     VALUE_STROKE_DEFAULT,
-                                     VALUE_STROKE_NORMALIZE,
-                                     VALUE_STROKE_PURE);
+				      VALUE_COLOR_RENDER_SPEED,
+				      VALUE_COLOR_RENDER_QUALITY,
+				      VALUE_COLOR_RENDER_DEFAULT);
   }
 
-  public RenderingHints(Map init)
+  public static final Key KEY_STROKE_CONTROL;
+  public static final Object
+    VALUE_STROKE_DEFAULT = "Default stroke control mode",
+    VALUE_STROKE_NORMALIZE = "Normalize stroke control mode",
+    VALUE_STROKE_PURE = "Pure stroke control mode";
+
+  static 
   {
-    putAll(init);
+    KEY_STROKE_CONTROL = new KeyImpl(9, "Stroke normalization control key",
+				     VALUE_STROKE_DEFAULT,
+				     VALUE_STROKE_NORMALIZE,
+				     VALUE_STROKE_PURE);
   }
+  
+  //public RenderingHints(Map init);
 
   public RenderingHints(Key key, Object value)
   {
-    put(key, value);
+    throw new UnsupportedOperationException("FIXME, not implemented yet");
   }
 
-  public int size()
+  public int size() 
   {
-    return hintMap.size();
+    throw new UnsupportedOperationException("FIXME, not implemented yet");
   }
-
-  public boolean isEmpty()
+  
+  public boolean isEmpty() 
   {
-    return hintMap.isEmpty();
+    throw new UnsupportedOperationException("FIXME, not implemented yet");
   }
 
-  public boolean containsKey(Object key)
-  {
-    if (key == null)
-      throw new NullPointerException();
-    return hintMap.containsKey((Key) key);
+  public boolean containsKey(Object key) 
+  {      
+    throw new UnsupportedOperationException("FIXME, not implemented yet");
   }
-
-  public boolean containsValue(Object value)
+  
+  public boolean containsValue(Object value) 
   {
-    return hintMap.containsValue(value);
+    throw new UnsupportedOperationException("FIXME, not implemented yet");
   }
-
+  
   public Object get(Object key)
   {
-    return hintMap.get((Key) key);
+    throw new UnsupportedOperationException("FIXME, not implemented yet");
   }
-
-  public Object put(Object key, Object value)
+  
+  public Object put(Object key, Object value) 
   {
-    if (key == null || value == null)
-      throw new NullPointerException();
-    if (! ((Key) key).isCompatibleValue(value))
-      throw new IllegalArgumentException();
-    return hintMap.put(key, value);
+    throw new UnsupportedOperationException("FIXME, not implemented yet");
   }
-
-  public void add(RenderingHints hints)
+  
+  public void add(RenderingHints hints) 
   {
-    hintMap.putAll(hints);
+    throw new UnsupportedOperationException("FIXME, not implemented yet");
   }
 
-  public void clear()
+  public void clear() 
   {
-    hintMap.clear();
+    throw new UnsupportedOperationException("FIXME, not implemented yet");
   }
-
-  public Object remove(Object key)
+  
+  public Object remove(Object key) 
   {
-    return remove((Key) key);
+    throw new UnsupportedOperationException("FIXME, not implemented yet");
   }
-
-  public void putAll(Map m)
+  
+  /*
+  public void putAll(Map m) 
   {
-    hintMap.putAll(m);
+    throw new UnsupportedOperationException("FIXME, not implemented yet");
   }
-
-  public Set keySet()
+  */
+  
+  /*
+  public Set keySet() 
   {
-    return hintMap.keySet();
+    throw new UnsupportedOperationException("FIXME, not implemented yet");
   }
-
-  public Collection values()
+  */
+  
+  /*
+  public Collection values() 
   {
-    return hintMap.values();
+    throw new UnsupportedOperationException("FIXME, not implemented yet");
   }
-
-  public Set entrySet()
+  */
+  
+  /*
+  public Set entrySet() 
   {
-    return Collections.unmodifiableSet(hintMap.entrySet());
+    throw new UnsupportedOperationException("FIXME, not implemented yet");
   }
-
-  public boolean equals(Object o)
+  */
+  
+  public boolean equals(Object o) 
   {
-    return hintMap.equals(o);
+    throw new UnsupportedOperationException("FIXME, not implemented yet");
   }
-
-  public int hashCode()
+  
+  public int hashCode() 
   {
-    return hintMap.hashCode();
+    throw new UnsupportedOperationException("FIXME, not implemented yet");
   }
-
-  public Object clone()
+  
+  public Object clone() 
   {
-    try
-      {
-        RenderingHints copy = (RenderingHints) super.clone();
-        copy.hintMap = (HashMap) hintMap.clone();
-        return copy;
-      }
-    catch (CloneNotSupportedException e)
-      {
-        throw (Error) new InternalError().initCause(e); // Impossible
-      }
+    throw new UnsupportedOperationException("FIXME, not implemented yet");
   }
-
-  public String toString()
+  
+  public String toString() 
   {
-    return hintMap.toString();
+    throw new UnsupportedOperationException("FIXME, not implemented yet");
   }
-} // class RenderingHints
+}
