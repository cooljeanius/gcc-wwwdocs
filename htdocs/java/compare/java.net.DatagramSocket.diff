--- /home/tromey/gnu/Nightly/classpath/classpath/java/net/DatagramSocket.java	Mon Mar  3 02:19:22 2003
+++ java/net/DatagramSocket.java	Mon Mar  3 02:17:48 2003
@@ -79,11 +79,6 @@
   DatagramChannel ch;
 
   /**
-   * This is the local address which cannot be changed
-   */
-  private InetAddress local_addr;
-
-  /**
    * This is the address we are "connected" to
    */
   private InetAddress remoteAddress;
@@ -153,7 +148,38 @@
    */
   public DatagramSocket(int port, InetAddress laddr) throws SocketException
   {
-    this (new InetSocketAddress (laddr != null ? laddr : InetAddress.ANY_IF, port));
+    if (port < 0 || port > 65535)
+      throw new IllegalArgumentException("Invalid port: " + port);
+
+    SecurityManager s = System.getSecurityManager();
+    if (s != null)
+      s.checkListen(port);
+
+    String propVal = System.getProperty("impl.prefix");
+    if (propVal == null || propVal.equals(""))
+      impl = new PlainDatagramSocketImpl();
+    else
+      try
+	{
+          impl = (DatagramSocketImpl) Class.forName
+            ("java.net." + propVal + "DatagramSocketImpl").newInstance();
+	}
+      catch (Exception e)
+	{
+	  System.err.println("Could not instantiate class: java.net." +
+	    propVal + "DatagramSocketImpl");
+	  impl = new PlainDatagramSocketImpl();
+	}
+    impl.create();
+
+    // For multicasting, set the socket to be reused (Stevens pp. 195-6).
+    if (this instanceof MulticastSocket)
+      impl.setOption(SocketOptions.SO_REUSEADDR, new Boolean(true));
+
+    impl.bind(port, laddr == null ? InetAddress.ANY_IF : laddr);
+    
+    remoteAddress = null;
+    remotePort = -1;
   }
 
   /**
@@ -171,21 +197,8 @@
    */
   public DatagramSocket (SocketAddress address) throws SocketException
   {
-    InetSocketAddress tmp = (InetSocketAddress) address;
-
-    SecurityManager s = System.getSecurityManager();
-    if (s != null)
-      s.checkListen(tmp.getPort ());
-  
-    // Why is there no factory for this?
-    impl = new PlainDatagramSocketImpl();
-    impl.create();
-
-    if (address != null)
-      {
-        local_addr = tmp.getAddress ();
-        impl.bind(tmp.getPort (), tmp.getAddress ());
-      }
+    this (((InetSocketAddress) address).getPort (),
+          ((InetSocketAddress) address).getAddress ());
   }
   
   /**
@@ -237,19 +250,38 @@
    */
   public InetAddress getLocalAddress()
   {
-    if (impl == null)
-      return null;
-
-    // FIXME: According to libgcj, checkConnect() is supposed to be called
-    // before performing this operation.  Problems: 1) We don't have the
-    // addr until after we do it, so we do a post check.  2). The docs I
-    // see don't require this in the Socket case, only DatagramSocket, but
-    // we'll assume they mean both.
-    SecurityManager sm = System.getSecurityManager();
-    if (sm != null)
-      sm.checkConnect(local_addr.getHostName(), getLocalPort());
+    // FIXME: JCL p. 510 says this should call checkConnect.  But what
+    // string should be used as the hostname?  Maybe this is just a side
+    // effect of calling InetAddress.getLocalHost.
+    //
+    // And is getOption with SO_BINDADDR the right way to get the address?
+    // Doesn't seem to be since this method doesn't throw a SocketException
+    // and SO_BINADDR can throw one.
+    //
+    // Also see RETURNS section in JCL p. 510 about returning any local
+    // addr "if the current execution context is not allowed to connect to
+    // the network interface that is actually bound to this datagram socket."
+    // How is that done?  via InetAddress.getLocalHost?  But that throws
+    // an UnknownHostException and this method doesn't.
+    //
+    // if (s != null)
+    //   s.checkConnect("localhost", -1);
+    try
+      {
+        return (InetAddress)impl.getOption(SocketOptions.SO_BINDADDR);
+      }
+    catch (SocketException ex)
+      {
+      }
 
-    return local_addr;
+    try
+      {
+        return InetAddress.getLocalHost();
+      }
+    catch (UnknownHostException ex)
+      {
+        return null;
+      }
   }
 
   /**
@@ -259,6 +291,9 @@
    */
   public int getLocalPort()
   {
+    if (!isBound ())
+      return -1;
+
     return impl.getLocalPort();
   }
 
@@ -282,7 +317,7 @@
     if (timeout instanceof Integer) 
       return ((Integer)timeout).intValue();
     else
-      throw new SocketException("Internal Error");
+      return 0;
   }
 
   /**
@@ -296,7 +331,7 @@
    *
    * @since 1.1
    */
-  public void setSoTimeout(int timeout) throws SocketException
+  public synchronized void setSoTimeout(int timeout) throws SocketException
   {
     if (timeout < 0)
       throw new IllegalArgumentException("Invalid timeout: " + timeout);
@@ -386,6 +421,9 @@
    */
   public void setReceiveBufferSize(int size) throws SocketException
   {
+    if (impl == null)
+      throw new SocketException ("Cannot initialize Socket implementation");
+
     if (size < 0)
       throw new IllegalArgumentException("Buffer size is less than 0");
 
@@ -420,13 +458,17 @@
     if (sm != null)
       sm.checkConnect(address.getHostName(), port);
 
-    this.remoteAddress = address;
-    this.remotePort = port;
-
-    /* FIXME: Shit, we can't do this even though the OS supports it since this 
-       method isn't in DatagramSocketImpl. */
-    //  impl.connect(address, port);
-  } 
+    try
+      {
+        impl.connect (address, port);
+        remoteAddress = address;
+        remotePort = port;
+      }
+    catch (SocketException e)
+      {
+        // This means simply not connected.
+      }
+  }
 
   /**
    * This method disconnects this socket from the address/port it was
@@ -437,9 +479,9 @@
    */
   public void disconnect()
   {
-    // FIXME: See my comments on connect()
-    this.remoteAddress = null;
-    this.remotePort = -1;
+    impl.disconnect();
+    remoteAddress = null;
+    remotePort = -1;
   }
 
   /**
