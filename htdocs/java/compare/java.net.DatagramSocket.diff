--- /home/tromey/gnu/Nightly/classpath/classpath/java/net/DatagramSocket.java	2003-09-22 02:19:32.000000000 -0600
+++ java/net/DatagramSocket.java	2003-11-26 02:18:16.000000000 -0700
@@ -67,7 +67,7 @@
    * This is the user DatagramSocketImplFactory for this class.  If this
    * variable is null, a default factory is used.
    */
-  static DatagramSocketImplFactory factory;
+  private static DatagramSocketImplFactory factory;
 	  
   /**
    * This is the implementation object used by this socket.
@@ -85,11 +85,6 @@
   private int remotePort = -1;
 
   /**
-   * Indicates when the socket is closed.
-   */
-  private boolean closed = false;
-
-  /**
    * Creates a <code>DatagramSocket</code> from a specified 
    * <code>DatagramSocketImpl</code> instance
    *
@@ -100,6 +95,9 @@
    */
   protected DatagramSocket (DatagramSocketImpl impl)
   {
+    if (impl == null)
+      throw new NullPointerException("impl may not be null");
+
     this.impl = impl;
     this.remoteAddress = null;
     this.remotePort = -1;
@@ -115,7 +113,7 @@
    */
   public DatagramSocket() throws SocketException
   {
-    this(0, null);
+    this(new InetSocketAddress(0));
   }
 
   /**
@@ -130,7 +128,7 @@
    */
   public DatagramSocket(int port) throws SocketException
   {
-    this(port, null);
+    this(new InetSocketAddress(port));
   }
 
   /**
@@ -138,21 +136,32 @@
    * the specified local port and address.
    *
    * @param port The local port number to bind to.
-   * @param laddr The local address to bind to.
+   * @param addr The local address to bind to.
    *
    * @exception SecurityException If a security manager exists and its
    * checkListen method doesn't allow the operation.
    * @exception SocketException If an error occurs.
    */
-  public DatagramSocket(int port, InetAddress laddr) throws SocketException
+  public DatagramSocket(int port, InetAddress addr) throws SocketException
   {
-    if (port < 0 || port > 65535)
-      throw new IllegalArgumentException("Invalid port: " + port);
-
-    SecurityManager s = System.getSecurityManager();
-    if (s != null)
-      s.checkListen(port);
+    this(new InetSocketAddress(addr, port));
+  }
 
+  /**
+   * Initializes a new instance of <code>DatagramSocket</code> that binds to 
+   * the specified local port and address.
+   *
+   * @param port The local port number to bind to.
+   * @param laddr The local address to bind to.
+   *
+   * @exception SecurityException If a security manager exists and its
+   * <code>checkListen</code> method doesn't allow the operation.
+   * @exception SocketException If an error occurs.
+   *
+   * @since 1.4
+   */
+  public DatagramSocket (SocketAddress address) throws SocketException
+  {
     String propVal = System.getProperty("impl.prefix");
     if (propVal == null || propVal.equals(""))
       impl = new PlainDatagramSocketImpl();
@@ -170,60 +179,57 @@
 	}
     impl.create();
 
-    if (laddr == null)
-      laddr = InetAddress.ANY_IF;
+    if (address == null)
+      return;
+
+    if (! (address instanceof InetSocketAddress))
+      throw new SocketException("unsupported address type");
+
+    InetAddress addr = ((InetSocketAddress) address).getAddress();
+    int port = ((InetSocketAddress) address).getPort();
+
+    if (port < 0 || port > 65535)
+      throw new IllegalArgumentException("Invalid port: " + port);
+
+    SecurityManager s = System.getSecurityManager();
+    if (s != null)
+      s.checkListen(port);
+
+    if (addr == null)
+      addr = InetAddress.ANY_IF;
     
     try
       {
-        impl.bind (port, laddr);
+        impl.bind(port, addr);
       }
     catch (SocketException exception)
       {
-        impl.close ();
+        impl.close();
         throw exception;
       }
     catch (RuntimeException exception)
       {
-        impl.close ();
+        impl.close();
         throw exception;
       }
     catch (Error error)
       {
-        impl.close ();
+        impl.close();
         throw error;
       }
   }
-
-  /**
-   * Initializes a new instance of <code>DatagramSocket</code> that binds to 
-   * the specified local port and address.
-   *
-   * @param port The local port number to bind to.
-   * @param laddr The local address to bind to.
-   *
-   * @exception SecurityException If a security manager exists and its
-   * <code>checkListen</code> method doesn't allow the operation.
-   * @exception SocketException If an error occurs.
-   *
-   * @since 1.4
-   */
-  public DatagramSocket (SocketAddress address) throws SocketException
-  {
-    this (((InetSocketAddress) address).getPort (),
-          ((InetSocketAddress) address).getAddress ());
-  }
   
   /**
    * Closes this datagram socket.
    */
   public void close()
   {
-    if (!closed)
+    if (!isClosed())
       {
         impl.close();
+        impl = null;
         remoteAddress = null;
         remotePort = -1;
-        closed = true;
       }
   }
 
@@ -262,8 +268,7 @@
    */
   public InetAddress getLocalAddress()
   {
-    if (impl == null
-	|| closed)
+    if (isClosed())
       return null;
     
     InetAddress localAddr;
@@ -295,6 +300,9 @@
    */
   public int getLocalPort()
   {
+    if (isClosed())
+      return -1;
+	      
     return impl.getLocalPort();
   }
 
@@ -310,8 +318,8 @@
    */
   public synchronized int getSoTimeout() throws SocketException
   {
-    if (impl == null)
-      throw new SocketException ("Cannot initialize Socket implementation");
+    if (isClosed())
+      throw new SocketException("socket is closed");
 
     Object timeout = impl.getOption(SocketOptions.SO_TIMEOUT);
 
@@ -334,6 +342,9 @@
    */
   public synchronized void setSoTimeout(int timeout) throws SocketException
   {
+    if (isClosed())
+      throw new SocketException("socket is closed");
+    
     if (timeout < 0)
       throw new IllegalArgumentException("Invalid timeout: " + timeout);
 
@@ -353,8 +364,8 @@
    */
   public int getSendBufferSize() throws SocketException
   {
-    if (impl == null)
-      throw new SocketException ("Cannot initialize Socket implementation");
+    if (isClosed())
+      throw new SocketException("socket is closed");
 
     Object obj = impl.getOption(SocketOptions.SO_SNDBUF);
 
@@ -378,6 +389,9 @@
    */
   public void setSendBufferSize(int size) throws SocketException
   {
+    if (isClosed())
+      throw new SocketException("socket is closed");
+    
     if (size < 0)
       throw new IllegalArgumentException("Buffer size is less than 0");
   
@@ -397,8 +411,8 @@
    */
   public int getReceiveBufferSize() throws SocketException
   {
-    if (impl == null)
-      throw new SocketException ("Cannot initialize Socket implementation");
+    if (isClosed())
+      throw new SocketException("socket is closed");
 
     Object obj = impl.getOption(SocketOptions.SO_RCVBUF);
   
@@ -422,8 +436,8 @@
    */
   public void setReceiveBufferSize(int size) throws SocketException
   {
-    if (impl == null)
-      throw new SocketException ("Cannot initialize Socket implementation");
+    if (isClosed())
+      throw new SocketException("socket is closed");
 
     if (size < 0)
       throw new IllegalArgumentException("Buffer size is less than 0");
@@ -506,12 +520,13 @@
    */
   public synchronized void receive(DatagramPacket p) throws IOException
   {
-    if (impl == null)
-      throw new IOException ("Cannot initialize Socket implementation");
-
-    if (remoteAddress != null && remoteAddress.isMulticastAddress ())
-      throw new IOException (
-        "Socket connected to a multicast address my not receive");
+    if (isClosed())
+      throw new SocketException("socket is closed");
+    
+    if (remoteAddress != null
+        && remoteAddress.isMulticastAddress())
+      throw new IOException
+        ("Socket connected to a multicast address my not receive");
 
     if (getChannel() != null
         && !getChannel().isBlocking ())
@@ -541,6 +556,9 @@
    */
   public void send(DatagramPacket p) throws IOException
   {
+    if (isClosed())
+      throw new SocketException("socket is closed");
+    
     // JDK1.2: Don't do security checks if socket is connected; see jdk1.2 api.
     SecurityManager s = System.getSecurityManager();
     if (s != null && !isConnected ())
@@ -585,6 +603,9 @@
   public void bind (SocketAddress address)
     throws SocketException
   {
+    if (isClosed())
+      throw new SocketException("socket is closed");
+    
     if (! (address instanceof InetSocketAddress))
       throw new IllegalArgumentException ();
 
@@ -604,7 +625,7 @@
    */
   public boolean isClosed()
   {
-    return closed;
+    return impl == null;
   }
 
   /**
@@ -629,6 +650,8 @@
    */
   public void connect (SocketAddress address) throws SocketException
   {
+    if (isClosed())
+    
     if ( !(address instanceof InetSocketAddress) )
       throw new IllegalArgumentException (
 		      "SocketAddress is not InetSocketAddress");
@@ -713,8 +736,8 @@
    */
   public void setReuseAddress(boolean on) throws SocketException
   {
-    if (impl == null)
-      throw new SocketException ("Cannot initialize Socket implementation");
+    if (isClosed())
+      throw new SocketException("socket is closed");
 
     impl.setOption (SocketOptions.SO_REUSEADDR, new Boolean (on));
   }
@@ -728,8 +751,8 @@
    */
   public boolean getReuseAddress() throws SocketException
   {
-    if (impl == null)
-      throw new SocketException ("Cannot initialize Socket implementation");
+    if (isClosed())
+      throw new SocketException("socket is closed");
 
     Object obj = impl.getOption (SocketOptions.SO_REUSEADDR);
   
@@ -750,8 +773,8 @@
    */
   public void setBroadcast(boolean on) throws SocketException
   {
-    if (impl == null)
-      throw new SocketException ("Cannot initialize Socket implementation");
+    if (isClosed())
+      throw new SocketException("socket is closed");
 
     impl.setOption (SocketOptions.SO_BROADCAST, new Boolean (on));
   }
@@ -765,8 +788,8 @@
    */
   public boolean getBroadcast() throws SocketException
   {
-    if (impl == null)
-      throw new SocketException ("Cannot initialize Socket implementation");
+    if (isClosed())
+      throw new SocketException("socket is closed");
 
     Object obj = impl.getOption (SocketOptions.SO_BROADCAST);
   
@@ -791,8 +814,8 @@
   public void setTrafficClass(int tc)
     throws SocketException
   {
-    if (impl == null)
-      throw new SocketException ("Cannot initialize Socket implementation");
+    if (isClosed())
+      throw new SocketException("socket is closed");
 
     if (tc < 0 || tc > 255)
       throw new IllegalArgumentException();
@@ -811,8 +834,8 @@
    */
   public int getTrafficClass() throws SocketException
   {
-    if (impl == null)
-      throw new SocketException( "Cannot initialize Socket implementation");
+    if (isClosed())
+      throw new SocketException("socket is closed");
 
     Object obj = impl.getOption(SocketOptions.IP_TOS);
 
