--- /home/tromey/gnu/Nightly/classpath/classpath/java/util/logging/Logger.java	2003-08-13 02:19:51.000000000 -0600
+++ java/util/logging/Logger.java	2003-06-21 04:31:55.000000000 -0600
@@ -589,10 +589,9 @@
 			       String message,
 			       Object param)
   {
-  	StackTraceElement caller = getCallerStackFrame();
     logp(level,
-	 caller.getClassName(),
-	 caller.getMethodName(),
+	 /* sourceClass*/ null,
+	 /* sourceMethod */ null,
 	 message,
 	 param);
   }
@@ -602,10 +601,9 @@
 			       String message,
 			       Object[] params)
   {
-    StackTraceElement caller = getCallerStackFrame();
     logp(level,
-	 caller.getClassName(),
-	 caller.getMethodName(),
+	 /* sourceClass*/ null,
+	 /* sourceMethod */ null,
 	 message,
 	 params);
   }
@@ -615,10 +613,9 @@
 			       String message,
 			       Throwable thrown)
   {
-	StackTraceElement caller = getCallerStackFrame();    
     logp(level,
-	 caller.getClassName(),
-	 caller.getMethodName(),
+	 /* sourceClass*/ null,
+	 /* sourceMethod */ null,
 	 message,
 	 thrown);
   }
@@ -1167,23 +1164,4 @@
 
     this.parent = parent;
   }
-  
-  /**
-   * Gets the StackTraceElement of the first class that is not this class.
-   * That should be the initial caller of a logging method.
-   * @return caller of the initial looging method
-   */
-  private StackTraceElement getCallerStackFrame()
-  {
-    Throwable t = new Throwable();
-    StackTraceElement[] stackTrace = t.getStackTrace();
-    int index = 0;
-    // skip to stackentries until this class
-    while(!stackTrace[index].getClassName().equals(getClass().getName())){index++;}
-    // skip the stackentries of this class
-    while(stackTrace[index].getClassName().equals(getClass().getName())){index++;}
-
-    return stackTrace[index];
-  }
-  
 }
