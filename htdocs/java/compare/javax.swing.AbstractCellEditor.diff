--- /home/tromey/gnu/Nightly/classpath/classpath/javax/swing/AbstractCellEditor.java	2004-01-28 02:27:13.000000000 -0700
+++ javax/swing/AbstractCellEditor.java	2003-06-13 02:27:42.000000000 -0600
@@ -1,5 +1,5 @@
 /* AbstractCellEditor.java --
-   Copyright (C) 2002, 2004 Free Software Foundation, Inc.
+   Copyright (C) 2002 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -54,15 +54,24 @@
 {
   static final long serialVersionUID = -1048006551406220959L;
 
-  /**
-   * listenerList
-   */
-  protected EventListenerList listenerList;
-
-  /**
-   * changeEvent
-   */
-  protected transient ChangeEvent changeEvent;
+	//-------------------------------------------------------------
+	// Variables --------------------------------------------------
+	//-------------------------------------------------------------
+
+	/**
+	 * listenerList
+	 */
+	protected EventListenerList listenerList;
+
+	/**
+	 * changeEvent
+	 */
+	protected transient ChangeEvent changeEvent;
+
+
+	//-------------------------------------------------------------
+	// Initialization ---------------------------------------------
+	//-------------------------------------------------------------
 
 	/**
 	 * Constructor AbstractCellEditor
@@ -71,6 +80,11 @@
 		// TODO
 	} // AbstractCellEditor()
 
+
+	//-------------------------------------------------------------
+	// Methods ----------------------------------------------------
+	//-------------------------------------------------------------
+
 	/**
 	 * isCellEditable
 	 * @param event TODO
@@ -105,64 +119,40 @@
 	} // cancelCellEditing()
 
 	/**
+	 * addCellEditorListener
+	 * @param listener TODO
+	 */
+	public void addCellEditorListener(CellEditorListener listener) {
+		// TODO
+	} // addCellEditorListener()
+
+	/**
+	 * removeCellEditorListener
+	 * @param listener TODO
+	 */
+	public void removeCellEditorListener(CellEditorListener listener) {
+		// TODO
+	} // removeCellEditorListener()
+
+	/**
+	 * fireEditingStopped
+	 */
+	protected void fireEditingStopped() {
+		// TODO
+	} // fireEditingStopped()
+
+	/**
+	 * fireEditingCanceled
+	 */
+	protected void fireEditingCanceled() {
+		// TODO
+	} // fireEditingCanceled()
+
+	/**
 	 * getCellEditorValue
 	 * @returns Object
 	 */
 	public abstract Object getCellEditorValue();
 
-  /**
-   * addCellEditorListener
-   *
-   * @param listener The listener to add
-   */
-  public void addCellEditorListener (CellEditorListener listener)
-  {
-    listenerList.add (CellEditorListener.class, listener);
-  }
-
-  /**
-   * removeCellEditorListener
-   *
-   * @param listener The listener to remove
-   */
-  public void removeCellEditorListener (CellEditorListener listener)
-  {
-    listenerList.remove (CellEditorListener.class, listener);
-  }
-	
-  /**
-   * getCellEditorListeners
-   *
-   * @since 1.4
-   */
-  public CellEditorListener[] getCellEditorListeners()
-  {
-    return (CellEditorListener[]) listenerList.getListeners (CellEditorListener.class);
-  }
-
-  /**
-   * fireEditingStopped
-   */
-  protected void fireEditingStopped()
-  {
-    CellEditorListener[] listeners = getCellEditorListeners();
-
-    for (int index = 0; index < listeners.length; index++)
-      {
-	listeners [index].editingStopped (changeEvent);
-      }
-  }
-
-  /**
-   * fireEditingCanceled
-   */
-  protected void fireEditingCanceled()
-  {
-    CellEditorListener[] listeners = getCellEditorListeners();
-
-    for (int index = 0; index < listeners.length; index++)
-      {
-	listeners [index].editingCanceled (changeEvent);
-      }
-  }
-}
+
+} // AbstractCellEditor
