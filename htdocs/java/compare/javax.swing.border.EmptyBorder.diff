--- /home/tromey/gnu/Nightly/classpath/classpath/javax/swing/border/EmptyBorder.java	2003-06-16 02:24:07.000000000 -0600
+++ javax/swing/border/EmptyBorder.java	2003-06-13 02:27:44.000000000 -0600
@@ -1,5 +1,5 @@
 /* EmptyBorder.java -- 
-   Copyright (C) 2003 Free Software Foundation, Inc.
+   Copyright (C) 2002 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -42,167 +42,47 @@
 import java.awt.Graphics;
 import java.awt.Insets;
 
-
-/**
- * A border for leaving a specifiable number of pixels empty around
- * the enclosed component.  An EmptyBorder requires some space on each
- * edge, but does not perform any drawing.
- *
- * <p><img src="EmptyBorder-1.png" width="290" height="200"
- * alt="[An illustration of EmptyBorder]" />
- *
- * @author Sascha Brawer (brawer@dandelis.ch)
- */
-public class EmptyBorder
-  extends AbstractBorder
+public class EmptyBorder extends AbstractBorder
 {
-  /**
-   * Determined using the <code>serialver</code> tool
-   * of Apple/Sun JDK 1.3.1 on MacOS X 10.1.5.
-   */
-  static final long serialVersionUID = -8116076291731988694L;
-
-
-  /**
-   * The number of pixels required at the left edge.
-   */
   protected int left;
-
-
-  /**
-   * The number of pixels required at the right edge.
-   */
   protected int right;
-
-
-  /**
-   * The number of pixels required at the top edge.
-   */
-  protected int top;
-
-
-  /**
-   * The number of pixels required at the bottom edge.
-   */
   protected int bottom;
+  protected int top;
 
-
-  /**
-   * Constructs an empty border given the number of pixels required
-   * on each side.
-   *
-   * @param top the number of pixels that the border will need
-   *        for its top edge.
-   *
-   * @param left the number of pixels that the border will need
-   *        for its left edge.
-   *
-   * @param bottom the number of pixels that the border will need
-   *        for its bottom edge.
-   *
-   * @param right the number of pixels that the border will need
-   *        for its right edge.
-   */
-  public EmptyBorder(int top, int left, int bottom, int right)
+  public EmptyBorder (Insets borderInsets)
   {
-    this.top = top;
-    this.left = left;
-    this.bottom = bottom;
-    this.right = right;
+    this (borderInsets.left, borderInsets.right,
+          borderInsets.top, borderInsets.bottom);
   }
 
-
-  /**
-   * Constructs an empty border given the number of pixels required
-   * on each side, passed in an Insets object.
-   *
-   * @param borderInsets the Insets for the new border.
-   */
-  public EmptyBorder(Insets borderInsets)
+  public EmptyBorder (int left, int right, int top, int bottom)
   {
-    this(borderInsets.top, borderInsets.left,
-         borderInsets.bottom, borderInsets.right);
+    this.left = left;
+    this.right = right;
+    this.top = top;
+    this.bottom = bottom;
   }
 
-
-  /**
-   * Performs nothing because an EmptyBorder does not paint any
-   * pixels. While the inherited implementation provided by
-   * {@link AbstractBorder#paintBorder} is a no-op as well,
-   * it is overwritten in order to match the API of the Sun
-   * reference implementation.
-   *
-   * @param c the component whose border is to be painted.
-   * @param g the graphics for painting.
-   * @param x the horizontal position for painting the border.
-   * @param y the vertical position for painting the border.
-   * @param width the width of the available area for painting the border.
-   * @param height the height of the available area for painting the border.
-   */
-  public void paintBorder(Component c, Graphics g,
-                          int x, int y, int width, int height)
+  public Insets getBorderInsets (Component c, Insets s)
   {
-  }
-
+    if (s == null)
+      s = new Insets (0,0,0,0);
 
-  /**
-   * Measures the width of this border.
-   *
-   * @param c the component whose border is to be measured.
-   *
-   * @return an Insets object whose <code>left</code>, <code>right</code>,
-   *         <code>top</code> and <code>bottom</code> fields indicate the
-   *         width of the border at the respective edge.
-   *
-   * @see #getBorderInsets(java.awt.Component, java.awt.Insets)
-   */
-  public Insets getBorderInsets(Component c)
-  {
-    return getBorderInsets(c, null);
+    s.left = left;
+    s.right = right;
+    s.top = top;
+    s.bottom = bottom;
+    return s;
   }
-
-
-  /**
-   * Measures the width of this border, storing the results into a
-   * pre-existing Insets object.
-   *
-   * @param insets an Insets object for holding the result values.
-   *        After invoking this method, the <code>left</code>,
-   *        <code>right</code>, <code>top</code> and
-   *        <code>bottom</code> fields indicate the width of the
-   *        border at the respective edge.
-   *
-   * @return the same object that was passed for <code>insets</code>.
-   *
-   * @see #getBorderInsets()
-   */
-  public Insets getBorderInsets(Component c, Insets insets)
+    
+  public boolean isBorderOpaque ()
   {
-    if (insets == null)
-      insets = new Insets(0, 0, 0, 0);
-
-    insets.left = left;
-    insets.right = right;
-    insets.top = top;
-    insets.bottom = bottom;
-    return insets;
+    return false;
   }
 
-
-  /**
-   * Determines whether this border fills every pixel in its area
-   * when painting. Since an empty border does not paint any pixels
-   * whatsoever, the result is <code>false</code>.
-   *
-   * @return <code>false</code>.
-   */
-  public boolean isBorderOpaque()
+  public void paintBorder (Component c, Graphics g, int x, int y,
+                           int width, int height)
   {
-    /* The inherited implementation of AbstractBorder.isBorderOpaque()
-     * would also return false. It is not clear why this is overriden
-     * in the Sun implementation, at least not from just reading the
-     * JavaDoc.
-     */
-    return false;
   }
 }
+
