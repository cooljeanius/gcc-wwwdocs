--- /home/tromey/gnu/Nightly/classpath/classpath/native/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkEvents.c	2004-04-13 02:20:44.000000000 -0600
+++ jni/gtk-peer/gnu_java_awt_peer_gtk_GtkEvents.c	2004-03-18 02:18:23.000000000 -0700
@@ -1,5 +1,5 @@
 /* gtkevents.c -- GDK/GTK event handlers
-   Copyright (C) 1998, 1999, 2002, 2004 Free Software Foundation, Inc.
+   Copyright (C) 1998, 1999, 2002 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -934,9 +934,9 @@
 				    click_count,
 				    JNI_FALSE);
 
-	/* Generate an AWT click event only if the release occured in the
-	   window it was pressed in, and the mouse has not been dragged since
-	   the last time it was pressed. */
+	// Generate an AWT click event only if the release occured in the
+	// window it was pressed in, and the mouse has not been dragged since
+	// the last time it was pressed.
 	gdk_window_get_size (event->any.window, &width, &height);
 	if (! hasBeenDragged
 	    && event->button.x >= 0
@@ -1038,11 +1038,11 @@
       break;
     case GDK_EXPOSE:
       {
-        /* This filters out unwanted feedback expose events from gtk/X
-           when we explictly invalidate and update heavyweight components,
-           thus avoiding an infinite loop.
-           FIXME: I'm not quite sure why we're getting these expose events. 
-                  Maybe there is a way to avoid them? */
+        // This filters out unwanted feedback expose events from gtk/X
+        // when we explictly invalidate and update heavyweight components,
+        // thus avoiding an infinite loop.
+        // FIXME: I'm not quite sure why we're getting these expose events. 
+        //        Maybe there is a way to avoid them?
         if((event->any.window == widget->window && event->any.send_event)
            || GTK_IS_LAYOUT(widget))
           {
@@ -1181,6 +1181,7 @@
 			 | GDK_KEY_PRESS_MASK
 			 | GDK_FOCUS_CHANGE_MASK);
 
+  //  g_print("storing obj %p property on window %p\n", obj, window);
   gdk_property_change (window,
 		       addr_atom,
 		       type_atom,
@@ -1195,8 +1196,10 @@
 {
   va_list ap;
   jobject *obj;
+  //void *ptr = NSA_GET_PTR (env, peer_obj);
 
   obj = NSA_GET_GLOBAL_REF (env, peer_obj);
+  //g_print("Connection obj %s\n", gtk_widget_get_name (GTK_WIDGET (ptr)));
   g_assert (obj);
 
   va_start (ap, nwindows);
