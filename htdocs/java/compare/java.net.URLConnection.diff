--- /home/tromey/gnu/Nightly/classpath/classpath/java/net/URLConnection.java	2003-09-20 02:19:43.000000000 -0600
+++ java/net/URLConnection.java	2003-09-25 02:18:11.000000000 -0600
@@ -42,11 +42,15 @@
 import java.io.IOException;
 import java.io.OutputStream;
 import java.security.Permission;
-import java.util.Collections;
+import java.security.AllPermission;
+import java.text.ParsePosition;
+import java.text.SimpleDateFormat;
 import java.util.Date;
 import java.util.Locale;
 import java.util.Hashtable;
 import java.util.Map;
+import java.util.StringTokenizer;
+import gnu.gcj.io.MimeTypes;
 
 /**
  * Written using on-line Java Platform 1.2 API Specification, as well
@@ -93,7 +97,7 @@
    * to do this is implemented by this class, so just create an empty
    * instance and store it here.
    */
-  private static FileNameMap fileNameMap = new MimeTypeMapper();
+  private static FileNameMap fileNameMap;
  
   /**
    * This is the ContentHandlerFactory set by the caller, if any
@@ -113,11 +117,6 @@
   private static boolean defaultUseCaches = true;
 
   /**
-   * This is a Hashable for setting default request properties
-   */
-  private static Hashtable def_req_props = new Hashtable();
-
-  /**
    * This variable determines whether or not interaction is allowed with
    * the user.  For example, to prompt for a username and password.
    */
@@ -165,10 +164,11 @@
    */
   protected URL url;
 
-  /**
-   * The list of request properties for this connection
-   */
-  private final Hashtable req_props;
+  private static ContentHandler contentHandler;
+  private static Hashtable handlers = new Hashtable();
+  private static Locale locale; 
+  private static SimpleDateFormat dateFormat1, dateFormat2, dateFormat3;
+  private static boolean dateformats_initialized = false;
 
   /**
    * Creates a URL connection to a given URL. A real connection is not made.
@@ -184,7 +184,6 @@
     this.url = url;
     allowUserInteraction = defaultAllowUserInteraction;
     useCaches = defaultUseCaches;
-    req_props = new Hashtable(def_req_props);
   }
 
   /**
@@ -303,15 +302,8 @@
    */
   public String getHeaderField(String name)
   {
-    for (int i = 0; ; i++)
-      {
-        String key = getHeaderFieldKey(i);
-        if (key == null)
-          return(null);
-
-        if (key.toLowerCase().equals(name.toLowerCase()))
-          return(getHeaderField(i));
-      }
+    // Subclasses for specific protocols override this.
+    return null;
   }
 
   /**
@@ -368,23 +360,24 @@
    */
   public long getHeaderFieldDate (String name, long defaultValue)
   {
+    if (! dateformats_initialized)
+      initializeDateFormats ();
+    
+    long result = defaultValue;
     String str = getHeaderField (name);
     
-    if (str == null)
-      return defaultValue;
+    if (str != null)
+      {
+	Date date;
+	if ((date = dateFormat1.parse (str, new ParsePosition (0))) != null)
+	  result = date.getTime ();
+	else if ((date = dateFormat2.parse (str, new ParsePosition (0))) != null)
+	  result = date.getTime ();
+	else if ((date = dateFormat3.parse (str, new ParsePosition (0))) != null)
+	  result = date.getTime ();
+      }
     
-    // This needs to change since Date(String) is deprecated, but DateFormat
-    // doesn't seem to be working for some reason
-    //DateFormat df = DateFormat.getDateInstance(DateFormat.FULL, Locale.US);
-    //df.setLenient(true);
-
-    //Date d = df.parse(value, new ParsePosition(0));
-    Date d = new Date (str);
-
-    if (d == null)
-      return defaultValue;
-       
-    return (d.getTime() / 1000);
+    return result;
   }
 
   /**
@@ -425,41 +418,16 @@
    */
   public Object getContent() throws IOException
   {
-    //  connect();
-    String type = getContentType();
-
-    // First try the factory
-    ContentHandler ch = null;
-    if (factory != null)
-      ch = factory.createContentHandler(type);
-
-    if (ch != null)
-      return(ch.getContent(this));
-
-    // Then try our default class
-    try
-      {
-        Class cls = Class.forName("gnu.java.net.content." + 
-                                  type.replace('/', '.'));
-     
-        Object obj = cls.newInstance();
-        if (!(obj instanceof ContentHandler))
-          throw new UnknownServiceException(type);
-
-        ch = (ContentHandler)obj;
-        return(ch.getContent(this));
-      }
-    catch (ClassNotFoundException e)
-      {
-      }
-    catch (InstantiationException e)
-      {
-      }
-    catch (IllegalAccessException e)
-      {
-      }
+    // FIXME: Doc indicates that other criteria should be applied as
+    // heuristics to determine the true content type, e.g. see 
+    // guessContentTypeFromName() and guessContentTypeFromStream methods
+    // as well as FileNameMap class & fileNameMap field & get/set methods.
+    String cType = getContentType();
+    contentHandler = setContentHandler(cType);
+    if (contentHandler == null)
+      return getInputStream();
 
-    throw new UnknownServiceException(type);
+    return contentHandler.getContent(this);
   }
 
   /**
@@ -537,7 +505,7 @@
    */
   public String toString()
   {
-    return(url.toString());
+    return this.getClass().getName() + ":" + url.toString();
   }
 
   /**
@@ -735,6 +703,9 @@
    * @param key The name of the property
    * @param value The value of the property
    * 
+   * @exception IllegalStateException If already connected
+   * @exception NullPointerException If key is null
+   *
    * @see URLConnection#getRequestProperty(String key)
    * @see URLConnection#addRequestProperty(String key, String value)
    * 
@@ -742,11 +713,19 @@
    */
   public void setRequestProperty(String key, String value)
   {
-    req_props.put(key.toLowerCase(), value);
+    if (connected)
+      throw new IllegalStateException ("Already connected");
+
+    if (key == null)
+      throw new NullPointerException ("key is null");
+    
+    // Do nothing unless overridden by subclasses that support setting
+    // header fields in the request.
   }
 
   /**
-   * Sets the value of the named request property
+   * Adds a new request property by a key/value pair.
+   * This method does not overwrite* existing properties with the same key.
    *
    * @param key Key of the property to add
    * @param value Value of the Property to add
@@ -764,10 +743,11 @@
     if (connected)
       throw new IllegalStateException ("Already connected");
 
-    if (getRequestProperty (key) == null)
-      {
-        setRequestProperty (key, value);
-      }
+    if (key == null)
+      throw new NullPointerException ("key is null");
+    
+    // Do nothing unless overridden by subclasses that support adding
+    // header fields in the request.
   }
 
   /**
@@ -784,7 +764,12 @@
    */
   public String getRequestProperty(String key)
   {
-    return((String)req_props.get(key.toLowerCase()));
+    if (connected)
+      throw new IllegalStateException ("Already connected");
+
+    // Overridden by subclasses that support reading header fields from the
+    // request.
+    return null;
   }
 
   /**
@@ -798,7 +783,9 @@
    */
   public Map getRequestProperties()
   {
-    return Collections.unmodifiableMap(req_props);
+    // Overridden by subclasses that support reading header fields from the
+    // request.
+    return null;
   }
 
   /**
@@ -813,10 +800,10 @@
    *
    * @see URLConnectionr#setRequestProperty(String key, String value)
    */
-  public static synchronized void setDefaultRequestProperty (String key,
-                                                             String value)
+  public static void setDefaultRequestProperty(String key, String value)
   {
-    def_req_props.put(key.toLowerCase(), value);
+    // Do nothing unless overridden by subclasses that support setting
+    // default request properties.
   }
 
   /**
@@ -834,7 +821,8 @@
    */
   public static String getDefaultRequestProperty(String key)
   {
-    return((String)def_req_props.get(key.toLowerCase()));
+    // Overridden by subclasses that support default request properties.
+    return null;
   }
 
   /**
@@ -878,7 +866,22 @@
    */
   public static String guessContentTypeFromName(String filename)
   {
-    return(fileNameMap.getContentTypeFor(filename.toLowerCase()));
+    int dot = filename.lastIndexOf (".");
+    
+    if (dot != -1)
+      {
+	if (dot == filename.length())
+	  return ("application/octet-stream");
+	else
+	  filename = filename.substring (dot + 1);
+      }
+    
+    String type = MimeTypes.getMimeTypeFromExtension (filename);
+    
+    if (type == null)
+      return("application/octet-stream");
+
+    return type;
   }
 
   /**
@@ -900,7 +903,10 @@
   public static String guessContentTypeFromStream(InputStream is)
     throws IOException
   {
-    return("application/octet-stream");
+    is.mark(1024);
+    // FIXME: Implement this. Use system mimetype informations (like "file").
+    is.reset();
+    return null;
   }
 
   /**
@@ -937,5 +943,101 @@
 
     fileNameMap = map;
   }
+
+  private ContentHandler setContentHandler(String contentType)
+  {
+    ContentHandler handler;
+
+    // No content type so just handle it as the default.
+    if (contentType == null || contentType == "")
+      return null;
+
+    // See if a handler has been cached for this content type.
+    // For efficiency, if a content type has been searched for but not
+    // found, it will be in the hash table but as the contentType String
+    // instead of a ContentHandler.
+    if ((handler = (ContentHandler) handlers.get(contentType)) != null)
+      if (handler instanceof ContentHandler)
+	return handler;
+      else
+	return null;
+
+    // If a non-default factory has been set, use it to find the content type.
+    if (factory != null)
+      handler = factory.createContentHandler(contentType);
+
+    // Non-default factory may have returned null or a factory wasn't set.
+    // Use the default search algorithm to find a handler for this content type.
+    if (handler == null)
+      {
+	// Get the list of packages to check and append our default handler
+	// to it, along with the JDK specified default as a last resort.
+	// Except in very unusual environments the JDK specified one shouldn't
+	// ever be needed (or available).
+	String propVal = System.getProperty("java.content.handler.pkgs");
+	propVal = (propVal == null) ? "" : (propVal + "|");
+	propVal = propVal + "gnu.gcj.content|sun.net.www.content";
+
+	// Replace the '/' character in the content type with '.' and
+	// all other non-alphabetic, non-numeric characters with '_'.
+	StringTokenizer pkgPrefix = new StringTokenizer(propVal, "|");
+	char[] cArray = contentType.toCharArray();
+	for (int i = 0; i < cArray.length; i++)
+	  {
+	    if (cArray[i] == '/')
+	      cArray[i] = '.';
+	    else if (! ((cArray[i] >= 'A' && cArray[i] <= 'Z') || 
+			(cArray[i] >= 'a' && cArray[i] <= 'z') ||
+			(cArray[i] >= '0' && cArray[i] <= '9')))
+	      cArray[i] = '_';
+	  }
+	String contentClass = new String(cArray);
+
+	// See if a class of this content type exists in any of the packages.
+	do
+	  {
+	    String facName = pkgPrefix.nextToken() + "." + contentClass;
+	    try
+	      {
+		handler =
+		  (ContentHandler) Class.forName(facName).newInstance();
+	      }
+	    catch (Exception e)
+	      {
+		// Can't instantiate; handler still null, go on to next element.
+	      }
+	  } while ((handler == null ||
+		    ! (handler instanceof ContentHandler)) &&
+		   pkgPrefix.hasMoreTokens());
+      }
+
+    // Update the hashtable with the new content handler.
+    if (handler != null && handler instanceof ContentHandler)
+      {
+	handlers.put(contentType, handler);
+	return handler;
+      }
+
+    // For efficiency on subsequent searches, put a dummy entry in the hash
+    // table for content types that don't have a non-default ContentHandler.
+    handlers.put(contentType, contentType);
+    return null;
+  }
+  
+  // We don't put these in a static initializer, because it creates problems
+  // with initializer co-dependency: SimpleDateFormat's constructors eventually 
+  // depend on URLConnection (via the java.text.*Symbols classes).
+  private synchronized void initializeDateFormats()
+  {
+    if (dateformats_initialized)
+      return;
+    locale = new Locale("En", "Us", "Unix");
+    dateFormat1 = new SimpleDateFormat("EEE, dd MMM yyyy hh:mm:ss 'GMT'", 
+                                       locale);
+    dateFormat2 = new SimpleDateFormat("EEEE, dd-MMM-yy hh:mm:ss 'GMT'", 
+                                       locale);
+    dateFormat3 = new SimpleDateFormat("EEE MMM d hh:mm:ss yyyy", locale);
+    dateformats_initialized = true;
+  }
 } // class URLConnection
 
