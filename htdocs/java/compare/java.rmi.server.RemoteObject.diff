--- /home/tromey/gnu/egcs/classpath/classpath/java/rmi/server/RemoteObject.java	Mon Mar 25 00:05:18 2002
+++ java/rmi/server/RemoteObject.java	Tue Jan 22 16:01:36 2002
@@ -48,7 +48,6 @@
 import java.lang.ClassNotFoundException;
 import java.lang.InstantiationException;
 import java.lang.IllegalAccessException;
-import java.lang.reflect.Constructor;
 
 public abstract class RemoteObject
 	implements Remote, Serializable {
@@ -69,22 +68,9 @@
 	return (ref);
 }
 
-  public static Remote toStub(Remote obj) throws NoSuchObjectException 
-  {
-    Class cls = obj.getClass();
-    String classname = cls.getName();
-    ClassLoader cl = cls.getClassLoader();
-    try 
-      {
-	Class scls = cl.loadClass(classname + "_Stub");
-	// JDK 1.2 stubs
-	Class[] stubprototype = new Class[] { RemoteRef.class };
-	Constructor con = scls.getConstructor(stubprototype);
-	return (Remote)(con.newInstance(new Object[]{obj}));
-      }
-    catch (Exception e) {}
-    throw new NoSuchObjectException(obj.getClass().getName());
-  }
+public static Remote toStub(Remote obj) throws NoSuchObjectException {
+	throw new Error("Not implemented");
+}
 
 public int hashCode() {
 	if (ref == null) {
@@ -100,46 +86,30 @@
 	return (this == obj);
 }
 
-  public String toString() 
-  {
-    if (ref == null)
-      return getClass ().toString ();
-    return (ref.toString ());
-  }
-  
-  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException 
-  {
-    String cname = in.readUTF();
-    if (!cname.equals("")) 
-      {
-	if (cname.equals ("UnicastRef2"))
-	  { 
-	    // hack for interoperating with JDK
-	    cname = "UnicastRef";
-	    in.read (); //some unknown UnicastRef2 field
-	  }
-
-	cname = RemoteRef.packagePrefix + '.' + cname;
-	try 
-	  {
-	    Class cls = Class.forName(cname);
-	    ref = (RemoteRef)cls.newInstance();
-	  }
-	catch (InstantiationException e1) 
-	  {
-	    throw new UnmarshalException("failed to create ref");
-	  }
-	catch (IllegalAccessException e2) 
-	  {
-	    throw new UnmarshalException("failed to create ref");
-	  }
-	ref.readExternal(in);
-      }
-    else 
-      {
-	ref = (RemoteRef)in.readObject();
-      }
-  }
+public String toString() {
+	return (ref.toString());
+}
+
+private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
+	String cname = in.readUTF();
+	if (!cname.equals("")) {
+		cname = RemoteRef.packagePrefix + '.' + cname;
+		try {
+			Class cls = Class.forName(cname);
+			ref = (RemoteRef)cls.newInstance();
+		}
+		catch (InstantiationException e1) {
+			throw new UnmarshalException("failed to create ref");
+		}
+		catch (IllegalAccessException e2) {
+			throw new UnmarshalException("failed to create ref");
+		}
+		ref.readExternal(in);
+	}
+	else {
+		ref = (RemoteRef)in.readObject();
+	}
+}
 
 private void writeObject(ObjectOutputStream out) throws IOException, ClassNotFoundException {
 	if (ref == null) {
