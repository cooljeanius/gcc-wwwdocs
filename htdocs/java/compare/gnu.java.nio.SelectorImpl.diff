--- /home/tromey/gnu/classpath/classpath/gnu/java/nio/SelectorImpl.java	Mon Nov 18 04:26:03 2002
+++ gnu/java/nio/SelectorImpl.java	Fri Nov 29 02:57:05 2002
@@ -56,6 +56,10 @@
   public SelectorImpl (SelectorProvider provider)
   {
     super (provider);
+    
+    keys = new HashSet ();
+    selected = new HashSet ();
+    canceled = new HashSet ();
   }
 
   public Set keys ()
@@ -70,16 +74,48 @@
 
   public int select ()
   {
-    return select (Long.MAX_VALUE);
+    return select (-1);
   }
 
-//   private static native int java_do_select(int[] read, int[] write,
-//                                            int[] except, long timeout);
+  // A timeout value of -1 means block forever.
+  private static native int java_do_select (int[] read, int[] write,
+                                            int[] except, long timeout);
 
-  private static int java_do_select (int[] read, int[] write,
-                                     int[] except, long timeout)
+  private int[] getFDsAsArray (int ops)
   {
-    return 0;
+    int[] result;
+    int counter = 0;
+    Iterator it = keys.iterator ();
+
+    // Count the number of file descriptors needed
+    while (it.hasNext ())
+      {
+        SelectionKeyImpl key = (SelectionKeyImpl) it.next ();
+
+        if ((key.interestOps () & ops) != 0)
+          {
+            counter++;
+          }
+      }
+
+    result = new int[counter];
+
+    counter = 0;
+    it = keys.iterator ();
+
+    // Fill the array with the file descriptors
+    while (it.hasNext ())
+      {
+        SelectionKeyImpl key = (SelectionKeyImpl) it.next ();
+
+        if ((key.interestOps () & ops) != 0)
+          {
+            result[counter] = key.fd;
+            counter++;
+          }
+      }
+
+    return result;
   }
 
   public int select (long timeout)
@@ -94,40 +130,79 @@
         return 0;
 	    }
 
-    int[] read = new int[keys.size ()];
-    int[] write = new int[keys.size ()];
-    int[] except = new int[keys.size ()];
-    int i = 0;
+    int ret = 0;
+
+    deregisterCanceledKeys ();
+
+    // Set only keys with the needed interest ops into the arrays.
+    int[] read = getFDsAsArray (SelectionKey.OP_READ | SelectionKey.OP_ACCEPT);
+    int[] write = getFDsAsArray (SelectionKey.OP_WRITE | SelectionKey.OP_CONNECT);
+    int[] except = new int [0]; // FIXME: We dont need to check this yet
+
+    // Call the native select () on all file descriptors.
+    int anzahl = read.length + write.length + except.length;
+    ret = java_do_select (read, write, except, timeout);
+
     Iterator it = keys.iterator ();
 
     while (it.hasNext ())
-	    {
-        SelectionKeyImpl k = (SelectionKeyImpl) it.next ();
-        read[i] = k.fd;
-        write[i] = k.fd;
-        except[i] = k.fd;
-        i++;
-	    }
+      {
+        int ops = 0;
+        SelectionKeyImpl key = (SelectionKeyImpl) it.next ();
 
-    int ret = java_do_select (read, write, except, timeout);
+        // If key is already selected retrieve old ready ops.
+        if (selected.contains (key))
+          {
+            ops = key.readyOps ();
+          }
 
-    i = 0;
-    it = keys.iterator ();
+        // Set new ready read/accept ops
+        for (int i = 0; i < read.length; i++)
+          {
+            if (key.fd == read[i])
+              {
+                if (key.channel () instanceof ServerSocketChannelImpl)
+                  {
+                    ops = ops | SelectionKey.OP_ACCEPT;
+                  }
+                else
+                  {
+                    ops = ops | SelectionKey.OP_READ;
+                  }
+              }
+          }
 
-    while (it.hasNext ())
-	    {
-        SelectionKeyImpl k = (SelectionKeyImpl) it.next ();
+        // Set new ready write ops
+        for (int i = 0; i < write.length; i++)
+          {
+            if (key.fd == write[i])
+              {
+                ops = ops | SelectionKey.OP_WRITE;
+                
+//                 if (key.channel ().isConnected ())
+//                   {
+//                     ops = ops | SelectionKey.OP_WRITE;
+//                   }
+//                 else
+//                   {
+//                     ops = ops | SelectionKey.OP_CONNECT;
+//                   }
+             }
+          }
+
+        // FIXME: We dont handle exceptional file descriptors yet.
 
-        if (read[i] != -1 ||
-            write[i] != -1 ||
-            except[i] != -1)
+        // If key is not yet selected add it.
+        if (!selected.contains (key))
           {
-            add_selected (k);
+            add_selected (key);
           }
 
-        i++;
-	    }
+        // Set new ready ops
+        key.readyOps (key.interestOps () & ops);
+      }
 
+    deregisterCanceledKeys ();
     return ret;
   }
     
@@ -143,25 +218,30 @@
 
   public void add (SelectionKeyImpl k)
   {
-    if (keys == null)
-	    keys = new HashSet ();
-
     keys.add (k);
   }
 
   void add_selected (SelectionKeyImpl k)
   {
-    if (selected == null)
-	    selected = new HashSet ();
-
-    selected.add(k);
+    selected.add (k);
   }
 
   protected void implCloseSelector ()
   {
     closed = true;
   }
-    
+
+  private void deregisterCanceledKeys ()
+  {
+    Iterator it = canceled.iterator ();
+
+    while (it.hasNext ())
+      {
+        keys.remove ((SelectionKeyImpl) it.next ());
+        it.remove ();
+      }
+  }
+
   protected SelectionKey register (SelectableChannel ch, int ops, Object att)
   {
     return register ((AbstractSelectableChannel) ch, ops, att);
@@ -170,30 +250,43 @@
   protected SelectionKey register (AbstractSelectableChannel ch, int ops,
                                    Object att)
   {
-    /*
-	  // filechannel is not selectable ?
-    if (ch instanceof FileChannelImpl)
-      {
-        FileChannelImpl fc = (FileChannelImpl) ch;
-        SelectionKeyImpl impl = new SelectionKeyImpl (ch, this, fc.fd);
-        keys.add (impl);
-        return impl;
-      }
-    else
-    */
+// 	  // filechannel is not selectable ?
+//     if (ch instanceof FileChannelImpl)
+//       {
+//         FileChannelImpl fc = (FileChannelImpl) ch;
+//         SelectionKeyImpl impl = new SelectionKeyImpl (ch, this, fc.fd);
+//         keys.add (impl);
+//         impl.interestOps (ops);
+//         impl.attach (att);
+//         return impl;
+//       }
+//     else
 	
     if (ch instanceof SocketChannelImpl)
 	    {
         SocketChannelImpl sc = (SocketChannelImpl) ch;
         SelectionKeyImpl impl = new SelectionKeyImpl (ch, this, sc.fd);
         add (impl);
+        impl.interestOps (ops);
+        impl.attach (att);
         return impl;
 	    }
+    else if (ch instanceof DatagramChannelImpl)
+      {
+        DatagramChannelImpl dc = (DatagramChannelImpl) ch;
+        SelectionKeyImpl impl = new SelectionKeyImpl (ch, this, dc.fd);
+        add (impl);
+        impl.interestOps (ops);
+        impl.attach (att);
+        return impl;
+      }
     else if (ch instanceof ServerSocketChannelImpl)
       {
         ServerSocketChannelImpl ssc = (ServerSocketChannelImpl) ch;
         SelectionKeyImpl impl = new SelectionKeyImpl (ch, this, ssc.fd);
         add (impl);
+        impl.interestOps (ops);
+        impl.attach (att);
         return impl;
       }
     else
