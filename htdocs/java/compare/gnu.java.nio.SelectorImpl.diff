--- /home/tromey/gnu/Nightly/classpath/classpath/gnu/java/nio/SelectorImpl.java	2003-10-21 02:18:57.000000000 -0600
+++ gnu/java/nio/SelectorImpl.java	2003-12-03 02:18:10.000000000 -0700
@@ -69,8 +69,8 @@
   {
     super (provider);
     
-    keys = new HashSet();
-    selected = new HashSet();
+    keys = new HashSet ();
+    selected = new HashSet ();
   }
 
   protected void finalize() throws Throwable
@@ -110,32 +110,32 @@
   {
     int[] result;
     int counter = 0;
-    Iterator it = keys.iterator();
+    Iterator it = keys.iterator ();
 
     // Count the number of file descriptors needed
-    while (it.hasNext())
+    while (it.hasNext ())
       {
-        SelectionKeyImpl key = (SelectionKeyImpl) it.next();
+        SelectionKeyImpl key = (SelectionKeyImpl) it.next ();
 
-        if ((key.interestOps() & ops) != 0)
+        if ((key.interestOps () & ops) != 0)
           {
             counter++;
           }
       }
 
-    result = new int [counter];
+    result = new int[counter];
 
     counter = 0;
-    it = keys.iterator();
+    it = keys.iterator ();
 
     // Fill the array with the file descriptors
-    while (it.hasNext())
+    while (it.hasNext ())
       {
-        SelectionKeyImpl key = (SelectionKeyImpl) it.next();
+        SelectionKeyImpl key = (SelectionKeyImpl) it.next ();
 
-        if ((key.interestOps() & ops) != 0)
+        if ((key.interestOps () & ops) != 0)
           {
-            result [counter] = key.getNativeFD();
+            result[counter] = key.getNativeFD();
             counter++;
           }
       }
@@ -146,12 +146,12 @@
   public int select (long timeout)
   {
     if (!isOpen())
-      throw new ClosedSelectorException();
+      throw new ClosedSelectorException ();
 
     if (keys == null)
-      {
+	    {
         return 0;
-      }
+	    }
 
     deregisterCancelledKeys();
 
@@ -166,25 +166,25 @@
     int result = implSelect (read, write, except, timeout);
     end();
 
-    Iterator it = keys.iterator();
+    Iterator it = keys.iterator ();
 
-    while (it.hasNext())
+    while (it.hasNext ())
       {
         int ops = 0;
-        SelectionKeyImpl key = (SelectionKeyImpl) it.next();
+        SelectionKeyImpl key = (SelectionKeyImpl) it.next ();
 
         // If key is already selected retrieve old ready ops.
         if (selected.contains (key))
           {
-            ops = key.readyOps();
+            ops = key.readyOps ();
           }
 
         // Set new ready read/accept ops
         for (int i = 0; i < read.length; i++)
           {
-            if (key.getNativeFD() == read [i])
+            if (key.getNativeFD() == read[i])
               {
-                if (key.channel() instanceof ServerSocketChannelImpl)
+                if (key.channel () instanceof ServerSocketChannelImpl)
                   {
                     ops = ops | SelectionKey.OP_ACCEPT;
                   }
@@ -198,11 +198,11 @@
         // Set new ready write ops
         for (int i = 0; i < write.length; i++)
           {
-            if (key.getNativeFD() == write [i])
+            if (key.getNativeFD() == write[i])
               {
                 ops = ops | SelectionKey.OP_WRITE;
                 
-//                 if (key.channel().isConnected())
+//                 if (key.channel ().isConnected ())
 //                   {
 //                     ops = ops | SelectionKey.OP_WRITE;
 //                   }
@@ -222,7 +222,7 @@
           }
 
         // Set new ready ops
-        key.readyOps (key.interestOps() & ops);
+        key.readyOps (key.interestOps () & ops);
       }
 
     deregisterCancelledKeys();
@@ -243,10 +243,10 @@
   {
     Iterator it = cancelledKeys().iterator();
 
-    while (it.hasNext())
+    while (it.hasNext ())
       {
-        keys.remove ((SelectionKeyImpl) it.next());
-        it.remove();
+        keys.remove ((SelectionKeyImpl) it.next ());
+        it.remove ();
       }
   }
 
