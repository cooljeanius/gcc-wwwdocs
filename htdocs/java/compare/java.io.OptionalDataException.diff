--- /home/tromey/gnu/egcs/classpath/classpath/java/io/OptionalDataException.java	Sat Mar  2 12:13:09 2002
+++ java/io/OptionalDataException.java	Tue Jan 22 16:01:33 2002
@@ -1,5 +1,5 @@
-/* OptionalDataException.java -- indicates unexpected data in serialized stream
-   Copyright (C) 1998, 2000, 2001, 2002 Free Software Foundation, Inc.
+/* OptionalDataException.java -- indicates unexpected data in serialised stream
+   Copyright (C) 1998, 2000, 2001 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -7,7 +7,7 @@
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2, or (at your option)
 any later version.
-
+ 
 GNU Classpath is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
@@ -38,54 +38,61 @@
 
 package java.io;
 
-/**
- * This exception is thrown when unexpected data appears in the input
- * stream from which a serialized object is being read. There are two
- * cases:<br><ul>
- * <li>The next stream element is primitive data. <code>eof</code> will
- *     be false, and <code>count</code> is the number of bytes of primitive
- *     data available.</li>
- * <li>The data consumable by readObject or readExternal has been exhausted.
- *     <code>eof</code> is true, and <code>count</code> is 0.</li>
- * </ul>
- *
- * @author Aaron M. Renn (arenn@urbanophile.com)
- * @author Warren Levy <warrenl@cygnus.com>
- * @since 1.1
- * @status updated to 1.4
+/* Written using on-line Java Platform 1.2 API Specification.
+ * Status:  Believed complete and correct.
  */
+
+/**
+  * This exception is thrown when unexpected data appears in the input
+  * stream from which a serialized object is being read.  The field
+  * <code>eof</code> will always be set to true (***Why even have it?***) and 
+  * the <code>count</code> field will contain the number of valid bytes
+  * available to be read.
+  *
+  * @version 0.0
+  *
+  * @author Aaron M. Renn (arenn@urbanophile.com)
+  * @author Warren Levy <warrenl@cygnus.com>
+  * @date February 7, 2000. 
+  */
 public class OptionalDataException extends ObjectStreamException
 {
-  /**
-   * Compatible with JDK 1.1+.
-   */
-  private static final long serialVersionUID = -8011121865681257820L;
-
-  /**
-   * Whether or not the end of the stream has been reached.
-   *
-   * @serial the end of the buffer was reached
-   */
-  public boolean eof;
-
-  /**
-   * The number of valid bytes that can be read.
-   *
-   * @serial the bytes of the buffer remaining
-   */
-  public int length;
-
-  /**
-   * Create a new OptionalDataException with an eof parameter indicating
-   * whether or not the end of stream is reached and the number of valid
-   * bytes that may be read.
-   *
-   * @param eof 'true' if end of stream reached, 'false' otherwise
-   * @param count The number of valid bytes to be read
-   */
-  OptionalDataException(boolean eof, int count)
-  {
-    this.eof = eof;
-    this.length = count;
-  }
+
+private static final long serialVersionUID = -8011121865681257820L;
+
+/*
+ * Instance Variables
+ */
+
+/**
+  * Whether or not the end of the stream has been reached
+  */
+public boolean eof;
+
+/**
+  * The number of valid bytes that can be read
+  */
+public int length;
+
+/*************************************************************************/
+
+/*
+ * Constructors
+ */
+
+/**
+  * Create a new OptionalDataException with an eof parameter indicating
+  * whether or not the end of stream is reached and the number of valid
+  * bytes that may be read.
+  *
+  * @param eof 'true' if end of stream reached, 'false' otherwise
+  * @param count The number of valid bytes to be read.
+  */
+OptionalDataException(boolean eof, int count)
+{
+  this.eof = eof;
+  this.length = count;
+}
+
 } // class OptionalDataException
+
