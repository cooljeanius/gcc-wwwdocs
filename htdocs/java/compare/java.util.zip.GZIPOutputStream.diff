--- /home/tromey/gnu/Nightly/classpath/classpath/java/util/zip/GZIPOutputStream.java	2004-05-06 02:21:13.000000000 -0600
+++ java/util/zip/GZIPOutputStream.java	2004-07-10 02:19:15.000000000 -0600
@@ -61,15 +61,15 @@
    */
   protected CRC32 crc;
 
-  /* Creates a GZIPOutputStream with the default buffer size
-   *
+  /**
+   * Creates a GZIPOutputStream with the default buffer size
    *
    * @param out The stream to read data (to be compressed) from 
    * 
    */
   public GZIPOutputStream(OutputStream out) throws IOException
   {
-    this(out, 4096);
+    this(out, 512);
   }
 
   /**
@@ -81,44 +81,40 @@
   public GZIPOutputStream(OutputStream out, int size) throws IOException
   {
     super(out, new Deflater(Deflater.DEFAULT_COMPRESSION, true), size);
-    
     crc = new CRC32();
-    int mod_time = (int) (System.currentTimeMillis() / 1000L);
-    byte[] gzipHeader =
-      {
-	/* The two magic bytes */
-	(byte) (GZIPInputStream.GZIP_MAGIC >> 8),
-	(byte) GZIPInputStream.GZIP_MAGIC,
-	  
-	/* The compression type */
-	(byte) Deflater.DEFLATED,
-	
-        /* The flags (not set) */
-	0,
-	
-	/* The modification time */
-	(byte) mod_time, (byte) (mod_time >> 8), 
-	(byte) (mod_time >> 16), (byte) (mod_time >> 24), 
-
-	/* The extra flags */
-	0,
-    
-	/* The OS type (unknown) */
-	(byte) 255
-      };
+    put2(GZIPInputStream.GZIP_MAGIC);
+    out.write(GZIPInputStream.Z_DEFLATED);
+    // No flags for now.
+    out.write(0);
+    // No time either.
+    put2(0);
+    put2(0);
+    // No xflags either.
+    out.write(0);
+    // FIXME: unknown OS.
+    out.write(255);
+  }
+
+  public synchronized void write(int bval) throws IOException
+  {
+    super.write(bval);
+    crc.update(bval);
+  }
 
-    out.write(gzipHeader);
-    //    System.err.println("wrote GZIP header (" + gzipHeader.length + " bytes )");
+  public synchronized void write(byte[] buf) throws IOException
+  {
+    write(buf, 0, buf.length);
   }
-  
+
   public synchronized void write(byte[] buf, int off, int len)
     throws IOException
   {
     super.write(buf, off, len);
     crc.update(buf, off, len);
   }
-  
-  /** Writes remaining compressed output data to the output stream
+
+  /**
+   * Writes remaining compressed output data to the output stream
    * and closes it.
    */
   public void close() throws IOException
@@ -130,22 +126,21 @@
   public void finish() throws IOException
   {
     super.finish();
+    put4((int) crc.getValue());
+    put4(def.getTotalIn());
+  }
 
-    int totalin = def.getTotalIn();
-    int crcval = (int) (crc.getValue() & 0xffffffff);
-
-    //    System.err.println("CRC val is " + Integer.toHexString( crcval ) 		       + " and length " + Integer.toHexString(totalin));
-    
-    byte[] gzipFooter = 
-      {
-	(byte) crcval, (byte) (crcval >> 8),
-	(byte) (crcval >> 16), (byte) (crcval >> 24),
-
-	(byte) totalin, (byte) (totalin >> 8),
-	(byte) (totalin >> 16), (byte) (totalin >> 24)
-      };
+  private final void put2(int i) throws IOException
+  {
+    out.write(i);
+    out.write(i >> 8);
+  }
 
-    out.write(gzipFooter);
-  //    System.err.println("wrote GZIP trailer (" + gzipFooter.length + " bytes )");    
+  private final void put4 (int i) throws IOException
+  {
+    out.write(i);
+    out.write(i >> 8);
+    out.write(i >> 16);
+    out.write(i >> 24);
   }
 }
