--- /home/tromey/gnu/Nightly/classpath/classpath/java/net/Authenticator.java	2004-04-13 02:20:23.000000000 -0600
+++ java/net/Authenticator.java	2003-06-13 02:27:35.000000000 -0600
@@ -7,7 +7,7 @@
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2, or (at your option)
 any later version.
-
+ 
 GNU Classpath is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
@@ -37,19 +37,18 @@
 
 package java.net;
 
-
 /**
   * This abstract class provides a model for obtaining authentication
   * information (in the form of a username and password) required by
   * some network operations (such as hitting a password protected
   * web site).
   * <p>
-  * To make use of this feature, a programmer must create a subclass
+  * To make use of this feature, a programmer must create a subclass 
   * that knows how to obtain the necessary info.  An example
-  * would be a class that popped up a dialog box to prompt the user.
-  * After creating an instance of that subclass, the static
-  * <code>setDefault</code> method of this class is called to set up
-  * that instance as the object to use on subsequent calls to obtain
+  * would be a class that popped up a dialog box to prompt the user.  
+  * After creating an instance of that subclass, the static 
+  * <code>setDefault</code> method of this class is called to set up 
+  * that instance as the object to use on subsequent calls to obtain 
   * authorization.
   *
   * @since 1.2
@@ -107,8 +106,8 @@
    */
 
   /**
-    * This method sets the default <code>Authenticator</code> object (an
-    * instance of a subclass of <code>Authenticator</code>) to use when
+    * This method sets the default <code>Authenticator</code> object (an 
+    * instance of a subclass of <code>Authenticator</code>) to use when 
     * prompting the user for
     * information.  Note that this method checks to see if the caller is
     * allowed to set this value (the "setDefaultAuthenticator" permission)
@@ -116,9 +115,9 @@
     *
     * @param defAuth The new default <code>Authenticator</code> object to use
     *
-    * @exception SecurityException If the caller does not have permission
+    * @exception SecurityException If the caller does not have permission 
     * to perform this operation
-    */
+    */ 
   public static void setDefault(Authenticator defAuth)
   {
     SecurityManager sm = System.getSecurityManager();
@@ -126,40 +125,38 @@
       sm.checkPermission(new NetPermission("setDefaultAuthenticator"));
 
     defaultAuthenticator = defAuth;
-  }
+  } 
 
   /**
     * This method is called whenever a username and password for a given
     * network operation is required.  First, a security check is made to see
     * if the caller has the "requestPasswordAuthentication"
     * permission.  If not, the method thows an exception.  If there is no
-    * default <code>Authenticator</code> object, the method then returns
-    * <code>null</code>.  Otherwise, the default authenticators's instance
+    * default <code>Authenticator</code> object, the method then returns 
+    * <code>null</code>.  Otherwise, the default authenticators's instance 
     * variables are initialized and it's <code>getPasswordAuthentication</code>
     * method is called to get the actual authentication information to return.
     *
     * @param addr The address requesting authentication
     * @param port The port requesting authentication
     * @param protocol The protocol requesting authentication
-    * @param prompt The prompt to display to the user when requesting
+    * @param prompt The prompt to display to the user when requesting 
     *        authentication info
     * @param scheme The authentication scheme in use
-    *
-    * @return A <code>PasswordAuthentication</code> object with the user's
+    * 
+    * @return A <code>PasswordAuthentication</code> object with the user's 
     *         authentication info.
     *
-    * @exception SecurityException If the caller does not have permission to
+    * @exception SecurityException If the caller does not have permission to 
     *         perform this operation
-    */
-  public static PasswordAuthentication requestPasswordAuthentication(InetAddress addr,
-                                                                     int port,
-                                                                     String protocol,
-                                                                     String prompt,
-                                                                     String scheme)
+    */ 
+  public static PasswordAuthentication 
+    requestPasswordAuthentication(InetAddress addr, int port, String protocol,
+      String prompt, String scheme) 
     throws SecurityException
   {
-    return requestPasswordAuthentication(null, addr, port, protocol, prompt,
-                                         scheme);
+    return(requestPasswordAuthentication (null, addr, port, protocol,
+  					prompt, scheme));
   }
 
   /**
@@ -178,24 +175,21 @@
     * @param addr The address requesting authentication
     * @param port The port requesting authentication
     * @param protocol The protocol requesting authentication
-    * @param prompt The prompt to display to the user when requesting
+    * @param prompt The prompt to display to the user when requesting 
     *        authentication info
     * @param scheme The authentication scheme in use
     *
-    * @return A <code>PasswordAuthentication</code> object with the user's
+    * @return A <code>PasswordAuthentication</code> object with the user's 
     *         authentication info.
     *
-    * @exception SecurityException If the caller does not have permission to
+    * @exception SecurityException If the caller does not have permission to 
     *         perform this operation
     *
     * @since 1.4
     */
-  public static PasswordAuthentication requestPasswordAuthentication(String host,
-                                                                     InetAddress addr,
-                                                                     int port,
-                                                                     String protocol,
-                                                                     String prompt,
-                                                                     String scheme)
+  public static PasswordAuthentication
+    requestPasswordAuthentication(String host, InetAddress addr, int port,
+        String protocol, String prompt, String scheme)
     throws SecurityException
   {
     SecurityManager sm = System.getSecurityManager();
@@ -203,7 +197,7 @@
       sm.checkPermission(new NetPermission("requestPasswordAuthentication"));
 
     if (defaultAuthenticator == null)
-      return null;
+      return(null);
 
     defaultAuthenticator.host = host;
     defaultAuthenticator.addr = addr;
@@ -212,7 +206,7 @@
     defaultAuthenticator.prompt = prompt;
     defaultAuthenticator.scheme = scheme;
 
-    return defaultAuthenticator.getPasswordAuthentication();
+    return(defaultAuthenticator.getPasswordAuthentication());
   }
 
   /*
@@ -238,7 +232,7 @@
     */
   protected final InetAddress getRequestingSite()
   {
-    return addr;
+    return(addr);
   }
 
   /**
@@ -246,24 +240,24 @@
    * or <code>null</code> if not available.
    *
    * @return The name of the host requesting authentication, or
-   * <code>null</code> if it is not available.
+   * </code>null</code> if it is not available.
    *
    * @since 1.4
    */
   protected final String getRequestingHost()
   {
-    return host;
+    return(host);
   }
 
   /**
-    * This method returns the port of the site that is requesting
+    * This method returns the port of the site that is requesting 
     * authentication.
     *
     * @return The requesting port
     */
   protected final int getRequestingPort()
   {
-    return port;
+    return(port);
   }
 
   /**
@@ -274,18 +268,18 @@
     */
   protected final String getRequestingProtocol()
   {
-    return protocol;
+    return(protocol);
   }
 
   /**
-    * Returns the prompt that should be used when requesting authentication
+    * Returns the prompt that should be used when requesting authentication 
     * information from the user
-    *
+    * 
     * @return The user prompt
     */
   protected final String getRequestingPrompt()
   {
-    return prompt;
+    return(prompt);
   }
 
   /**
@@ -295,7 +289,7 @@
     */
   protected final String getRequestingScheme()
   {
-    return scheme;
+    return(scheme);
   }
 
   /**
@@ -308,6 +302,8 @@
     */
   protected PasswordAuthentication getPasswordAuthentication()
   {
-    return null;
+    return(null);
   }
+
 } // class Authenticator
+
