--- /home/tromey/gnu/Nightly/classpath/classpath/java/util/regex/Pattern.java	2004-03-08 02:21:16.000000000 -0700
+++ java/util/regex/Pattern.java	2003-05-01 02:21:57.000000000 -0600
@@ -1,5 +1,5 @@
-/* Pattern.java -- Compiled regular expression ready to be applied.
-   Copyright (C) 2002, 2004 Free Software Foundation, Inc.
+/* Pattern.java -- 
+   Copyright (C) 2002 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -35,19 +35,13 @@
 obligated to do so.  If you do not wish to do so, delete this
 exception statement from your version. */
 
+// Stub class until java.util.regex is implemented.
 package java.util.regex;
 
-import gnu.regexp.RE;
-import gnu.regexp.RESyntax;
-import gnu.regexp.REException;
-
 import java.io.Serializable;
-import java.util.ArrayList;
-
 
 /**
- * Compiled regular expression ready to be applied. 
- *
+ * @author Michael Koch
  * @since 1.4
  */
 public class Pattern implements Serializable
@@ -62,10 +56,8 @@
   public static final int UNICODE_CASE = 64;
   public static final int UNIX_LINES = 1;
   
-  private final String regex;
-  private final int flags;
-
-  private final RE re;
+  private String regex;
+  private int flags;
 
   private Pattern (String regex)
     throws PatternSyntaxException
@@ -79,48 +71,9 @@
     this.regex = regex;
     this.flags = flags;
 
-    int gnuFlags = 0;
-    if ((flags & CASE_INSENSITIVE) != 0)
-      gnuFlags |= RE.REG_ICASE;
-    if ((flags & MULTILINE) != 0)
-      gnuFlags |= RE.REG_MULTILINE;
-    if ((flags & DOTALL) != 0)
-      gnuFlags |= RE.REG_DOT_NEWLINE;
-    // not yet supported:
-    // if ((flags & UNICODE_CASE) != 0) gnuFlags =
-    // if ((flags & CANON_EQ) != 0) gnuFlags =
-
-    // Eventually there will be such a thing as JDK 1_4 syntax
-    RESyntax syntax = RESyntax.RE_SYNTAX_PERL5;
-    if ((flags & UNIX_LINES) != 0)
-      {
-	// Use a syntax set with \n for linefeeds?
-	syntax = new RESyntax(syntax);
-	syntax.setLineSeparator("\n");
-      }
-
-    if ((flags & COMMENTS) != 0)
-      {
-	// Use a syntax with support for comments?
-      }
-
-    try
-      {
-	this.re = new RE(regex, gnuFlags, syntax);
-      }
-    catch (REException e)
-      {
-	throw new PatternSyntaxException(e.getMessage(),
-					 regex, e.getPosition());
-      }
+    throw new Error ("Not implemented");
   }
  
-  // package private accessor method
-  RE getRE()
-  {
-    return re;
-  }
-
   /**
    * @param regex The regular expression
    *
@@ -129,7 +82,7 @@
   public static Pattern compile (String regex)
     throws PatternSyntaxException
   {
-    return compile(regex, 0);
+    throw new Error ("Not implemented");
   }
   
   /**
@@ -163,7 +116,7 @@
    */
   public static boolean matches (String regex, CharSequence input) 
   {
-    return compile(regex).matcher(input).matches();
+    throw new Error ("Not implemented");
   }
   
   /**
@@ -171,7 +124,7 @@
    */
   public Matcher matcher (CharSequence input)
   {
-    return new Matcher(this, input);
+    throw new Error ("Not implemented");
   }
   
   /**
@@ -179,7 +132,7 @@
    */
   public String[] split (CharSequence input)
   {
-    return split(input, 0);
+    throw new Error ("Not implemented");
   }
   
   /**
@@ -188,67 +141,11 @@
    */
   public String[] split (CharSequence input, int limit)
   {
-    Matcher matcher = new Matcher(this, input);
-    ArrayList list = new ArrayList();
-    int empties = 0;
-    int count = 0;
-    int start = 0;
-    int end;
-    boolean matched;
-
-    while (matched = matcher.find() && (limit <= 0 || count < limit - 1))
-      {
-	++count;
-	end = matcher.start();
-	if (start == end)
-	  empties++;
-	else
-	  {
-	    while (empties-- > 0)
-	      list.add("");
-
-	    String text = input.subSequence(start, end).toString();
-	    list.add(text);
-	  }
-	start = matcher.end();
-      }
-
-    // We matched nothing.
-    if (!matched && count == 0)
-      return new String[] { input.toString() };
-    
-    // Is the last token empty?
-    boolean emptyLast = (start == input.length());
-
-    // Can/Must we add empties or an extra last token at the end?
-    if (list.size() < limit || limit < 0 || (limit == 0 && !emptyLast))
-      {
-	if (limit > list.size())
-	  {
-	    int max = limit - list.size();
-	    empties = (empties > max) ? max : empties;
-	  }
-	while (empties-- > 0)
-	  list.add("");
-      }
-
-    // last token at end
-    if (limit != 0 || (limit == 0 && !emptyLast))
-      {
-	String t = input.subSequence(start, input.length()).toString();
-	if ("".equals(t) && limit == 0)
-	  ; // Don't add.
-	else
-	  list.add(t);
-      }
-
-    String[] output = new String [list.size()];
-    list.toArray(output);
-    return output;
+    throw new Error ("Not implemented");
   }
   
   public String pattern ()
   {
-    return regex;
+    throw new Error ("Not implemented");
   }
 }
