--- /home/tromey/gnu/Nightly/classpath/classpath/gnu/java/nio/ServerSocketChannelImpl.java	2003-06-19 02:34:36.000000000 -0600
+++ gnu/java/nio/ServerSocketChannelImpl.java	2003-10-13 02:17:50.000000000 -0600
@@ -1,5 +1,5 @@
 /* ServerSocketChannelImpl.java -- 
-   Copyright (C) 2002 Free Software Foundation, Inc.
+   Copyright (C) 2002, 2003 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -38,18 +38,23 @@
 
 package gnu.java.nio;
 
+import gnu.java.net.PlainSocketImpl;
 import java.io.IOException;
 import java.net.InetSocketAddress;
 import java.net.ServerSocket;
 import java.net.Socket;
 import java.net.SocketAddress;
+import java.net.SocketException;
+import java.net.SocketTimeoutException;
+import java.nio.channels.ClosedChannelException;
+import java.nio.channels.NotYetBoundException;
 import java.nio.channels.ServerSocketChannel;
 import java.nio.channels.SocketChannel;
 import java.nio.channels.spi.SelectorProvider;
 
-class ServerSocketChannelImpl extends ServerSocketChannel
+public final class ServerSocketChannelImpl extends ServerSocketChannel
 {
-  ServerSocket serverSocket;
+  NIOServerSocket serverSocket;
   boolean blocking = true;
   boolean connected = false;
 
@@ -57,7 +62,12 @@
     throws IOException
   {
     super (provider);
-    serverSocket = new ServerSocket ();
+    serverSocket = new NIOServerSocket (this);
+  }
+
+  public int getNativeFD()
+  {
+    return serverSocket.getPlainSocketImpl().getNativeFD();
   }
  
   public void finalizer()
@@ -82,15 +92,34 @@
 
   protected void implConfigureBlocking (boolean blocking) throws IOException
   {
-    this.blocking = blocking; // FIXME
+    serverSocket.setSoTimeout (blocking ? 0 : NIOConstants.DEFAULT_TIMEOUT);
+    this.blocking = blocking;
   }
 
   public SocketChannel accept () throws IOException
   {
-    SocketChannelImpl result = new SocketChannelImpl (provider ());
-    Socket socket = serverSocket.accept();
-    //socket.setChannel (result); // FIXME
-    return result;
+    if (!isOpen())
+      throw new ClosedChannelException();
+
+    if (!serverSocket.isBound())
+      throw new NotYetBoundException();
+
+    boolean completed = false;
+    
+    try
+      {
+        NIOSocket socket = (NIOSocket) serverSocket.accept();
+        completed = true;
+        return socket.getChannel();
+      }
+    catch (SocketTimeoutException e)
+      {
+        return null;
+      }
+    finally
+      {
+        end (completed);
+      }
   }
 
   public ServerSocket socket ()
