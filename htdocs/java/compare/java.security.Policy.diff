--- /home/tromey/gnu/egcs/classpath/classpath/java/security/Policy.java	Wed Mar 22 12:26:20 2000
+++ java/security/Policy.java	Wed Apr 25 09:45:12 2001
@@ -7,7 +7,7 @@
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2, or (at your option)
 any later version.
- 
+
 GNU Classpath is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
@@ -24,7 +24,6 @@
 This exception does not however invalidate any other reasons why the
 executable file might be covered by the GNU General Public License. */
 
-
 package java.security;
 
 /**
@@ -33,52 +32,57 @@
    which permissions are available for code from various
    sources. The security policy is represented through a 
    subclass of Policy.
-   
+
    Only one Policy is in effect at any time. ProtectionDomain
    initializes itself with information from this class on the 
    set of permssions to grant.
-   
+
    The location for the actual Policy could be anywhere in any
    form because it depends on the Policy implementation. The
    default system is in a flat ASCII file or it could be in a 
    database.
-   
+
    The current installed Policy can be accessed with getPolicy
    and changed with setPolicy if the code has the correct
    permissions.
-   
+
    The refresh method causes the Policy class to refresh/reload
    its configuration. The method used to refresh depends on the 
    Policy implementation.
-   
+
    When a protection domain initializes its permissions it uses
    code like:
    <code>
    policy = Policy.getPolicy();
-   permissionCollection perms = policy.getPermissions(MyCodeSource)	
+   permissionCollection perms = policy.getPermissions(MyCodeSource)     
    </code>
    The protection domain passes the Policy handler a CodeSource
    object which contains the codebase URL and public key. The 
    Policy implementation then returns the proper set of 
    permissions for the CodeSource.
-   
+
    The default Policy implementation can be changed by setting
    the "policy.provider" security provider in java.security
    to the correct Policy implementation class.
-   
+
    @author Mark Benvenuto
-   
+
    @since JDK 1.2
-*/	
+ */
 public abstract class Policy
 {
+  // FIXME: The class name of the Policy provider should really be sourced 
+  // from the "java.security" configuration file. For now, just hard-code 
+  // a stub implementation.
+  static private Policy currentPolicy 
+    = new gnu.java.security.provider.DefaultPolicy();
 
-  static private Policy currentPolicy = null;
   /**
      Constructs a new Policy class.
-  */
+   */
   public Policy()
-  {}
+  {
+  }
 
   /**
      Gets the currently installed Policy handler. The value should
@@ -92,12 +96,12 @@
      @throws SecurityException if the security manager exists
      the caller does not have permission to 
      <code>getPolicy</code>.
-  */
+   */
   public static Policy getPolicy()
   {
     SecurityManager sm = System.getSecurityManager();
-    if(sm != null)
-      sm.checkPermission( new SecurityPermission("getPolicy") );
+    if (sm != null)
+      sm.checkPermission(new SecurityPermission("getPolicy"));
 
     return currentPolicy;
   }
@@ -113,12 +117,12 @@
      @throws SecurityException if the security manager exists
      the caller does not have permission to 
      <code>getPolicy</code>.
-  */
+   */
   public static void setPolicy(Policy policy)
   {
     SecurityManager sm = System.getSecurityManager();
-    if(sm != null)
-      sm.checkPermission( new SecurityPermission("setPolicy") );
+    if (sm != null)
+      sm.checkPermission(new SecurityPermission("setPolicy"));
 
     currentPolicy = policy;
   }
@@ -135,12 +139,12 @@
 
      @throws SecurityException if the current thread does not
      have permission to call <code>getPermissions</code>
-  */
+   */
   public abstract PermissionCollection getPermissions(CodeSource codesource);
 
   /**
      Refreshes and/or reloads the current Policy. The actual
      behavior of this method depends on the implementation. 
-  */
+   */
   public abstract void refresh();
 }
