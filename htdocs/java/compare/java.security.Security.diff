--- /home/tromey/gnu/Nightly/classpath/classpath/java/security/Security.java	2003-08-15 02:20:56.000000000 -0600
+++ java/security/Security.java	2003-06-13 02:27:40.000000000 -0600
@@ -63,53 +63,31 @@
 {
   private static final String ALG_ALIAS = "Alg.Alias.";
 
-  private static final Vector providersList = new Vector();
-  private static boolean providersInited = false;
+  private static Vector providers = new Vector();
   private static Properties secprops = new Properties();
-  
-  /**
-   * Returns the Vector of security providers. This method will load
-   * the security providers when they are needed for the first time. 
-   * This allows for a faster startup.  
-   * @return vector of security providers
-   */ 
-  private static Vector providers() 
+  static
   {
-    synchronized (providersList) 
-      {
-	if (!providersInited)
-	  {
-	    providersInited = true;
-	    String base = System.getProperty("gnu.classpath.home.url");
-	    String vendor = System.getProperty("gnu.classpath.vm.shortname");
-	    
-	    // Try VM specific security file
-	    boolean loaded = loadProviders(base, vendor);
-	    
-	    // Append classpath standard provider if possible
-	    if (!loadProviders(base, "classpath")
-		&& !loaded && providersList.size() == 0)
-	      {
-		// No providers found
-		// and both security files failed to load properly.
-		System.err.println
-		  ("WARNING: "
-		   + "could not properly read security provider files:");
-		System.err.println
-		  ("         "
-		   + base + "/security/" + vendor + ".security");
-		System.err.println
-		  ("         "
-		   + base + "/security/" + "classpath" + ".security");
-		System.err.println
-		  ("         Falling back to standard GNU security provider");
-		providersList.addElement(new gnu.java.security.provider.Gnu());
-	      }
-	  }
+    String base = System.getProperty("gnu.classpath.home.url");
+    String vendor = System.getProperty("gnu.classpath.vm.shortname");
+    
+    // Try VM specific security file
+    boolean loaded = loadProviders(base, vendor);
+    
+    // Append classpath standard provider if possible
+    if (!loadProviders(base, "classpath") && !loaded && providers.size() == 0)
+      {
+	// No providers found and both security files failed to load properly.
+	System.err.println
+	  ("WARNING: could not properly read security provider files:");
+	System.err.println
+	  ("         " + base + "/security/" + vendor + ".security");
+	System.err.println
+	  ("         " + base + "/security/" + "classpath" + ".security");
+	System.err.println
+	  ("         Falling back to standard GNU security provider");
+	providers.addElement(new gnu.java.security.provider.Gnu());
       }
-    return providersList; 
   }
-  
 
   // This class can't be instantiated.
   private Security ()
@@ -140,7 +118,7 @@
 	    Exception exception = null;
 	    try
 	      {
-		providers().addElement(Class.forName(name).newInstance());
+		providers.addElement(Class.forName(name).newInstance());
 	      }
 	    catch (ClassNotFoundException x)
 	      {
@@ -197,7 +175,7 @@
 
     String property = String.valueOf(propName) + "." + String.valueOf(algName);
     Provider p;
-    for (Iterator i = providers().iterator(); i.hasNext(); )
+    for (Iterator i = providers.iterator(); i.hasNext(); )
       {
         p = (Provider) i.next();
         for (Iterator j = p.keySet().iterator(); j.hasNext(); )
@@ -253,10 +231,10 @@
       sm.checkSecurityAccess("insertProvider." + provider.getName());
 
     position--;
-    int max = providers().size ();
+    int max = providers.size ();
     for (int i = 0; i < max; i++)
       {
-	if (((Provider) providers().elementAt(i)).getName() == provider.getName())
+	if (((Provider) providers.elementAt(i)).getName() == provider.getName())
 	  return -1;
       }
 
@@ -265,7 +243,7 @@
     if (position > max)
       position = max;
 
-    providers().insertElementAt(provider, position);
+    providers.insertElementAt(provider, position);
 
     return position + 1;
   }
@@ -295,7 +273,7 @@
    */
   public static int addProvider(Provider provider)
   {
-    return insertProviderAt (provider, providers().size () + 1);
+    return insertProviderAt (provider, providers.size () + 1);
   }
 
   /**
@@ -328,12 +306,12 @@
     if (sm != null)
       sm.checkSecurityAccess("removeProvider." + name);
 
-    int max = providers().size ();
+    int max = providers.size ();
     for (int i = 0; i < max; i++)
       {
-	if (((Provider) providers().elementAt(i)).getName() == name)
+	if (((Provider) providers.elementAt(i)).getName() == name)
 	  {
-	    providers().remove(i);
+	    providers.remove(i);
 	    break;
 	  }
       }
@@ -347,8 +325,8 @@
    */
   public static Provider[] getProviders()
   {
-    Provider array[] = new Provider[providers().size ()];
-    providers().copyInto (array);
+    Provider array[] = new Provider[providers.size ()];
+    providers.copyInto (array);
     return array;
   }
 
@@ -364,10 +342,10 @@
   public static Provider getProvider(String name)
   {
     Provider p;
-    int max = providers().size ();
+    int max = providers.size ();
     for (int i = 0; i < max; i++)
       {
-	p = (Provider) providers().elementAt(i);
+	p = (Provider) providers.elementAt(i);
 	if (p.getName() == name)
 	  return p;
       }
@@ -521,7 +499,7 @@
    */
   public static Provider[] getProviders(String filter)
   {
-    if (providers() == null || providers().isEmpty())
+    if (providers == null || providers.isEmpty())
       return null;
 
     if (filter == null || filter.length() == 0)
@@ -581,7 +559,7 @@
   */
   public static Provider[] getProviders(Map filter)
   {
-    if (providers() == null || providers().isEmpty())
+    if (providers == null || providers.isEmpty())
       return null;
 
     if (filter == null)
@@ -591,7 +569,7 @@
     if (querries == null || querries.isEmpty())
       return getProviders();
 
-    LinkedHashSet result = new LinkedHashSet(providers()); // assume all
+    LinkedHashSet result = new LinkedHashSet(providers); // assume all
     int dot, ws;
     String querry, service, algorithm, attribute, value;
     LinkedHashSet serviceProviders = new LinkedHashSet(); // preserve insertion order
