--- /home/tromey/gnu/Nightly/classpath/classpath/java/net/URL.java	2003-09-28 02:20:12.000000000 -0600
+++ java/net/URL.java	2003-09-28 02:18:21.000000000 -0600
@@ -181,11 +181,6 @@
    */
   private static boolean cache_handlers;
 
-  /**
-   * The search path of packages to search for protocol handlers in.
-   */
-  private static String ph_search_path;
-
   static
     {
       String s = System.getProperty("gnu.java.net.nocache_protocol_handlers");
@@ -193,14 +188,6 @@
         cache_handlers = true;
       else
         cache_handlers = false;
-
-      ph_search_path = System.getProperty("java.protocol.handler.pkgs");
-
-      // Tack our default package on at the ends
-      if (ph_search_path != null)
-        ph_search_path = ph_search_path + "|" + "gnu.java.net.protocol";
-      else
-        ph_search_path = "gnu.java.net.protocol";
     }
 
   /**
@@ -774,19 +761,8 @@
     // First, see if a protocol handler is in our cache.
     if (cache_handlers)
       {
-        Class cls = (Class) ph_cache.get (protocol);
-        
-        if (cls != null)
-          {
-            try
-              {
-                return (URLStreamHandler) cls.newInstance();
-              }
-            catch (Exception e)
-              {
-                // Can't instantiate; handler still null.
-              }
-          }
+        if ((ph = (URLStreamHandler) ph_cache.get(protocol)) != null)
+          return ph;
       }
 
     // If a non-default factory has been set, use it to find the protocol.
@@ -794,13 +770,39 @@
       {
 	ph = factory.createURLStreamHandler (protocol);
       }
+    else if (protocol.equals ("core"))
+      {
+ 	ph = new gnu.gcj.protocol.core.Handler();
+      }
+    else if (protocol.equals ("file"))
+      {
+	// This is an interesting case.  It's tempting to think that we
+	// could call Class.forName ("gnu.gcj.protocol.file.Handler") to
+	// get the appropriate class.  Unfortunately, if we do that the
+	// program will never terminate, because getURLStreamHandler is
+	// eventually called by Class.forName.
+	//
+	// Treating "file" as a special case is the minimum that will
+	// fix this problem.  If other protocols are required in a
+	// statically linked application they will need to be handled in
+	// the same way as "file".
+	ph = new gnu.gcj.protocol.file.Handler();
+      }
 
     // Non-default factory may have returned null or a factory wasn't set.
     // Use the default search algorithm to find a handler for this protocol.
     if (ph == null)
       {
+	// Get the list of packages to check and append our default handler
+	// to it, along with the JDK specified default as a last resort.
+	// Except in very unusual environments the JDK specified one shouldn't
+	// ever be needed (or available).
+	String propVal = System.getProperty("java.protocol.handler.pkgs");
+	propVal = (propVal == null) ? "" : (propVal + "|");
+	propVal = propVal + "gnu.gcj.protocol|sun.net.www.protocol";
+
 	// Finally loop through our search path looking for a match.
-	StringTokenizer pkgPrefix = new StringTokenizer (ph_search_path, "|");
+	StringTokenizer pkgPrefix = new StringTokenizer (propVal, "|");
         
 	do
           {
@@ -829,7 +831,7 @@
     if (ph != null
         && cache_handlers)
       if (ph instanceof URLStreamHandler)
-	ph_cache.put (protocol, ph.getClass());
+	ph_cache.put(protocol, ph);
       else
 	ph = null;
 
