--- /home/tromey/gnu/Nightly/classpath/classpath/java/security/SecureRandom.java	Thu Mar 27 02:18:21 2003
+++ java/security/SecureRandom.java	Fri Feb 14 02:17:40 2003
@@ -42,24 +42,14 @@
 import java.util.Enumeration;
 
 /**
- * An interface to a cryptographically secure pseudo-random number
- * generator (PRNG). Random (or at least unguessable) numbers are used
- * in all areas of security and cryptography, from the generation of
- * keys and initialization vectors to the generation of random padding
- * bytes.
- *
- * @author Mark Benvenuto <ivymccough@worldnet.att.net>
- * @author Casey Marshall
+   SecureRandom is the class interface for using SecureRandom
+   providers. It provides an interface to the SecureRandomSpi
+   engine so that programmers can generate pseudo-random numbers.
+
+   @author Mark Benvenuto <ivymccough@worldnet.att.net>
  */
 public class SecureRandom extends Random
 {
-
-  // Constants and fields.
-  // ------------------------------------------------------------------------
-
-  /** Service name for PRNGs. */
-  private static final String SECURE_RANDOM = "SecureRandom";
-
   static final long serialVersionUID = 4940670005562187L;
 
   //Serialized Field
@@ -70,9 +60,6 @@
   SecureRandomSpi secureRandomSpi = null;
   byte[] state = null;
 
-  // Constructors.
-  // ------------------------------------------------------------------------
-
   /**
      Default constructor for SecureRandom. It constructs a 
      new SecureRandom by instantating the first SecureRandom 
@@ -82,7 +69,7 @@
      on the first call to getnextBytes it will force a seed.
 
      It is maintained for backwards compatibility and programs
-     should use {@link #getInstance(java.lang.String)}.
+     should use getInstance.
    */
   public SecureRandom()
   {
@@ -101,20 +88,20 @@
           {
             key = (String) e.nextElement();
             if (key.startsWith("SECURERANDOM."))
-              {
-                if ((classname = p[i].getProperty(key)) != null)
-                  {
-                    try
-                      {
-                        secureRandomSpi = (SecureRandomSpi) Class.
-                          forName(classname).newInstance();
-                        provider = p[i];
-                        return;
-                      }
-                    catch (Throwable ignore) { }
-                  }
-              }
-          }
+	      {
+		if ((classname = p[i].getProperty(key)) != null)
+		  {
+		    try
+		      {
+			secureRandomSpi = (SecureRandomSpi) Class.
+			  forName(classname).newInstance();
+			provider = p[i];
+			return;
+		      }
+		    catch (Throwable ignore) { }
+		  }
+	      }
+	  }
       }
 
     // Nothing found. Fall back to SHA1PRNG
@@ -154,17 +141,15 @@
     this.provider = provider;
   }
 
-  // Class methods.
-  // ------------------------------------------------------------------------
-
   /**
-   * Returns an instance of a SecureRandom. It creates the class from
-   * the first provider that implements it.
-   *
-   * @param algorithm The algorithm name.
-   * @return A new SecureRandom implmenting the given algorithm.
-   * @throws NoSuchAlgorithmException If no installed provider implements
-   *         the given algorithm.
+     Returns an instance of a SecureRandom. It creates the class
+     for the specified algorithm if it exists from a provider.
+
+     @param algorithm A SecureRandom algorithm to use
+
+     @return Returns a new SecureRandom implmenting the chosen algorithm
+
+     @throws NoSuchAlgorithmException if the algorithm cannot be found
    */
   public static SecureRandom getInstance(String algorithm) throws
     NoSuchAlgorithmException
@@ -172,13 +157,11 @@
     Provider p[] = Security.getProviders();
     for (int i = 0; i < p.length; i++)
       {
-        try
-          {
-            return getInstance(algorithm, p[i]);
-          }
-        catch (NoSuchAlgorithmException ignored)
-          {
-          }
+	try
+	  {
+	    return getInstance(algorithm, p[i]);
+	  }
+	catch (NoSuchAlgorithmException ignored) { }
       }
 
     // None found.
@@ -186,26 +169,21 @@
   }
 
   /**
-   * Returns an instance of a SecureRandom. It creates the class
-   * for the specified algorithm from the named provider.
-   *
-   * @param algorithm The algorithm name.
-   * @param provider  The provider name.
-   * @return A new SecureRandom implmenting the chosen algorithm.
-   * @throws NoSuchAlgorithmException If the named provider does not implement
-   *         the algorithm, or if the implementation cannot be
-   *         instantiated.
-   * @throws NoSuchProviderException If no provider named
-   *         <code>provider</code> is currently installed.
-   * @throws IllegalArgumentException If <code>provider</code> is null
-   *         or is empty.
+     Returns an instance of a SecureRandom. It creates the class
+     for the specified algorithm from the specified provider.
+
+     @param algorithm A SecureRandom algorithm to use
+     @param provider A security provider to use
+
+     @return Returns a new SecureRandom implmenting the chosen algorithm
+
+     @throws NoSuchAlgorithmException if the algorithm cannot be found
+     @throws NoSuchProviderException if the provider cannot be found
    */
-  public static SecureRandom getInstance(String algorithm, String provider)
-  throws NoSuchAlgorithmException, NoSuchProviderException
+  public static SecureRandom getInstance(String algorithm,
+					 String provider) throws
+    NoSuchAlgorithmException, NoSuchProviderException
   {
-    if (provider == null || provider.length() == 0)
-      throw new IllegalArgumentException("Illegal provider");
-
     Provider p = Security.getProvider(provider);
     if (p == null)
       throw new NoSuchProviderException();
@@ -214,35 +192,88 @@
   }
 
   /**
-   * Returns an instance of a SecureRandom. It creates the class for
-   * the specified algorithm from the given provider.
-   *
-   * @param algorithm The SecureRandom algorithm to create.
-   * @param provider  The provider to get the instance from.
-   * @throws NoSuchAlgorithmException If the algorithm cannot be found, or
-   *         if the class cannot be instantiated.
-   * @throws IllegalArgumentException If <code>provider</code> is null.
-   */
-  public static SecureRandom getInstance(String algorithm, Provider provider)
-  throws NoSuchAlgorithmException
-  {
-    if (provider == null)
-      throw new IllegalArgumentException("Illegal provider");
-    try
-      {
-        return new SecureRandom((SecureRandomSpi)
-          Engine.getInstance(SECURE_RANDOM, algorithm, provider),
-          provider);
-      }
-    catch (ClassCastException cce)
+     Returns an instance of a SecureRandom. It creates the class for
+     the specified algorithm from the given provider.
+
+     @param algorithm The SecureRandom algorithm to create.
+     @param provider  The provider to get the instance from.
+
+     @throws NoSuchAlgorithmException If the algorithm cannot be found, or
+             if the class cannot be instantiated.
+   */
+  public static SecureRandom getInstance(String algorithm,
+                                         Provider provider) throws
+    NoSuchAlgorithmException
+  {
+    return getInstance(algorithm, provider, true);
+  }
+
+  /**
+     Creates the instance of SecureRandom, recursing to resolve aliases.
+
+     @param algorithm The SecureRandom algorithm to create.
+     @param provider  The provider to get the implementation from.
+     @param recurse   Whether or not to recurse to resolve aliases.
+
+     @throws NoSuchAlgorithmException If the algorithm cannot be found,
+             if there are too many aliases, or if the class cannot be
+             instantiated.
+   */
+  private static SecureRandom getInstance(String algorithm,
+                                          Provider provider,
+                                          boolean recurse)
+    throws NoSuchAlgorithmException
+  {
+    String msg = algorithm;
+    for (Enumeration e = provider.propertyNames(); e.hasMoreElements(); )
       {
-        throw new NoSuchAlgorithmException(algorithm);
+        // We could replace the boolean with an integer, incrementing it
+        // every
+        String key = (String) e.nextElement();
+        if (key.startsWith("SECURERANDOM.")
+            && key.substring(13).equalsIgnoreCase(algorithm))
+	  {
+	    try
+	      {
+		Class c = Class.forName(provider.getProperty(key));
+		return new SecureRandom((SecureRandomSpi) c.newInstance(),
+					provider);
+	      }
+	    catch (Throwable ignored) { }
+	  }
+	else if (key.startsWith("ALG.ALIAS.SECURERANDOM.")
+		 && key.substring(23).equalsIgnoreCase(algorithm) && recurse)
+	  {
+	    try
+	      {
+		// First see if this alias refers to a class in this
+		// provider.
+		return getInstance(provider.getProperty(key), provider, false);
+	      }
+	    catch (NoSuchAlgorithmException nsae)
+	      {
+		Provider[] provs = Security.getProviders();
+		for (int i = 0; i < provs.length; i++)
+		  {
+		    if (provs[i] == provider)
+		      continue;
+		    // Now try other providers for the implementation
+		    try
+		      {
+			return getInstance(provider.getProperty(key),
+					   provs[i], false);
+		      }
+		    catch (NoSuchAlgorithmException nsae2)
+		      {
+			msg = nsae2.getMessage();
+		      }
+		  }
+	      }
+	  }
       }
+    throw new NoSuchAlgorithmException(algorithm);
   }
 
-  // Instance methods.
-  // ------------------------------------------------------------------------
-
   /**
      Returns the provider being used by the current SecureRandom class.
 
@@ -287,8 +318,8 @@
 		       (byte) (0xff & (seed >> 16)),
 		       (byte) (0xff & (seed >> 8)),
 		       (byte) (0xff & seed)
-        };
-        secureRandomSpi.engineSetSeed(tmp);
+	};
+	secureRandomSpi.engineSetSeed(tmp);
       }
   }
 
