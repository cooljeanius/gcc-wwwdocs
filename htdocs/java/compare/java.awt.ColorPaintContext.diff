--- /home/tromey/gnu/Nightly/classpath/classpath/java/awt/ColorPaintContext.java	2004-04-28 02:20:15.000000000 -0600
+++ java/awt/ColorPaintContext.java	2002-08-08 22:26:13.000000000 -0600
@@ -1,5 +1,5 @@
 /* ColorPaintContext.java -- context for painting solid colors
-   Copyright (C) 2002, 2004 Free Software Foundation, Inc.
+   Copyright (C) 2002 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -55,31 +55,15 @@
    * SystemColor.
    */
   final int color;
-  final ColorModel colorModel;
 
-  private ColorRaster cachedRaster;
-
-  
   /**
    * Create the context for a given color.
    *
-   * @param c The solid color to use.
+   * @param c the solid color to use
    */
-  ColorPaintContext(int colorRGB)
+  ColorPaintContext(int c)
   {
-    this(ColorModel.getRGBdefault(), colorRGB);
-  }
-  
-  /**
-   * Create the context for a given color.
-   *
-   * @param cm The color model of this context. 
-   * @param c The solid color to use.
-   */
-  ColorPaintContext(ColorModel cm,int colorRGB)
-  {
-    color = colorRGB;
-    colorModel = cm;
+    color = c;
   }
 
   /**
@@ -91,13 +75,14 @@
   }
 
   /**
-   * Return the color model of this context. 
+   * Return the color model of this context. This ignores the model passed
+   * in the request, since colors are always in sRGB.
    *
    * @return the context color model
    */
   public ColorModel getColorModel()
   {
-    return colorModel;
+    return ColorModel.getRGBdefault();
   }
 
   /**
@@ -109,87 +94,10 @@
    * @param h the height, in device space
    * @return a raster for the given area and color
    */
-  public Raster getRaster(int x, int y, int width, int height)
-  {
-   if(  cachedRaster == null 
-       || cachedRaster.getWidth() < width
-       || cachedRaster.getHeight() < height)
-   {
-     cachedRaster = new ColorRaster(colorModel, 0, 0, width, height, color);
-   }
-   return cachedRaster.createChild(0 ,0 ,width ,height ,x ,y , null);
-  }
-  
-  /**
-   * A ColorRaster is a raster that is completely filled with one color. The 
-   * data layout is taken from the color model given to the constructor.
-   */
-  private class ColorRaster extends Raster
+  public Raster getRaster(int x, int y, int w, int h)
   {
-    
-    /**
-     * Create a raster that is compaltible with the given color model and 
-     * filled with the given color.
-     * @param cm The color model for this raster.
-     * @param x The smallest horizontal corrdinate in the raster.
-     * @param y The smallest vertical coordinate in the raster.
-     * @param width The width of the raster.
-     * @param height The height of the raster.
-     * @param rgbPixel The RGB value of the color for this raster.
-     */
-    ColorRaster(ColorModel cm,int x, int y, int width, int height, int rgbPixel)
-    {         
-      super(cm.createCompatibleSampleModel(width,height),new Point(x,y));
-      Object pixel = cm.getDataElements(rgbPixel,null);
-      getSampleModel().setDataElements(0, 0,
-                                       width, height,
-                                       multiplyData(pixel,null,width*height),
-                                       dataBuffer);
-    }
-    
-    
-    
-    private Object multiplyData(Object src, Object dest, int factor)
-    {
-      Object from;
-      int srcLength = 0;
-      if (src instanceof byte[])
-      {
-        srcLength = ((byte[])src).length;
-        
-        if (dest == null) dest = new byte[factor * srcLength];
-      }
-      else if (src instanceof short[])
-      {
-        srcLength = ((short[])src).length;
-        if (dest == null) dest = new short[factor * srcLength];
-      }
-      else if (src instanceof int[])
-      {
-        srcLength = ((int[]) src).length;
-        if (dest == null) dest = new int[factor * srcLength];
-      }
-      else
-      {
-        throw new ClassCastException("Unknown data buffer type");
-      }
-      
-      System.arraycopy(src,0,dest,0,srcLength);
-      
-      int count = 1;
-      while(count*2 < factor)
-      {
-        System.arraycopy(dest, 0, dest, count * srcLength, count*srcLength);
-        count *= 2; 
-      }
-      
-      if(factor > count)
-        System.arraycopy(dest,0, dest, count * srcLength, 
-                         (factor - count) * srcLength );
-      
-      return dest;
-    }
-    
+    // XXX Implement. Sun uses undocumented implementation class
+    // sun.awt.image.IntegerInterleavedRaster.
+    throw new Error("not implemented");
   }
-  
 } // class ColorPaintContext
