--- /home/tromey/gnu/Nightly/classpath/classpath/java/nio/Buffer.java	2004-04-13 02:20:24.000000000 -0600
+++ java/nio/Buffer.java	2003-10-13 02:17:50.000000000 -0600
@@ -45,11 +45,10 @@
   int pos = 0;
   int mark = -1;
 
-  /**
-   * Creates a new Buffer.
-   *
-   * Should be package private.
-   */
+  // Creates a new Buffer.
+  //
+  // Should be package private.
+  //
   Buffer (int capacity, int limit, int position, int mark)
   {
     if (capacity < 0)
@@ -70,8 +69,6 @@
   
   /**
    * Retrieves the capacity of the buffer.
-   *
-   * @return the capacity of the buffer
    */
   public final int capacity ()
   {
@@ -80,8 +77,6 @@
 
   /**
    * Clears the buffer.
-   *
-   * @return this buffer
    */
   public final Buffer clear ()
   {
@@ -93,8 +88,6 @@
     
   /**
    * Flips the buffer.
-   *
-   * @return this buffer
    */
   public final Buffer flip ()
   {
@@ -106,9 +99,6 @@
     
   /**
    * Tells whether the buffer has remaining data to read or not.
-   *
-   * @return true if the buffer contains remaining data to read,
-   * false otherwise
    */
   public final boolean hasRemaining ()
   {
@@ -117,15 +107,11 @@
 
   /**
    * Tells whether this buffer is read only or not.
-   *
-   * @return true if the buffer is read only, false otherwise
    */
   public abstract boolean isReadOnly ();
 
   /**
    * Retrieves the current limit of the buffer.
-   *
-   * @return the limit of the buffer
    */
   public final int limit ()
   {
@@ -138,8 +124,6 @@
    * @param newLimit The new limit value; must be non-negative and no larger
    * than this buffer's capacity.
    *
-   * @return this buffer
-   *
    * @exception IllegalArgumentException If the preconditions on newLimit
    * do not hold.
    */
@@ -160,8 +144,6 @@
 
   /**
    * Sets this buffer's mark at its position.
-   *
-   * @return this buffer
    */
   public final Buffer mark ()
   {
@@ -171,8 +153,6 @@
 
   /**
    * Retrieves the current position of this buffer.
-   *
-   * @return the current position of this buffer
    */
   public final int position ()
   {
@@ -185,9 +165,7 @@
    * 
    * @param newPosition The new position value; must be non-negative and no
    * larger than the current limit.
-   *
-   * @return this buffer
-   *
+   * 
    * @exception IllegalArgumentException If the preconditions on newPosition
    * do not hold
    */
@@ -205,8 +183,6 @@
 
   /**
    * Returns the number of elements between the current position and the limit.
-   *
-   * @return the number of remaining elements
    */
   public final int remaining()
   {
@@ -215,9 +191,7 @@
 
   /**
    * Resets this buffer's position to the previously-marked position.
-   *
-   * @return this buffer
-   *
+   * 
    * @exception InvalidMarkException If the mark has not been set.
    */
   public final Buffer reset()
@@ -232,8 +206,6 @@
   /**
    * Rewinds this buffer. The position is set to zero and the mark
    * is discarded.
-   *
-   * @this buffer
    */
   public final Buffer rewind()
   {
