--- /home/tromey/gnu/Nightly/classpath/classpath/javax/swing/undo/UndoableEditSupport.java	2004-01-07 02:20:41.000000000 -0700
+++ javax/swing/undo/UndoableEditSupport.java	2003-06-13 02:27:46.000000000 -0600
@@ -1,5 +1,5 @@
 /* UndoableEditSupport.java --
-   Copyright (C) 2002, 2003, 2004 Free Software Foundation, Inc.
+   Copyright (C) 2002, 2003 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -38,112 +38,98 @@
 
 package javax.swing.undo;
 
-import java.util.Iterator;
 import java.util.Vector;
 import javax.swing.event.UndoableEditEvent;
 import javax.swing.event.UndoableEditListener;
 
-
 /**
- * A helper class for supporting {@link
- * javax.swing.event.UndoableEditListener}.
- *
- * @author <a href="mailto:aselkirk@sympatico.ca">Andrew Selkirk</a>
- * @author <a href="mailto:brawer@dandelis.ch">Sascha Brawer</a>
+ * UndoableEditSupport
+ * @author	Andrew Selkirk
  */
 public class UndoableEditSupport
 {
+
+  //-------------------------------------------------------------
+  // Variables --------------------------------------------------
+  //-------------------------------------------------------------
+
   /**
-   * The number of times that {@link #beginUpdate()} has been called
-   * without a matching call to {@link #endUpdate()}.
+   * updateLevel
    */
   protected int updateLevel;
 
-
   /**
    * compoundEdit
    */
   protected CompoundEdit compoundEdit;
 
-
   /**
-   * The currently registered listeners.
+   * listeners
    */
   protected Vector listeners = new Vector();
 
-
   /**
-   * The source of the broadcast UndoableEditEvents.
+   * realSource
    */
   protected Object realSource;
 
 
+  //-------------------------------------------------------------
+  // Initialization ---------------------------------------------
+  //-------------------------------------------------------------
+
   /**
-   * Constructs a new helper for broadcasting UndoableEditEvents.  The
-   * events will indicate the newly constructed
-   * <code>UndoableEditSupport</code> instance as their source.
-   *
-   * @see #UndoableEditSupport(java.lang.Object)
+   * Constructor UndoableEditSupport
    */
   public UndoableEditSupport()
   {
-    realSource = this;
   }
 
-
   /**
-   * Constructs a new helper for broadcasting UndoableEditEvents.
-   *
-   * @param realSource the source of the UndoableEditEvents that will
-   * be broadcast by this helper. If <code>realSource</code> is
-   * <code>null</code>, the events will indicate the newly constructed
-   * <code>UndoableEditSupport</code> instance as their source.
+   * Constructor UndoableEditSupport
+   * @param object TODO
    */
-  public UndoableEditSupport(Object realSource)
+  public UndoableEditSupport(Object object)
   {
-    if (realSource == null)
-      realSource = this;
-    this.realSource = realSource;
+    realSource = object;
   }
 
 
+  //-------------------------------------------------------------
+  // Methods ----------------------------------------------------
+  //-------------------------------------------------------------
+
   /**
-   * Returns a string representation of this object that may be useful
-   * for debugging.
+   * toString
+   * @returns String
    */
   public String toString()
   {
-    // Note that often, this.realSource == this. Therefore, dumping
-    // realSource without additional checks may lead to infinite
-    // recursion. See Classpath bug #7119.
-    return super.toString() + " updateLevel: " + updateLevel
-      + " listeners: " + listeners + " compoundEdit: " + compoundEdit;
+    return (super.toString() + " realSource: " + realSource
+	    + " updateLevel: " + updateLevel);
   }
 
-
   /**
-   * Registers a listener.
-   *
-   * @param val the listener to be added.
+   * Add a listener.
+   * @param val the listener
    */
   public synchronized void addUndoableEditListener(UndoableEditListener val)
   {
     listeners.add(val);
   }
 
-
   /**
-   * Unregisters a listener.
-   * @param val the listener to be removed.
+   * Remove a listener.
+   * @param val the listener
    */
   public synchronized void removeUndoableEditListener(UndoableEditListener val)
   {
     listeners.removeElement(val);
   }
 
-
   /**
-   * Returns an array containing the currently registered listeners.
+   * Return an array of all listeners.
+   * @returns all the listeners
    */
   public synchronized UndoableEditListener[] getUndoableEditListeners()
   {
@@ -151,121 +137,78 @@
     return (UndoableEditListener[]) listeners.toArray(result);
   }
 
-
   /**
-   * Notifies all registered listeners that an {@link
-   * UndoableEditEvent} has occured.
-   *
-   * <p><b>Lack of Thread Safety:</b> It is <em>not</em> safe to call
-   * this method from concurrent threads, unless the call is protected
-   * by a synchronization on this <code>UndoableEditSupport</code>
-   * instance.
-   *
-   * @param edit the edit action to be posted.
+   * _postEdit
+   * @param value0 TODO
    */
   protected void _postEdit(UndoableEdit edit)
   {
-    UndoableEditEvent event;
-    Iterator iter;
-
-    // Do nothing if we have no listeners.
-    if (listeners.isEmpty())
-      return;
-
-    event = new UndoableEditEvent(realSource, edit);
-
-    // We clone the vector because this allows listeners to register
-    // or unregister listeners in their undoableEditHappened method.
-    // Otherwise, this would throw exceptions (in the case of
-    // Iterator, a java.util.ConcurrentModificationException; in the
-    // case of a direct loop over the Vector elements, some
-    // index-out-of-bounds exception).
-    iter = ((Vector) listeners.clone()).iterator();
-    while (iter.hasNext())
-      ((UndoableEditListener) iter.next()).undoableEditHappened(event);
+    UndoableEditEvent event = new UndoableEditEvent(realSource, edit);
+    int max = listeners.size();
+    for (int i = 0; i < max; ++i)
+      {
+	UndoableEditListener l
+	  = (UndoableEditListener) (listeners.elementAt(i));
+	l.undoableEditHappened(event);
+      }
   }
 
-
   /**
-   * If {@link #beginEdit} has been called (so that the current
-   * update level is greater than zero), adds the specified edit
-   * to {@link #compoundEdit}. Otherwise, notify listeners of the
-   * edit by calling {@link #_postEdit(UndoableEdit)}.
-   *
-   * <p><b>Thread Safety:</b> It is safe to call this method from any
-   * thread without external synchronization.
-   *
-   * @param edit the edit action to be posted.
+   * postEdit
+   * @param value0 TODO
    */
   public synchronized void postEdit(UndoableEdit edit)
   {
-    if (compoundEdit != null)
+    if (compoundEdit == null)
       compoundEdit.addEdit(edit);
     else
       _postEdit(edit);
   }
 
-
   /**
-   * Returns the current update level.
+   * getUpdateLevel
+   * @returns int
    */
   public int getUpdateLevel()
   {
     return updateLevel;
   }
 
-
   /**
-   * Starts a (possibly nested) update session. If the current update
-   * level is zero, {@link #compoundEdit} is set to the result of the
-   * {@link #createCompoundEdit} method. In any case, the update level
-   * is increased by one.
-   *
-   * <p><b>Thread Safety:</b> It is safe to call this method from any
-   * thread without external synchronization.
+   * beginUpdate
    */
   public synchronized void beginUpdate()
   {
-    if (compoundEdit == null)
-      compoundEdit = createCompoundEdit();
+    if (compoundEdit != null)
+      {
+	// FIXME: what?  We can't push a new one.  This isn't even
+	// documented anyway.
+	endUpdate();
+      }
+
+    compoundEdit = createCompoundEdit();
     ++updateLevel;
   }
 
-
   /**
-   * Creates a new instance of {@link #CompoundEdit}. Called by {@link
-   * #beginUpdate}. If a subclass wants {@link #beginUpdate} to work
-   * on a specific {@link #compoundEdit}, it should override this
-   * method.
-   *
-   * @returns a newly created instance of {@link #CompoundEdit}.
+   * createCompoundEdit
+   * @returns CompoundEdit
    */
   protected CompoundEdit createCompoundEdit()
   {
     return new CompoundEdit();
   }
 
-
   /**
-   * Ends an update session. If the terminated session was the
-   * outermost session, {@link #compoundEdit} will receive an
-   * <code>end</code> message, and {@link #_postEdit} gets called in
-   * order to notify any listeners. Finally, the
-   * <code>compoundEdit</code> is discarded.
-   *
-   * <p><b>Thread Safety:</b> It is safe to call this method from any
-   * thread without external synchronization.
+   * endUpdate
    */
   public synchronized void endUpdate()
   {
-    if (updateLevel == 0)
-      throw new IllegalStateException();
-
-    if (--updateLevel > 0)
-      return;
-
+    // FIXME: assert updateLevel == 1;
     compoundEdit.end();
-    _postEdit(compoundEdit);
+    CompoundEdit c = compoundEdit;
     compoundEdit = null;
+    --updateLevel;
+    _postEdit(c);
   }
 }
