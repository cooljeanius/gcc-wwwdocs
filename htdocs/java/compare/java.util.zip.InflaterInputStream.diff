--- /home/tromey/gnu/Nightly/classpath/classpath/java/util/zip/InflaterInputStream.java	2004-06-21 06:24:02.000000000 -0600
+++ java/util/zip/InflaterInputStream.java	2004-07-10 02:19:15.000000000 -0600
@@ -70,10 +70,6 @@
    */
   protected int len;
 
-  /*
-   * We just use this if we are decoding one byte at a time with the read() call
-   */
-  private byte[] onebytebuffer = new byte[1];
 
   /**
    * Create an InflaterInputStream with the default decompresseor
@@ -83,7 +79,7 @@
    */
   public InflaterInputStream(InputStream in) 
   {
-    this(in, new Inflater(), 4096);
+    this(in, new Inflater(), 512);
   }
 
   /**
@@ -95,7 +91,7 @@
    */
   public InflaterInputStream(InputStream in, Inflater inf) 
   {
-    this(in, inf, 4096);
+    this(in, inf, 512);
   }
 
   /**
@@ -139,9 +135,8 @@
    */
   public synchronized void close() throws IOException
   {
-    if (in != null)
-      in.close();
-    in = null;
+    inf = null;
+    super.close();
   }
 
   /**
@@ -154,25 +149,8 @@
     
     len = in.read(buf, 0, buf.length);
 
-    if (len < 0)
-      throw new ZipException("Deflated stream ends early.");
-    
-    inf.setInput(buf, 0, len);
-  }
-
-  /**
-   * Reads one byte of decompressed data.
-   *
-   * The byte is in the lower 8 bits of the int.
-   */
-  public int read() throws IOException
-  { 
-    int nread = read(onebytebuffer, 0, 1); //read one byte
-    
-    if (nread > 0)
-      return onebytebuffer[0] & 0xff;
-    
-    return -1;
+    if (len != -1)
+      inf.setInput(buf, 0, len);
   }
 
   /**
@@ -188,31 +166,35 @@
       throw new IOException("stream closed");
     if (len == 0)
       return 0;
+    if (inf.finished())
+      return -1;
 
     int count = 0;
-    for (;;)
+    while (count == 0)
       {
+	if (inf.needsInput())
+	  fill();
 	
 	try
 	  {
 	    count = inf.inflate(b, off, len);
+	    if (count == 0)
+	      {
+		if (this.len == -1)
+		  {
+		    // Couldn't get any more data to feed to the Inflater
+		    return -1;
+		  }
+		if (inf.needsDictionary())
+		  throw new ZipException("Inflater needs Dictionary");
+	      }
 	  } 
 	catch (DataFormatException dfe) 
 	  {
 	    throw new ZipException(dfe.getMessage());
 	  }
-
-	if (count > 0)
-	  return count;
-	
-	if (inf.needsDictionary()
-	    | inf.finished())
-	  return -1;
-	else if (inf.needsInput())
-	  fill();
-	else
-	  throw new InternalError("Don't know what to do");
       }
+    return count;
   }
 
   /**
@@ -230,18 +212,18 @@
     if (n == 0)
       return 0;
 
-    int buflen = (int) Math.min(n, 2048);
+    int buflen = (int) Math.min(n, 1024);
     byte[] tmpbuf = new byte[buflen];
 
     long skipped = 0L;
     while (n > 0L)
       {
 	int numread = read(tmpbuf, 0, buflen);
-	if (numread <= 0)
+	if (numread == -1)
 	  break;
 	n -= numread;
 	skipped += numread;
-	buflen = (int) Math.min(n, 2048);
+	buflen = (int) Math.min(n, 1024);
       }
 
     return skipped;
