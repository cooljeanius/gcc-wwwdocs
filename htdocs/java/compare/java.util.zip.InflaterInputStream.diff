--- /home/tromey/gnu/Nightly/classpath/classpath/java/util/zip/InflaterInputStream.java	2004-06-21 06:24:02.000000000 -0600
+++ java/util/zip/InflaterInputStream.java	2004-06-08 02:19:57.000000000 -0600
@@ -70,10 +70,12 @@
    */
   protected int len;
 
-  /*
-   * We just use this if we are decoding one byte at a time with the read() call
-   */
-  private byte[] onebytebuffer = new byte[1];
+  protected void fill () throws IOException
+  {
+    len = in.read(buf, 0, buf.length);
+    if (len != -1)
+      inf.setInput(buf, 0, len);
+  }
 
   /**
    * Create an InflaterInputStream with the default decompresseor
@@ -83,7 +85,7 @@
    */
   public InflaterInputStream(InputStream in) 
   {
-    this(in, new Inflater(), 4096);
+    this (in, new Inflater (), 512);
   }
 
   /**
@@ -95,7 +97,7 @@
    */
   public InflaterInputStream(InputStream in, Inflater inf) 
   {
-    this(in, inf, 4096);
+    this (in, inf, 512);
   }
 
   /**
@@ -111,69 +113,25 @@
     super(in);
 
     if (in == null)
-      throw new NullPointerException("in may not be null");
+      throw new NullPointerException ("in may not be null");
     if (inf == null)
-      throw new NullPointerException("inf may not be null");
+      throw new NullPointerException ("inf may not be null");
     if (size < 0)
-      throw new IllegalArgumentException("size may not be negative");
+      throw new IllegalArgumentException ("size may not be negative");
     
     this.inf = inf;
     this.buf = new byte [size];
   }
 
-  /**
-   * Returns 0 once the end of the stream (EOF) has been reached.
-   * Otherwise returns 1.
-   */
-  public int available() throws IOException
+  public int read () throws IOException
   {
-    // According to the JDK 1.2 docs, this should only ever return 0
-    // or 1 and should not be relied upon by Java programs.
-    if (inf == null)
-      throw new IOException("stream closed");
-    return inf.finished() ? 0 : 1;
+    byte[] buf = new byte[1];
+    int r = read (buf, 0, 1);
+    if (r != -1)
+      r = buf[0] & 0xff;
+    return r;
   }
 
-  /**
-   * Closes the input stream
-   */
-  public synchronized void close() throws IOException
-  {
-    if (in != null)
-      in.close();
-    in = null;
-  }
-
-  /**
-   * Fills the buffer with more data to decompress.
-   */
-  protected void fill() throws IOException
-  {
-    if (in == null)
-      throw new ZipException ("InflaterInputStream is closed");
-    
-    len = in.read(buf, 0, buf.length);
-
-    if (len < 0)
-      throw new ZipException("Deflated stream ends early.");
-    
-    inf.setInput(buf, 0, len);
-  }
-
-  /**
-   * Reads one byte of decompressed data.
-   *
-   * The byte is in the lower 8 bits of the int.
-   */
-  public int read() throws IOException
-  { 
-    int nread = read(onebytebuffer, 0, 1); //read one byte
-    
-    if (nread > 0)
-      return onebytebuffer[0] & 0xff;
-    
-    return -1;
-  }
 
   /**
    * Decompresses data into the byte array
@@ -185,34 +143,53 @@
   public int read(byte[] b, int off, int len) throws IOException
   {
     if (inf == null)
-      throw new IOException("stream closed");
+      throw new IOException ("stream closed");
     if (len == 0)
       return 0;
+    if (inf.finished())
+      return -1;
 
     int count = 0;
-    for (;;)
+    while (count == 0)
       {
+	if (inf.needsInput())
+	  fill ();
 	
 	try
 	  {
 	    count = inf.inflate(b, off, len);
+	    if (count == 0)
+	      {
+		if (this.len == -1)
+		  {
+		    // Couldn't get any more data to feed to the Inflater
+		    return -1;
+		  }
+		if (inf.needsDictionary())
+		  throw new ZipException ("Inflater needs Dictionary");
+	      }
 	  } 
 	catch (DataFormatException dfe) 
 	  {
 	    throw new ZipException(dfe.getMessage());
 	  }
-
-	if (count > 0)
-	  return count;
-	
-	if (inf.needsDictionary()
-	    | inf.finished())
-	  return -1;
-	else if (inf.needsInput())
-	  fill();
-	else
-	  throw new InternalError("Don't know what to do");
       }
+    return count;
+  }
+
+  public void close () throws IOException
+  {
+    inf = null;
+    super.close ();
+  }
+
+  public int available () throws IOException
+  {
+    // According to the JDK 1.2 docs, this should only ever return 0
+    // or 1 and should not be relied upon by Java programs.
+    if (inf == null)
+      throw new IOException ("stream closed");
+    return inf.finished () ? 0 : 1;
   }
 
   /**
@@ -223,27 +200,25 @@
   public long skip(long n) throws IOException
   {
     if (inf == null)
-      throw new IOException("stream closed");
-    if (n < 0)
-      throw new IllegalArgumentException();
+      throw new IOException ("stream closed");
 
     if (n == 0)
       return 0;
 
-    int buflen = (int) Math.min(n, 2048);
-    byte[] tmpbuf = new byte[buflen];
+    int min = (int) Math.min(n, 1024);
+    byte[] buf = new byte[min];
 
-    long skipped = 0L;
-    while (n > 0L)
+    long s = 0;
+    while (n > 0)
       {
-	int numread = read(tmpbuf, 0, buflen);
-	if (numread <= 0)
+	int r = read (buf, 0, min);
+	if (r == -1)
 	  break;
-	n -= numread;
-	skipped += numread;
-	buflen = (int) Math.min(n, 2048);
+	n -= r;
+	s += r;
+	min = (int) Math.min(n, 1024);
       }
 
-    return skipped;
+    return s;
  }
 }
