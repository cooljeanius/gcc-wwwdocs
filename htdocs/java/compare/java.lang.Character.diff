--- /home/tromey/gnu/Nightly/classpath/classpath/java/lang/Character.java	2004-10-28 02:27:34.000000000 -0600
+++ java/lang/Character.java	2002-12-10 19:20:25.000000000 -0700
@@ -35,11 +35,18 @@
 obligated to do so.  If you do not wish to do so, delete this
 exception statement from your version. */
 
+/*
+ * Note: This class must not be merged with Classpath.  Gcj uses C-style
+ * arrays (see include/java-chartables.h) to store the Unicode character
+ * database, whereas Classpath uses Java objects (char[] extracted from
+ * String constants) in gnu.java.lang.CharData.  Gcj's approach is more
+ * efficient, because there is no vtable or data relocation to worry about.
+ * However, despite the difference in the database interface, the two
+ * versions share identical algorithms.
+ */
 
 package java.lang;
 
-import gnu.java.lang.CharData;
-
 import java.io.Serializable;
 
 /**
@@ -59,11 +66,10 @@
  * <p>See <a href="http://www.unicode.org">http://www.unicode.org</a>
  * for more information on the Unicode Standard.
  *
- * @author Tom Tromey (tromey@cygnus.com)
+ * @author Tom Tromey <tromey@cygnus.com>
  * @author Paul N. Fisher
  * @author Jochen Hoenicke
- * @author Eric Blake (ebb9@email.byu.edu)
- * @see CharData
+ * @author Eric Blake <ebb9@email.byu.edu>
  * @since 1.0
  * @status updated to 1.4
  */
@@ -73,7 +79,7 @@
    * A subset of Unicode blocks.
    *
    * @author Paul N. Fisher
-   * @author Eric Blake (ebb9@email.byu.edu)
+   * @author Eric Blake <ebb9@email.byu.edu>
    * @since 1.2
    */
   public static class Subset
@@ -133,7 +139,7 @@
    * is in at most one of these blocks.
    *
    * This inner class was generated automatically from
-   * <code>doc/unicode/Block-3.txt</code>, by some perl scripts.
+   * <code>libjava/gnu/gcj/convert/Blocks-3.txt</code>, by some perl scripts.
    * This Unicode definition file can be found on the
    * <a href="http://www.unicode.org">http://www.unicode.org</a> website.
    * JDK 1.4 uses Unicode version 3.0.0.
@@ -195,7 +201,7 @@
      * Basic Latin.
      * '\u0000' - '\u007F'.
      */
-    public static final UnicodeBlock BASIC_LATIN
+    public final static UnicodeBlock BASIC_LATIN
       = new UnicodeBlock('\u0000', '\u007F',
                          "BASIC_LATIN");
 
@@ -203,7 +209,7 @@
      * Latin-1 Supplement.
      * '\u0080' - '\u00FF'.
      */
-    public static final UnicodeBlock LATIN_1_SUPPLEMENT
+    public final static UnicodeBlock LATIN_1_SUPPLEMENT
       = new UnicodeBlock('\u0080', '\u00FF',
                          "LATIN_1_SUPPLEMENT");
 
@@ -211,7 +217,7 @@
      * Latin Extended-A.
      * '\u0100' - '\u017F'.
      */
-    public static final UnicodeBlock LATIN_EXTENDED_A
+    public final static UnicodeBlock LATIN_EXTENDED_A
       = new UnicodeBlock('\u0100', '\u017F',
                          "LATIN_EXTENDED_A");
 
@@ -219,7 +225,7 @@
      * Latin Extended-B.
      * '\u0180' - '\u024F'.
      */
-    public static final UnicodeBlock LATIN_EXTENDED_B
+    public final static UnicodeBlock LATIN_EXTENDED_B
       = new UnicodeBlock('\u0180', '\u024F',
                          "LATIN_EXTENDED_B");
 
@@ -227,7 +233,7 @@
      * IPA Extensions.
      * '\u0250' - '\u02AF'.
      */
-    public static final UnicodeBlock IPA_EXTENSIONS
+    public final static UnicodeBlock IPA_EXTENSIONS
       = new UnicodeBlock('\u0250', '\u02AF',
                          "IPA_EXTENSIONS");
 
@@ -235,7 +241,7 @@
      * Spacing Modifier Letters.
      * '\u02B0' - '\u02FF'.
      */
-    public static final UnicodeBlock SPACING_MODIFIER_LETTERS
+    public final static UnicodeBlock SPACING_MODIFIER_LETTERS
       = new UnicodeBlock('\u02B0', '\u02FF',
                          "SPACING_MODIFIER_LETTERS");
 
@@ -243,7 +249,7 @@
      * Combining Diacritical Marks.
      * '\u0300' - '\u036F'.
      */
-    public static final UnicodeBlock COMBINING_DIACRITICAL_MARKS
+    public final static UnicodeBlock COMBINING_DIACRITICAL_MARKS
       = new UnicodeBlock('\u0300', '\u036F',
                          "COMBINING_DIACRITICAL_MARKS");
 
@@ -251,7 +257,7 @@
      * Greek.
      * '\u0370' - '\u03FF'.
      */
-    public static final UnicodeBlock GREEK
+    public final static UnicodeBlock GREEK
       = new UnicodeBlock('\u0370', '\u03FF',
                          "GREEK");
 
@@ -259,7 +265,7 @@
      * Cyrillic.
      * '\u0400' - '\u04FF'.
      */
-    public static final UnicodeBlock CYRILLIC
+    public final static UnicodeBlock CYRILLIC
       = new UnicodeBlock('\u0400', '\u04FF',
                          "CYRILLIC");
 
@@ -267,7 +273,7 @@
      * Armenian.
      * '\u0530' - '\u058F'.
      */
-    public static final UnicodeBlock ARMENIAN
+    public final static UnicodeBlock ARMENIAN
       = new UnicodeBlock('\u0530', '\u058F',
                          "ARMENIAN");
 
@@ -275,7 +281,7 @@
      * Hebrew.
      * '\u0590' - '\u05FF'.
      */
-    public static final UnicodeBlock HEBREW
+    public final static UnicodeBlock HEBREW
       = new UnicodeBlock('\u0590', '\u05FF',
                          "HEBREW");
 
@@ -283,7 +289,7 @@
      * Arabic.
      * '\u0600' - '\u06FF'.
      */
-    public static final UnicodeBlock ARABIC
+    public final static UnicodeBlock ARABIC
       = new UnicodeBlock('\u0600', '\u06FF',
                          "ARABIC");
 
@@ -292,7 +298,7 @@
      * '\u0700' - '\u074F'.
      * @since 1.4
      */
-    public static final UnicodeBlock SYRIAC
+    public final static UnicodeBlock SYRIAC
       = new UnicodeBlock('\u0700', '\u074F',
                          "SYRIAC");
 
@@ -301,7 +307,7 @@
      * '\u0780' - '\u07BF'.
      * @since 1.4
      */
-    public static final UnicodeBlock THAANA
+    public final static UnicodeBlock THAANA
       = new UnicodeBlock('\u0780', '\u07BF',
                          "THAANA");
 
@@ -309,7 +315,7 @@
      * Devanagari.
      * '\u0900' - '\u097F'.
      */
-    public static final UnicodeBlock DEVANAGARI
+    public final static UnicodeBlock DEVANAGARI
       = new UnicodeBlock('\u0900', '\u097F',
                          "DEVANAGARI");
 
@@ -317,7 +323,7 @@
      * Bengali.
      * '\u0980' - '\u09FF'.
      */
-    public static final UnicodeBlock BENGALI
+    public final static UnicodeBlock BENGALI
       = new UnicodeBlock('\u0980', '\u09FF',
                          "BENGALI");
 
@@ -325,7 +331,7 @@
      * Gurmukhi.
      * '\u0A00' - '\u0A7F'.
      */
-    public static final UnicodeBlock GURMUKHI
+    public final static UnicodeBlock GURMUKHI
       = new UnicodeBlock('\u0A00', '\u0A7F',
                          "GURMUKHI");
 
@@ -333,7 +339,7 @@
      * Gujarati.
      * '\u0A80' - '\u0AFF'.
      */
-    public static final UnicodeBlock GUJARATI
+    public final static UnicodeBlock GUJARATI
       = new UnicodeBlock('\u0A80', '\u0AFF',
                          "GUJARATI");
 
@@ -341,7 +347,7 @@
      * Oriya.
      * '\u0B00' - '\u0B7F'.
      */
-    public static final UnicodeBlock ORIYA
+    public final static UnicodeBlock ORIYA
       = new UnicodeBlock('\u0B00', '\u0B7F',
                          "ORIYA");
 
@@ -349,7 +355,7 @@
      * Tamil.
      * '\u0B80' - '\u0BFF'.
      */
-    public static final UnicodeBlock TAMIL
+    public final static UnicodeBlock TAMIL
       = new UnicodeBlock('\u0B80', '\u0BFF',
                          "TAMIL");
 
@@ -357,7 +363,7 @@
      * Telugu.
      * '\u0C00' - '\u0C7F'.
      */
-    public static final UnicodeBlock TELUGU
+    public final static UnicodeBlock TELUGU
       = new UnicodeBlock('\u0C00', '\u0C7F',
                          "TELUGU");
 
@@ -365,7 +371,7 @@
      * Kannada.
      * '\u0C80' - '\u0CFF'.
      */
-    public static final UnicodeBlock KANNADA
+    public final static UnicodeBlock KANNADA
       = new UnicodeBlock('\u0C80', '\u0CFF',
                          "KANNADA");
 
@@ -373,7 +379,7 @@
      * Malayalam.
      * '\u0D00' - '\u0D7F'.
      */
-    public static final UnicodeBlock MALAYALAM
+    public final static UnicodeBlock MALAYALAM
       = new UnicodeBlock('\u0D00', '\u0D7F',
                          "MALAYALAM");
 
@@ -382,7 +388,7 @@
      * '\u0D80' - '\u0DFF'.
      * @since 1.4
      */
-    public static final UnicodeBlock SINHALA
+    public final static UnicodeBlock SINHALA
       = new UnicodeBlock('\u0D80', '\u0DFF',
                          "SINHALA");
 
@@ -390,7 +396,7 @@
      * Thai.
      * '\u0E00' - '\u0E7F'.
      */
-    public static final UnicodeBlock THAI
+    public final static UnicodeBlock THAI
       = new UnicodeBlock('\u0E00', '\u0E7F',
                          "THAI");
 
@@ -398,7 +404,7 @@
      * Lao.
      * '\u0E80' - '\u0EFF'.
      */
-    public static final UnicodeBlock LAO
+    public final static UnicodeBlock LAO
       = new UnicodeBlock('\u0E80', '\u0EFF',
                          "LAO");
 
@@ -406,7 +412,7 @@
      * Tibetan.
      * '\u0F00' - '\u0FFF'.
      */
-    public static final UnicodeBlock TIBETAN
+    public final static UnicodeBlock TIBETAN
       = new UnicodeBlock('\u0F00', '\u0FFF',
                          "TIBETAN");
 
@@ -415,7 +421,7 @@
      * '\u1000' - '\u109F'.
      * @since 1.4
      */
-    public static final UnicodeBlock MYANMAR
+    public final static UnicodeBlock MYANMAR
       = new UnicodeBlock('\u1000', '\u109F',
                          "MYANMAR");
 
@@ -423,7 +429,7 @@
      * Georgian.
      * '\u10A0' - '\u10FF'.
      */
-    public static final UnicodeBlock GEORGIAN
+    public final static UnicodeBlock GEORGIAN
       = new UnicodeBlock('\u10A0', '\u10FF',
                          "GEORGIAN");
 
@@ -431,7 +437,7 @@
      * Hangul Jamo.
      * '\u1100' - '\u11FF'.
      */
-    public static final UnicodeBlock HANGUL_JAMO
+    public final static UnicodeBlock HANGUL_JAMO
       = new UnicodeBlock('\u1100', '\u11FF',
                          "HANGUL_JAMO");
 
@@ -440,7 +446,7 @@
      * '\u1200' - '\u137F'.
      * @since 1.4
      */
-    public static final UnicodeBlock ETHIOPIC
+    public final static UnicodeBlock ETHIOPIC
       = new UnicodeBlock('\u1200', '\u137F',
                          "ETHIOPIC");
 
@@ -449,7 +455,7 @@
      * '\u13A0' - '\u13FF'.
      * @since 1.4
      */
-    public static final UnicodeBlock CHEROKEE
+    public final static UnicodeBlock CHEROKEE
       = new UnicodeBlock('\u13A0', '\u13FF',
                          "CHEROKEE");
 
@@ -458,7 +464,7 @@
      * '\u1400' - '\u167F'.
      * @since 1.4
      */
-    public static final UnicodeBlock UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS
+    public final static UnicodeBlock UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS
       = new UnicodeBlock('\u1400', '\u167F',
                          "UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS");
 
@@ -467,7 +473,7 @@
      * '\u1680' - '\u169F'.
      * @since 1.4
      */
-    public static final UnicodeBlock OGHAM
+    public final static UnicodeBlock OGHAM
       = new UnicodeBlock('\u1680', '\u169F',
                          "OGHAM");
 
@@ -476,7 +482,7 @@
      * '\u16A0' - '\u16FF'.
      * @since 1.4
      */
-    public static final UnicodeBlock RUNIC
+    public final static UnicodeBlock RUNIC
       = new UnicodeBlock('\u16A0', '\u16FF',
                          "RUNIC");
 
@@ -485,7 +491,7 @@
      * '\u1780' - '\u17FF'.
      * @since 1.4
      */
-    public static final UnicodeBlock KHMER
+    public final static UnicodeBlock KHMER
       = new UnicodeBlock('\u1780', '\u17FF',
                          "KHMER");
 
@@ -494,7 +500,7 @@
      * '\u1800' - '\u18AF'.
      * @since 1.4
      */
-    public static final UnicodeBlock MONGOLIAN
+    public final static UnicodeBlock MONGOLIAN
       = new UnicodeBlock('\u1800', '\u18AF',
                          "MONGOLIAN");
 
@@ -502,7 +508,7 @@
      * Latin Extended Additional.
      * '\u1E00' - '\u1EFF'.
      */
-    public static final UnicodeBlock LATIN_EXTENDED_ADDITIONAL
+    public final static UnicodeBlock LATIN_EXTENDED_ADDITIONAL
       = new UnicodeBlock('\u1E00', '\u1EFF',
                          "LATIN_EXTENDED_ADDITIONAL");
 
@@ -510,7 +516,7 @@
      * Greek Extended.
      * '\u1F00' - '\u1FFF'.
      */
-    public static final UnicodeBlock GREEK_EXTENDED
+    public final static UnicodeBlock GREEK_EXTENDED
       = new UnicodeBlock('\u1F00', '\u1FFF',
                          "GREEK_EXTENDED");
 
@@ -518,7 +524,7 @@
      * General Punctuation.
      * '\u2000' - '\u206F'.
      */
-    public static final UnicodeBlock GENERAL_PUNCTUATION
+    public final static UnicodeBlock GENERAL_PUNCTUATION
       = new UnicodeBlock('\u2000', '\u206F',
                          "GENERAL_PUNCTUATION");
 
@@ -526,7 +532,7 @@
      * Superscripts and Subscripts.
      * '\u2070' - '\u209F'.
      */
-    public static final UnicodeBlock SUPERSCRIPTS_AND_SUBSCRIPTS
+    public final static UnicodeBlock SUPERSCRIPTS_AND_SUBSCRIPTS
       = new UnicodeBlock('\u2070', '\u209F',
                          "SUPERSCRIPTS_AND_SUBSCRIPTS");
 
@@ -534,7 +540,7 @@
      * Currency Symbols.
      * '\u20A0' - '\u20CF'.
      */
-    public static final UnicodeBlock CURRENCY_SYMBOLS
+    public final static UnicodeBlock CURRENCY_SYMBOLS
       = new UnicodeBlock('\u20A0', '\u20CF',
                          "CURRENCY_SYMBOLS");
 
@@ -542,7 +548,7 @@
      * Combining Marks for Symbols.
      * '\u20D0' - '\u20FF'.
      */
-    public static final UnicodeBlock COMBINING_MARKS_FOR_SYMBOLS
+    public final static UnicodeBlock COMBINING_MARKS_FOR_SYMBOLS
       = new UnicodeBlock('\u20D0', '\u20FF',
                          "COMBINING_MARKS_FOR_SYMBOLS");
 
@@ -550,7 +556,7 @@
      * Letterlike Symbols.
      * '\u2100' - '\u214F'.
      */
-    public static final UnicodeBlock LETTERLIKE_SYMBOLS
+    public final static UnicodeBlock LETTERLIKE_SYMBOLS
       = new UnicodeBlock('\u2100', '\u214F',
                          "LETTERLIKE_SYMBOLS");
 
@@ -558,7 +564,7 @@
      * Number Forms.
      * '\u2150' - '\u218F'.
      */
-    public static final UnicodeBlock NUMBER_FORMS
+    public final static UnicodeBlock NUMBER_FORMS
       = new UnicodeBlock('\u2150', '\u218F',
                          "NUMBER_FORMS");
 
@@ -566,7 +572,7 @@
      * Arrows.
      * '\u2190' - '\u21FF'.
      */
-    public static final UnicodeBlock ARROWS
+    public final static UnicodeBlock ARROWS
       = new UnicodeBlock('\u2190', '\u21FF',
                          "ARROWS");
 
@@ -574,7 +580,7 @@
      * Mathematical Operators.
      * '\u2200' - '\u22FF'.
      */
-    public static final UnicodeBlock MATHEMATICAL_OPERATORS
+    public final static UnicodeBlock MATHEMATICAL_OPERATORS
       = new UnicodeBlock('\u2200', '\u22FF',
                          "MATHEMATICAL_OPERATORS");
 
@@ -582,7 +588,7 @@
      * Miscellaneous Technical.
      * '\u2300' - '\u23FF'.
      */
-    public static final UnicodeBlock MISCELLANEOUS_TECHNICAL
+    public final static UnicodeBlock MISCELLANEOUS_TECHNICAL
       = new UnicodeBlock('\u2300', '\u23FF',
                          "MISCELLANEOUS_TECHNICAL");
 
@@ -590,7 +596,7 @@
      * Control Pictures.
      * '\u2400' - '\u243F'.
      */
-    public static final UnicodeBlock CONTROL_PICTURES
+    public final static UnicodeBlock CONTROL_PICTURES
       = new UnicodeBlock('\u2400', '\u243F',
                          "CONTROL_PICTURES");
 
@@ -598,7 +604,7 @@
      * Optical Character Recognition.
      * '\u2440' - '\u245F'.
      */
-    public static final UnicodeBlock OPTICAL_CHARACTER_RECOGNITION
+    public final static UnicodeBlock OPTICAL_CHARACTER_RECOGNITION
       = new UnicodeBlock('\u2440', '\u245F',
                          "OPTICAL_CHARACTER_RECOGNITION");
 
@@ -606,7 +612,7 @@
      * Enclosed Alphanumerics.
      * '\u2460' - '\u24FF'.
      */
-    public static final UnicodeBlock ENCLOSED_ALPHANUMERICS
+    public final static UnicodeBlock ENCLOSED_ALPHANUMERICS
       = new UnicodeBlock('\u2460', '\u24FF',
                          "ENCLOSED_ALPHANUMERICS");
 
@@ -614,7 +620,7 @@
      * Box Drawing.
      * '\u2500' - '\u257F'.
      */
-    public static final UnicodeBlock BOX_DRAWING
+    public final static UnicodeBlock BOX_DRAWING
       = new UnicodeBlock('\u2500', '\u257F',
                          "BOX_DRAWING");
 
@@ -622,7 +628,7 @@
      * Block Elements.
      * '\u2580' - '\u259F'.
      */
-    public static final UnicodeBlock BLOCK_ELEMENTS
+    public final static UnicodeBlock BLOCK_ELEMENTS
       = new UnicodeBlock('\u2580', '\u259F',
                          "BLOCK_ELEMENTS");
 
@@ -630,7 +636,7 @@
      * Geometric Shapes.
      * '\u25A0' - '\u25FF'.
      */
-    public static final UnicodeBlock GEOMETRIC_SHAPES
+    public final static UnicodeBlock GEOMETRIC_SHAPES
       = new UnicodeBlock('\u25A0', '\u25FF',
                          "GEOMETRIC_SHAPES");
 
@@ -638,7 +644,7 @@
      * Miscellaneous Symbols.
      * '\u2600' - '\u26FF'.
      */
-    public static final UnicodeBlock MISCELLANEOUS_SYMBOLS
+    public final static UnicodeBlock MISCELLANEOUS_SYMBOLS
       = new UnicodeBlock('\u2600', '\u26FF',
                          "MISCELLANEOUS_SYMBOLS");
 
@@ -646,7 +652,7 @@
      * Dingbats.
      * '\u2700' - '\u27BF'.
      */
-    public static final UnicodeBlock DINGBATS
+    public final static UnicodeBlock DINGBATS
       = new UnicodeBlock('\u2700', '\u27BF',
                          "DINGBATS");
 
@@ -655,7 +661,7 @@
      * '\u2800' - '\u28FF'.
      * @since 1.4
      */
-    public static final UnicodeBlock BRAILLE_PATTERNS
+    public final static UnicodeBlock BRAILLE_PATTERNS
       = new UnicodeBlock('\u2800', '\u28FF',
                          "BRAILLE_PATTERNS");
 
@@ -664,7 +670,7 @@
      * '\u2E80' - '\u2EFF'.
      * @since 1.4
      */
-    public static final UnicodeBlock CJK_RADICALS_SUPPLEMENT
+    public final static UnicodeBlock CJK_RADICALS_SUPPLEMENT
       = new UnicodeBlock('\u2E80', '\u2EFF',
                          "CJK_RADICALS_SUPPLEMENT");
 
@@ -673,7 +679,7 @@
      * '\u2F00' - '\u2FDF'.
      * @since 1.4
      */
-    public static final UnicodeBlock KANGXI_RADICALS
+    public final static UnicodeBlock KANGXI_RADICALS
       = new UnicodeBlock('\u2F00', '\u2FDF',
                          "KANGXI_RADICALS");
 
@@ -682,7 +688,7 @@
      * '\u2FF0' - '\u2FFF'.
      * @since 1.4
      */
-    public static final UnicodeBlock IDEOGRAPHIC_DESCRIPTION_CHARACTERS
+    public final static UnicodeBlock IDEOGRAPHIC_DESCRIPTION_CHARACTERS
       = new UnicodeBlock('\u2FF0', '\u2FFF',
                          "IDEOGRAPHIC_DESCRIPTION_CHARACTERS");
 
@@ -690,7 +696,7 @@
      * CJK Symbols and Punctuation.
      * '\u3000' - '\u303F'.
      */
-    public static final UnicodeBlock CJK_SYMBOLS_AND_PUNCTUATION
+    public final static UnicodeBlock CJK_SYMBOLS_AND_PUNCTUATION
       = new UnicodeBlock('\u3000', '\u303F',
                          "CJK_SYMBOLS_AND_PUNCTUATION");
 
@@ -698,7 +704,7 @@
      * Hiragana.
      * '\u3040' - '\u309F'.
      */
-    public static final UnicodeBlock HIRAGANA
+    public final static UnicodeBlock HIRAGANA
       = new UnicodeBlock('\u3040', '\u309F',
                          "HIRAGANA");
 
@@ -706,7 +712,7 @@
      * Katakana.
      * '\u30A0' - '\u30FF'.
      */
-    public static final UnicodeBlock KATAKANA
+    public final static UnicodeBlock KATAKANA
       = new UnicodeBlock('\u30A0', '\u30FF',
                          "KATAKANA");
 
@@ -714,7 +720,7 @@
      * Bopomofo.
      * '\u3100' - '\u312F'.
      */
-    public static final UnicodeBlock BOPOMOFO
+    public final static UnicodeBlock BOPOMOFO
       = new UnicodeBlock('\u3100', '\u312F',
                          "BOPOMOFO");
 
@@ -722,7 +728,7 @@
      * Hangul Compatibility Jamo.
      * '\u3130' - '\u318F'.
      */
-    public static final UnicodeBlock HANGUL_COMPATIBILITY_JAMO
+    public final static UnicodeBlock HANGUL_COMPATIBILITY_JAMO
       = new UnicodeBlock('\u3130', '\u318F',
                          "HANGUL_COMPATIBILITY_JAMO");
 
@@ -730,7 +736,7 @@
      * Kanbun.
      * '\u3190' - '\u319F'.
      */
-    public static final UnicodeBlock KANBUN
+    public final static UnicodeBlock KANBUN
       = new UnicodeBlock('\u3190', '\u319F',
                          "KANBUN");
 
@@ -739,7 +745,7 @@
      * '\u31A0' - '\u31BF'.
      * @since 1.4
      */
-    public static final UnicodeBlock BOPOMOFO_EXTENDED
+    public final static UnicodeBlock BOPOMOFO_EXTENDED
       = new UnicodeBlock('\u31A0', '\u31BF',
                          "BOPOMOFO_EXTENDED");
 
@@ -747,7 +753,7 @@
      * Enclosed CJK Letters and Months.
      * '\u3200' - '\u32FF'.
      */
-    public static final UnicodeBlock ENCLOSED_CJK_LETTERS_AND_MONTHS
+    public final static UnicodeBlock ENCLOSED_CJK_LETTERS_AND_MONTHS
       = new UnicodeBlock('\u3200', '\u32FF',
                          "ENCLOSED_CJK_LETTERS_AND_MONTHS");
 
@@ -755,7 +761,7 @@
      * CJK Compatibility.
      * '\u3300' - '\u33FF'.
      */
-    public static final UnicodeBlock CJK_COMPATIBILITY
+    public final static UnicodeBlock CJK_COMPATIBILITY
       = new UnicodeBlock('\u3300', '\u33FF',
                          "CJK_COMPATIBILITY");
 
@@ -764,7 +770,7 @@
      * '\u3400' - '\u4DB5'.
      * @since 1.4
      */
-    public static final UnicodeBlock CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A
+    public final static UnicodeBlock CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A
       = new UnicodeBlock('\u3400', '\u4DB5',
                          "CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A");
 
@@ -772,7 +778,7 @@
      * CJK Unified Ideographs.
      * '\u4E00' - '\u9FFF'.
      */
-    public static final UnicodeBlock CJK_UNIFIED_IDEOGRAPHS
+    public final static UnicodeBlock CJK_UNIFIED_IDEOGRAPHS
       = new UnicodeBlock('\u4E00', '\u9FFF',
                          "CJK_UNIFIED_IDEOGRAPHS");
 
@@ -781,7 +787,7 @@
      * '\uA000' - '\uA48F'.
      * @since 1.4
      */
-    public static final UnicodeBlock YI_SYLLABLES
+    public final static UnicodeBlock YI_SYLLABLES
       = new UnicodeBlock('\uA000', '\uA48F',
                          "YI_SYLLABLES");
 
@@ -790,7 +796,7 @@
      * '\uA490' - '\uA4CF'.
      * @since 1.4
      */
-    public static final UnicodeBlock YI_RADICALS
+    public final static UnicodeBlock YI_RADICALS
       = new UnicodeBlock('\uA490', '\uA4CF',
                          "YI_RADICALS");
 
@@ -798,7 +804,7 @@
      * Hangul Syllables.
      * '\uAC00' - '\uD7A3'.
      */
-    public static final UnicodeBlock HANGUL_SYLLABLES
+    public final static UnicodeBlock HANGUL_SYLLABLES
       = new UnicodeBlock('\uAC00', '\uD7A3',
                          "HANGUL_SYLLABLES");
 
@@ -806,7 +812,7 @@
      * Surrogates Area.
      * '\uD800' - '\uDFFF'.
      */
-    public static final UnicodeBlock SURROGATES_AREA
+    public final static UnicodeBlock SURROGATES_AREA
       = new UnicodeBlock('\uD800', '\uDFFF',
                          "SURROGATES_AREA");
 
@@ -814,7 +820,7 @@
      * Private Use Area.
      * '\uE000' - '\uF8FF'.
      */
-    public static final UnicodeBlock PRIVATE_USE_AREA
+    public final static UnicodeBlock PRIVATE_USE_AREA
       = new UnicodeBlock('\uE000', '\uF8FF',
                          "PRIVATE_USE_AREA");
 
@@ -822,7 +828,7 @@
      * CJK Compatibility Ideographs.
      * '\uF900' - '\uFAFF'.
      */
-    public static final UnicodeBlock CJK_COMPATIBILITY_IDEOGRAPHS
+    public final static UnicodeBlock CJK_COMPATIBILITY_IDEOGRAPHS
       = new UnicodeBlock('\uF900', '\uFAFF',
                          "CJK_COMPATIBILITY_IDEOGRAPHS");
 
@@ -830,7 +836,7 @@
      * Alphabetic Presentation Forms.
      * '\uFB00' - '\uFB4F'.
      */
-    public static final UnicodeBlock ALPHABETIC_PRESENTATION_FORMS
+    public final static UnicodeBlock ALPHABETIC_PRESENTATION_FORMS
       = new UnicodeBlock('\uFB00', '\uFB4F',
                          "ALPHABETIC_PRESENTATION_FORMS");
 
@@ -838,7 +844,7 @@
      * Arabic Presentation Forms-A.
      * '\uFB50' - '\uFDFF'.
      */
-    public static final UnicodeBlock ARABIC_PRESENTATION_FORMS_A
+    public final static UnicodeBlock ARABIC_PRESENTATION_FORMS_A
       = new UnicodeBlock('\uFB50', '\uFDFF',
                          "ARABIC_PRESENTATION_FORMS_A");
 
@@ -846,7 +852,7 @@
      * Combining Half Marks.
      * '\uFE20' - '\uFE2F'.
      */
-    public static final UnicodeBlock COMBINING_HALF_MARKS
+    public final static UnicodeBlock COMBINING_HALF_MARKS
       = new UnicodeBlock('\uFE20', '\uFE2F',
                          "COMBINING_HALF_MARKS");
 
@@ -854,7 +860,7 @@
      * CJK Compatibility Forms.
      * '\uFE30' - '\uFE4F'.
      */
-    public static final UnicodeBlock CJK_COMPATIBILITY_FORMS
+    public final static UnicodeBlock CJK_COMPATIBILITY_FORMS
       = new UnicodeBlock('\uFE30', '\uFE4F',
                          "CJK_COMPATIBILITY_FORMS");
 
@@ -862,7 +868,7 @@
      * Small Form Variants.
      * '\uFE50' - '\uFE6F'.
      */
-    public static final UnicodeBlock SMALL_FORM_VARIANTS
+    public final static UnicodeBlock SMALL_FORM_VARIANTS
       = new UnicodeBlock('\uFE50', '\uFE6F',
                          "SMALL_FORM_VARIANTS");
 
@@ -870,7 +876,7 @@
      * Arabic Presentation Forms-B.
      * '\uFE70' - '\uFEFE'.
      */
-    public static final UnicodeBlock ARABIC_PRESENTATION_FORMS_B
+    public final static UnicodeBlock ARABIC_PRESENTATION_FORMS_B
       = new UnicodeBlock('\uFE70', '\uFEFE',
                          "ARABIC_PRESENTATION_FORMS_B");
 
@@ -878,7 +884,7 @@
      * Halfwidth and Fullwidth Forms.
      * '\uFF00' - '\uFFEF'.
      */
-    public static final UnicodeBlock HALFWIDTH_AND_FULLWIDTH_FORMS
+    public final static UnicodeBlock HALFWIDTH_AND_FULLWIDTH_FORMS
       = new UnicodeBlock('\uFF00', '\uFFEF',
                          "HALFWIDTH_AND_FULLWIDTH_FORMS");
 
@@ -886,7 +892,7 @@
      * Specials.
      * '\uFEFF', '\uFFF0' - '\uFFFD'.
      */
-    public static final UnicodeBlock SPECIALS
+    public final static UnicodeBlock SPECIALS
       = new UnicodeBlock('\uFFF0', '\uFFFD',
                          "SPECIALS");
 
@@ -1385,96 +1391,39 @@
   public static final byte DIRECTIONALITY_POP_DIRECTIONAL_FORMAT = 18;
 
   /**
-   * Stores unicode block offset lookup table. Exploit package visibility of
-   * String.value to avoid copying the array.
+   * Mask for grabbing the type out of the result of readChar.
    * @see #readChar(char)
-   * @see CharData#BLOCKS
-   */
-  private static final char[] blocks = String.zeroBasedStringValue(CharData.BLOCKS);
-
-  /**
-   * Stores unicode attribute offset lookup table. Exploit package visibility
-   * of String.value to avoid copying the array.
-   * @see CharData#DATA
-   */
-  private static final char[] data = String.zeroBasedStringValue(CharData.DATA);
-
-  /**
-   * Stores unicode numeric value attribute table. Exploit package visibility
-   * of String.value to avoid copying the array.
-   * @see CharData#NUM_VALUE
-   */
-  private static final char[] numValue
-	  = String.zeroBasedStringValue(CharData.NUM_VALUE);
-
-  /**
-   * Stores unicode uppercase attribute table. Exploit package visibility
-   * of String.value to avoid copying the array.
-   * @see CharData#UPPER
-   */
-  private static final char[] upper = String.zeroBasedStringValue(CharData.UPPER);
-
-  /**
-   * Stores unicode lowercase attribute table. Exploit package visibility
-   * of String.value to avoid copying the array.
-   * @see CharData#LOWER
-   */
-  private static final char[] lower = String.zeroBasedStringValue(CharData.LOWER);
-
-  /**
-   * Stores unicode direction attribute table. Exploit package visibility
-   * of String.value to avoid copying the array.
-   * @see CharData#DIRECTION
-   */
-  // Package visible for use by String.
-  static final char[] direction = String.zeroBasedStringValue(CharData.DIRECTION);
-
-  /**
-   * Stores unicode titlecase table. Exploit package visibility of
-   * String.value to avoid copying the array.
-   * @see CharData#TITLE
-   */
-  private static final char[] title = String.zeroBasedStringValue(CharData.TITLE);
-
-  /**
-   * Mask for grabbing the type out of the contents of data.
-   * @see CharData#DATA
    */
   private static final int TYPE_MASK = 0x1F;
 
   /**
-   * Mask for grabbing the non-breaking space flag out of the contents of
-   * data.
-   * @see CharData#DATA
+   * Mask for grabbing the non-breaking space flag out of the result of
+   * readChar.
+   * @see #readChar(char)
    */
   private static final int NO_BREAK_MASK = 0x20;
 
   /**
-   * Mask for grabbing the mirrored directionality flag out of the contents
-   * of data.
-   * @see CharData#DATA
+   * Mask for grabbing the mirrored directionality flag out of the result
+   * of readChar.
+   * @see #readChar(char)
    */
   private static final int MIRROR_MASK = 0x40;
 
   /**
    * Grabs an attribute offset from the Unicode attribute database. The lower
    * 5 bits are the character type, the next 2 bits are flags, and the top
-   * 9 bits are the offset into the attribute tables.
+   * 9 bits are the offset into the attribute tables. Note that the top 9
+   * bits are meaningless in this context; they are useful only in the native
+   * code.
    *
    * @param ch the character to look up
    * @return the character's attribute offset and type
    * @see #TYPE_MASK
    * @see #NO_BREAK_MASK
    * @see #MIRROR_MASK
-   * @see CharData#DATA
-   * @see CharData#SHIFT
    */
-  // Package visible for use in String.
-  static char readChar(char ch)
-  {
-    // Perform 16-bit addition to find the correct entry in data.
-    return data[(char) (blocks[ch >> CharData.SHIFT] + ch)];
-  }
+  private static native char readChar(char ch);
 
   /**
    * Wraps up a character.
@@ -1527,8 +1476,9 @@
    */
   public String toString()
   {
-    // Package constructor avoids an array copy.
-    return new String(new char[] { value }, 0, 1, true);
+    // This assumes that String.valueOf(char) can create a single-character
+    // String more efficiently than through the public API.
+    return String.valueOf(value);
   }
 
   /**
@@ -1540,8 +1490,9 @@
    */
   public static String toString(char ch)
   {
-    // Package constructor avoids an array copy.
-    return new String(new char[] { ch }, 0, 1, true);
+    // This assumes that String.valueOf(char) can create a single-character
+    // String more efficiently than through the public API.
+    return String.valueOf(ch);
   }
 
   /**
@@ -1896,11 +1847,7 @@
    * @see #toTitleCase(char)
    * @see #toUpperCase(char)
    */
-  public static char toLowerCase(char ch)
-  {
-    // Signedness doesn't matter, as result is cast back to char.
-    return (char) (ch + lower[readChar(ch) >> 7]);
-  }
+  public static native char toLowerCase(char ch);
 
   /**
    * Converts a Unicode character into its uppercase equivalent mapping.
@@ -1915,11 +1862,7 @@
    * @see #toLowerCase(char)
    * @see #toTitleCase(char)
    */
-  public static char toUpperCase(char ch)
-  {
-    // Signedness doesn't matter, as result is cast back to char.
-    return (char) (ch + upper[readChar(ch) >> 7]);
-  }
+  public static native char toUpperCase(char ch);
 
   /**
    * Converts a Unicode character into its titlecase equivalent mapping.
@@ -1933,14 +1876,7 @@
    * @see #toLowerCase(char)
    * @see #toUpperCase(char)
    */
-  public static char toTitleCase(char ch)
-  {
-    // As title is short, it doesn't hurt to exhaustively iterate over it.
-    for (int i = title.length - 2; i >= 0; i -= 2)
-      if (title[i] == ch)
-        return title[i + 1];
-    return toUpperCase(ch);
-  }
+  public static native char toTitleCase(char ch);
 
   /**
    * Converts a character into a digit of the specified radix. If the radix
@@ -1960,22 +1896,7 @@
    * @see #isDigit(char)
    * @see #getNumericValue(char)
    */
-  public static int digit(char ch, int radix)
-  {
-    if (radix < MIN_RADIX || radix > MAX_RADIX)
-      return -1;
-    char attr = readChar(ch);
-    if (((1 << (attr & TYPE_MASK))
-         & ((1 << UPPERCASE_LETTER)
-            | (1 << LOWERCASE_LETTER)
-            | (1 << DECIMAL_DIGIT_NUMBER))) != 0)
-      {
-        // Signedness doesn't matter; 0xffff vs. -1 are both rejected.
-        int digit = numValue[attr >> 7];
-        return (digit < radix) ? digit : -1;
-      }
-    return -1;
-  }
+  public static native int digit(char ch, int radix);
 
   /**
    * Returns the Unicode numeric value property of a character. For example,
@@ -2004,11 +1925,7 @@
    * @see #isDigit(char)
    * @since 1.1
    */
-  public static int getNumericValue(char ch)
-  {
-    // Treat numValue as signed.
-    return (short) numValue[readChar(ch) >> 7];
-  }
+  public static native int getNumericValue(char ch);
 
   /**
    * Determines if a character is a ISO-LATIN-1 space. This is only the five
@@ -2143,10 +2060,7 @@
    * @see #FINAL_QUOTE_PUNCTUATION
    * @since 1.1
    */
-  public static int getType(char ch)
-  {
-    return readChar(ch) & TYPE_MASK;
-  }
+  public static native int getType(char ch);
 
   /**
    * Converts a digit into a character which represents that digit
@@ -2166,9 +2080,9 @@
   public static char forDigit(int digit, int radix)
   {
     if (radix < MIN_RADIX || radix > MAX_RADIX
-        || digit < 0 || digit >= radix)
+	|| digit < 0 || digit >= radix)
       return '\0';
-    return Number.digits[digit];
+    return (char) (digit < 10 ? ('0' + digit) : ('a' - 10 + digit));
   }
 
   /**
@@ -2199,11 +2113,7 @@
    * @see #DIRECTIONALITY_POP_DIRECTIONAL_FORMAT
    * @since 1.4
    */
-  public static byte getDirectionality(char ch)
-  {
-    // The result will correctly be signed.
-    return (byte) (direction[readChar(ch) >> 7] >> 2);
-  }
+  public static native byte getDirectionality(char ch);
 
   /**
    * Determines whether the character is mirrored according to Unicode. For
