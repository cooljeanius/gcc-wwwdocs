--- /home/tromey/gnu/Nightly/classpath/classpath/java/net/URI.java	2004-04-13 02:20:23.000000000 -0600
+++ java/net/URI.java	2004-03-22 02:18:55.000000000 -0700
@@ -7,7 +7,7 @@
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2, or (at your option)
 any later version.
-
+ 
 GNU Classpath is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
@@ -44,14 +44,14 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-
 /**
  * @author Ito Kazumitsu (ito.kazumitsu@hitachi-cable.co.jp)
  * @author Dalibor Topic (robilad@kaffe.org)
  * @author Michael Koch (konqueror@gmx.de)
  * @since 1.4
  */
-public final class URI implements Comparable, Serializable
+public final class URI
+  implements Comparable, Serializable
 {
   static final long serialVersionUID = -6052424284110960213L;
 
@@ -70,14 +70,11 @@
   private static final String RFC2396_DIGIT = "0123456789";
   private static final String RFC2396_LOWALPHA = "abcdefghijklmnopqrstuvwxyz";
   private static final String RFC2396_UPALPHA = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
-  private static final String RFC2396_ALPHA =
-    RFC2396_LOWALPHA + RFC2396_UPALPHA;
+  private static final String RFC2396_ALPHA = RFC2396_LOWALPHA + RFC2396_UPALPHA;
   private static final String RFC2396_ALPHANUM = RFC2396_DIGIT + RFC2396_ALPHA;
   private static final String RFC2396_MARK = "-_.!~*'()";
-  private static final String RFC2396_UNRESERVED =
-    RFC2396_ALPHANUM + RFC2396_MARK;
-  private static final String RFC2396_REG_NAME =
-    RFC2396_UNRESERVED + "$,;:@&=+";
+  private static final String RFC2396_UNRESERVED = RFC2396_ALPHANUM + RFC2396_MARK;
+  private static final String RFC2396_REG_NAME = RFC2396_UNRESERVED + "$,;:@&=+";
   private static final String RFC2396_PCHAR = RFC2396_UNRESERVED + ":@&=+$,";
   private static final String RFC2396_SEGMENT = RFC2396_PCHAR + ";";
   private static final String RFC2396_PATH_SEGMENTS = RFC2396_SEGMENT + "/";
@@ -111,6 +108,7 @@
    * Index of fragment component in parsed URI.
    */
   private static final int FRAGMENT_GROUP = 10;
+
   private String scheme;
   private String rawSchemeSpecificPart;
   private String schemeSpecificPart;
@@ -128,17 +126,17 @@
   private String rawFragment;
   private String fragment;
 
-  private void readObject(ObjectInputStream is)
+  private void readObject (ObjectInputStream is)
     throws ClassNotFoundException, IOException
   {
   }
 
-  private void writeObject(ObjectOutputStream is) throws IOException
+  private void writeObject (ObjectOutputStream is)
+    throws IOException
   {
   }
 
-  private static String getURIGroup(Matcher match, int group)
-  {
+  private static String getURIGroup (Matcher match, int group) {
     String matched = match.group(group);
     return matched.length() == 0 ? null : matched;
   }
@@ -150,22 +148,23 @@
    *
    * @exception URISyntaxException If the given string violates RFC 2396
    */
-  private void parseURI(String str) throws URISyntaxException
+  private void parseURI (String str)
+    throws URISyntaxException
   {
     Pattern pattern = Pattern.compile(URI_REGEXP);
     Matcher matcher = pattern.matcher(str);
     if (matcher.matches())
       {
 	scheme = getURIGroup(matcher, SCHEME_GROUP);
-	rawSchemeSpecificPart = getURIGroup(matcher, SCHEME_SPEC_PART_GROUP);
+	rawSchemeSpecificPart = getURIGroup(matcher, SCHEME_SPEC_PART_GROUP); 
 	rawAuthority = getURIGroup(matcher, AUTHORITY_GROUP);
 	rawPath = getURIGroup(matcher, PATH_GROUP);
 	rawQuery = getURIGroup(matcher, QUERY_GROUP);
 	rawFragment = getURIGroup(matcher, FRAGMENT_GROUP);
       }
     else
-      throw new URISyntaxException(str, "doesn't match URI regular expression");
-
+      throw new URISyntaxException(str,
+				   "doesn't match URI regular expression");
     // We must eagerly unquote the parts, because this is the only time
     // we may throw an exception.
     schemeSpecificPart = unquote(rawSchemeSpecificPart);
@@ -185,39 +184,35 @@
    * @exception URISyntaxException If the given string contains invalid
    * escape sequences.
    */
-  private static String unquote(String str) throws URISyntaxException
+  private static String unquote (String str)
+    throws URISyntaxException
   {
     if (str == null)
       return null;
     byte[] buf = new byte[str.length()];
     int pos = 0;
-    for (int i = 0; i < str.length(); i++)
-      {
-	char c = str.charAt(i);
-	if (c > 127)
+    for (int i = 0; i < str.length(); i++) {
+      char c = str.charAt(i);
+      if (c > 127)
 	  throw new URISyntaxException(str, "Invalid character");
-	if (c == '%')
-	  {
-	    if (i + 2 >= str.length())
-	      throw new URISyntaxException(str, "Invalid quoted character");
-	    String hex = "0123456789ABCDEF";
-	    int hi = hex.indexOf(str.charAt(++i));
-	    int lo = hex.indexOf(str.charAt(++i));
-	    if (lo < 0 || hi < 0)
-	      throw new URISyntaxException(str, "Invalid quoted character");
-	    buf[pos++] = (byte) (hi * 16 + lo);
-	  }
-	else
-	  buf[pos++] = (byte) c;
-      }
-    try
-      {
-	return new String(buf, 0, pos, "utf-8");
-      }
-    catch (java.io.UnsupportedEncodingException x2)
-      {
-	throw (Error) new InternalError().initCause(x2);
+      if (c == '%') {
+        if (i + 2 >= str.length())
+	  throw new URISyntaxException(str, "Invalid quoted character");
+	String hex = "0123456789ABCDEF";
+        int hi = hex.indexOf(str.charAt(++i));
+        int lo = hex.indexOf(str.charAt(++i));
+        if (lo < 0 || hi < 0)
+	  throw new URISyntaxException(str, "Invalid quoted character");
+	buf[pos++] = (byte)(hi * 16 + lo);
+      } else {
+	buf[pos++] = (byte)c;
       }
+    }
+    try {
+      return new String(buf, 0, pos, "utf-8");
+    } catch (java.io.UnsupportedEncodingException x2) {
+      throw (Error)new InternalError().initCause(x2);
+    }
   }
 
   /**
@@ -228,11 +223,10 @@
    * UTF-8 character.
    *
    * @param str The string to quote
-   *
+   * 
    * @return The quoted string.
    */
-  private static String quote(String str)
-  {
+  private static String quote (String str) {
     // FIXME: unimplemented.
     return str;
   }
@@ -245,11 +239,10 @@
    * UTF-8 character.
    *
    * @param str The string to quote
-   *
+   * 
    * @return The quoted string.
    */
-  private static String quoteAuthority(String str)
-  {
+  private static String quoteAuthority (String str) {
     // Technically, we should be using RFC2396_AUTHORITY, but
     // it contains no additional characters.
     return quote(str, RFC2396_REG_NAME);
@@ -264,39 +257,37 @@
    *
    * @param str The string to quote
    * @param legalCharacters The set of legal characters
-   *
+   * 
    * @return The quoted string.
    */
-  private static String quote(String str, String legalCharacters)
+  private static String quote (String str, String legalCharacters)
   {
     StringBuffer sb = new StringBuffer(str.length());
-    for (int i = 0; i < str.length(); i++)
-      {
-	char c = str.charAt(i);
-	if (legalCharacters.indexOf(c) == -1)
-	  {
-	    String hex = "0123456789ABCDEF";
-	    if (c <= 127)
-	      sb.append('%').append(hex.charAt(c / 16)).append(hex.charAt(c % 16));
-	    else
-	      {
-		try
-		  {
-		    // this is far from optimal, but it works
-		    byte[] utf8 = str.substring(i, i + 1).getBytes("utf-8");
-		    for (int j = 0; j < utf8.length; j++)
-		      sb.append('%').append(hex.charAt((utf8[j] & 0xff) / 16))
-		        .append(hex.charAt((utf8[j] & 0xff) % 16));
-		  }
-		catch (java.io.UnsupportedEncodingException x)
-		  {
-		    throw (Error) new InternalError().initCause(x);
-		  }
-	      }
+    for (int i = 0; i < str.length(); i++) {
+      char c = str.charAt(i);
+      if (legalCharacters.indexOf(c) == -1) {
+	String hex = "0123456789ABCDEF";
+	if (c <= 127) {
+	  sb.append('%')
+	    .append(hex.charAt(c / 16))
+	    .append(hex.charAt(c % 16));
+	} else {
+	  try {
+	    // this is far from optimal, but it works
+	    byte[] utf8 = str.substring(i, i + 1).getBytes("utf-8");
+	    for (int j = 0; j < utf8.length; j++) {
+		sb.append('%')
+		.append(hex.charAt((utf8[j] & 0xff) / 16))
+		.append(hex.charAt((utf8[j] & 0xff) % 16));
+	    }
+	  } catch (java.io.UnsupportedEncodingException x) {
+	    throw (Error)new InternalError().initCause(x);
 	  }
-	else
-	  sb.append(c);
+	}
+      } else {
+	sb.append(c);
       }
+    }
     return sb.toString();
   }
 
@@ -308,11 +299,10 @@
    * UTF-8 character.
    *
    * @param str The string to quote
-   *
+   * 
    * @return The quoted string.
    */
-  private static String quoteHost(String str)
-  {
+  private static String quoteHost (String str) {
     // FIXME: unimplemented.
     return str;
   }
@@ -325,11 +315,10 @@
    * UTF-8 character.
    *
    * @param str The string to quote
-   *
+   * 
    * @return The quoted string.
    */
-  private static String quotePath(String str)
-  {
+  private static String quotePath (String str) {
     // Technically, we should be using RFC2396_PATH, but
     // it contains no additional characters.
     return quote(str, RFC2396_PATH_SEGMENTS);
@@ -343,11 +332,10 @@
    * UTF-8 character.
    *
    * @param str The string to quote
-   *
+   * 
    * @return The quoted string.
    */
-  private static String quoteUserInfo(String str)
-  {
+  private static String quoteUserInfo (String str) {
     // FIXME: unimplemented.
     return str;
   }
@@ -360,11 +348,12 @@
    * @exception URISyntaxException If the given string violates RFC 2396
    * @exception NullPointerException If str is null
    */
-  public URI(String str) throws URISyntaxException
+  public URI (String str)
+    throws URISyntaxException
   {
     parseURI(str);
   }
-
+ 
   /**
    * Create an URI from the given components
    *
@@ -378,19 +367,19 @@
    *
    * @exception URISyntaxException If the given string violates RFC 2396
    */
-  public URI(String scheme, String userInfo, String host, int port,
-             String path, String query, String fragment)
+  public URI (String scheme, String userInfo, String host, int port,
+	     String path, String query, String fragment)
     throws URISyntaxException
   {
-    this((scheme == null ? "" : scheme + ":")
-         + (userInfo == null && host == null && port == -1 ? "" : "//")
-         + (userInfo == null ? "" : quoteUserInfo(userInfo) + "@")
-         + (host == null ? "" : quoteHost(host))
-         + (port == -1 ? "" : ":" + String.valueOf(port))
-         + (path == null ? "" : quotePath(path))
-         + (query == null ? "" : "?" + quote(query))
-         + (fragment == null ? "" : "#" + quote(fragment)));
-
+    this((scheme == null ? "" : scheme + ":" )
+	 + (userInfo == null && host == null && port == -1 ? "" : "//")
+	 + (userInfo == null ? "" : quoteUserInfo(userInfo) + "@")
+	 + (host == null ? "" : quoteHost(host))
+	 + (port == -1 ? "" : ":" + String.valueOf(port))
+	 + (path == null ? "" : quotePath(path))
+	 + (query == null ? "" : "?" + quote(query))
+	 + (fragment == null ? "" : "#" + quote(fragment)));
+    
     parseServerAuthority();
   }
 
@@ -405,14 +394,15 @@
    *
    * @exception URISyntaxException If the given string violates RFC 2396
    */
-  public URI(String scheme, String authority, String path, String query,
-             String fragment) throws URISyntaxException
+  public URI (String scheme, String authority, String path, String query,
+	     String fragment)
+    throws URISyntaxException
   {
     this((scheme == null ? "" : scheme + ":")
-         + (authority == null ? "" : "//" + quoteAuthority(authority))
-         + (path == null ? "" : quotePath(path))
-         + (query == null ? "" : "?" + quote(query))
-         + (fragment == null ? "" : "#" + quote(fragment)));
+	 + (authority == null ? "" : "//" + quoteAuthority(authority))
+	 + (path == null ? "" : quotePath(path))
+	 + (query == null ? "" : "?" + quote(query))
+	 + (fragment == null ? "" : "#" + quote(fragment)));
   }
 
   /**
@@ -425,7 +415,7 @@
    *
    * @exception URISyntaxException If the given string violates RFC 2396
    */
-  public URI(String scheme, String host, String path, String fragment)
+  public URI (String scheme, String host, String path, String fragment)
     throws URISyntaxException
   {
     this(scheme, null, host, -1, path, null, fragment);
@@ -440,12 +430,12 @@
    *
    * @exception URISyntaxException If the given string violates RFC 2396
    */
-  public URI(String scheme, String ssp, String fragment)
+  public URI (String scheme, String ssp, String fragment)
     throws URISyntaxException
   {
     this((scheme == null ? "" : scheme + ":")
-         + (ssp == null ? "" : quote(ssp))
-         + (fragment == null ? "" : "#" + quote(fragment)));
+	 + (ssp == null ? "" : quote(ssp))
+	 + (fragment == null ? "" : "#" + quote(fragment)));
   }
 
   /**
@@ -456,16 +446,16 @@
    * @exception IllegalArgumentException If the given string violates RFC 2396
    * @exception NullPointerException If str is null
    */
-  public static URI create(String str)
+  public static URI create (String str)
   {
     try
       {
 	return new URI(str);
       }
-    catch (URISyntaxException e)
+    catch(URISyntaxException e)
       {
-	throw (IllegalArgumentException) new IllegalArgumentException()
-	      .initCause(e);
+	throw (IllegalArgumentException)
+	  new IllegalArgumentException().initCause(e);
       }
   }
 
@@ -475,7 +465,8 @@
    *
    * @exception URISyntaxException If the given string violates RFC 2396
    */
-  public URI parseServerAuthority() throws URISyntaxException
+  public URI parseServerAuthority ()
+     throws URISyntaxException
   {
     return null;
   }
@@ -483,7 +474,7 @@
   /**
    * Returns a normalizes versions of the URI
    */
-  public URI normalize()
+  public URI normalize ()
   {
     return null;
   }
@@ -498,8 +489,8 @@
    *
    * @exception NullPointerException If uri is null
    */
-  public URI resolve(URI uri)
-  {
+  public URI resolve (URI uri)
+  { 
     if (uri.isAbsolute())
       return uri;
     if (uri.isOpaque())
@@ -514,34 +505,35 @@
 
     try
       {
-	if (fragment != null && path != null && path.equals("")
-	    && scheme == null && authority == null && query == null)
+        if (fragment != null &&
+            path != null && path.equals("") &&
+            scheme == null && authority == null && query == null)
 	  return new URI(this.scheme, this.schemeSpecificPart, fragment);
 
-	if (authority == null)
+        if (authority == null)
 	  {
-	    authority = this.authority;
-	    if (path == null)
+            authority = this.authority;
+            if (path == null)
 	      path = "";
-	    if (! (path.startsWith("/")))
+            if (!(path.startsWith("/")))
 	      {
-		StringBuffer basepath = new StringBuffer(this.path);
-		int i = this.path.lastIndexOf('/');
+                StringBuffer basepath = new StringBuffer(this.path);
+                int i = this.path.lastIndexOf('/');
 
-		if (i >= 0)
-		  basepath.delete(i + 1, basepath.length());
+                if (i >= 0)
+		  basepath.delete(i+1, basepath.length());
 
-		basepath.append(path);
-		path = basepath.toString();
-		//  FIXME We must normalize the path here.
-		//  Normalization process omitted.
+                basepath.append(path);
+                path = basepath.toString();
+                //  FIXME We must normalize the path here.
+                //  Normalization process omitted.
 	      }
 	  }
-	return new URI(this.scheme, authority, path, query, fragment);
+        return new URI(this.scheme, authority, path, query, fragment);
       }
     catch (URISyntaxException e)
       {
-	return null;
+        return null;
       }
   }
 
@@ -556,7 +548,8 @@
    * violates RFC 2396
    * @exception NullPointerException If uri is null
    */
-  public URI resolve(String str) throws IllegalArgumentException
+  public URI resolve (String str)
+    throws IllegalArgumentException
   {
     return resolve(create(str));
   }
@@ -570,7 +563,7 @@
    *
    * @exception NullPointerException If uri is null
    */
-  public URI relativize(URI uri)
+  public URI relativize (URI uri)
   {
     return null;
   }
@@ -582,7 +575,8 @@
    * not be found, or if some other error occurred while constructing the URL
    * @exception IllegalArgumentException If the URI is not absolute
    */
-  public URL toURL() throws IllegalArgumentException, MalformedURLException
+  public URL toURL ()
+    throws IllegalArgumentException, MalformedURLException
   {
     if (isAbsolute())
       return new URL(this.toString());
@@ -593,7 +587,7 @@
   /**
    * Returns the scheme of the URI
    */
-  public String getScheme()
+  public String getScheme ()
   {
     return scheme;
   }
@@ -601,7 +595,7 @@
   /**
    * Tells whether this URI is absolute or not
    */
-  public boolean isAbsolute()
+  public boolean isAbsolute ()
   {
     return (scheme != null);
   }
@@ -609,16 +603,16 @@
   /**
    * Tell whether this URI is opaque or not
    */
-  public boolean isOpaque()
+  public boolean isOpaque ()
   {
-    return ((scheme != null) && ! (schemeSpecificPart.startsWith("/")));
+    return ((scheme != null) && !(schemeSpecificPart.startsWith("/")));
   }
 
   /**
    * Returns the raw scheme specific part of this URI.
    * The scheme-specific part is never undefined, though it may be empty
    */
-  public String getRawSchemeSpecificPart()
+  public String getRawSchemeSpecificPart ()
   {
     return rawSchemeSpecificPart;
   }
@@ -626,7 +620,7 @@
   /**
    * Returns the decoded scheme specific part of this URI.
    */
-  public String getSchemeSpecificPart()
+  public String getSchemeSpecificPart ()
   {
     return schemeSpecificPart;
   }
@@ -634,7 +628,7 @@
   /**
    * Returns the rae authority part of this URI
    */
-  public String getRawAuthority()
+  public String getRawAuthority ()
   {
     return rawAuthority;
   }
@@ -642,7 +636,7 @@
   /**
    * Returns the decoded authority part of this URI
    */
-  public String getAuthority()
+  public String getAuthority ()
   {
     return authority;
   }
@@ -650,7 +644,7 @@
   /**
    * Returns the raw user info part of this URI
    */
-  public String getRawUserInfo()
+  public String getRawUserInfo ()
   {
     return rawUserInfo;
   }
@@ -658,7 +652,7 @@
   /**
    * Returns the decoded user info part of this URI
    */
-  public String getUserInfo()
+  public String getUserInfo ()
   {
     return userInfo;
   }
@@ -666,7 +660,7 @@
   /**
    * Returns the hostname of the URI
    */
-  public String getHost()
+  public String getHost ()
   {
     return host;
   }
@@ -674,7 +668,7 @@
   /**
    * Returns the port number of the URI
    */
-  public int getPort()
+  public int getPort ()
   {
     return port;
   }
@@ -682,7 +676,7 @@
   /**
    * Returns the raw path part of this URI
    */
-  public String getRawPath()
+  public String getRawPath ()
   {
     return rawPath;
   }
@@ -690,7 +684,7 @@
   /**
    * Returns the path of the URI
    */
-  public String getPath()
+  public String getPath ()
   {
     return path;
   }
@@ -698,7 +692,7 @@
   /**
    * Returns the raw query part of this URI
    */
-  public String getRawQuery()
+  public String getRawQuery ()
   {
     return rawQuery;
   }
@@ -706,7 +700,7 @@
   /**
    * Returns the query of the URI
    */
-  public String getQuery()
+  public String getQuery ()
   {
     return query;
   }
@@ -714,7 +708,7 @@
   /**
    * Return the raw fragment part of this URI
    */
-  public String getRawFragment()
+  public String getRawFragment ()
   {
     return rawFragment;
   }
@@ -722,7 +716,7 @@
   /**
    * Returns the fragment of the URI
    */
-  public String getFragment()
+  public String getFragment ()
   {
     return fragment;
   }
@@ -740,7 +734,7 @@
   /**
    * Computes the hascode of the URI
    */
-  public int hashCode()
+  public int hashCode ()
   {
     return 0;
   }
@@ -752,7 +746,8 @@
    *
    * @exception ClassCastException If given object ist not an URI
    */
-  public int compareTo(Object obj) throws ClassCastException
+  public int compareTo (Object obj)
+    throws ClassCastException
   {
     return 0;
   }
@@ -760,19 +755,19 @@
   /**
    * Returns the URI as string
    */
-  public String toString()
+  public String toString ()
   {
     return (getScheme() == null ? "" : getScheme() + ":")
-           + (getRawAuthority() == null ? "" : "//" + getRawAuthority())
-           + (getRawPath() == null ? "" : getRawPath())
-           + (getRawQuery() == null ? "" : "?" + getRawQuery())
-           + (getRawFragment() == null ? "" : "#" + getRawFragment());
+      + (getRawAuthority() == null ? "" : "//" + getRawAuthority())
+      + (getRawPath() == null ? "" : getRawPath())
+      + (getRawQuery() == null ? "" : "?" + getRawQuery())
+      + (getRawFragment() == null ? "" : "#" + getRawFragment());
   }
 
   /**
    * Returns the URI as US-ASCII string
    */
-  public String toASCIIString()
+  public String toASCIIString ()
   {
     return "";
   }
