--- /home/tromey/gnu/Nightly/classpath/classpath/native/jni/gtk-peer/gthread-jni.c	2004-04-13 02:20:44.000000000 -0600
+++ jni/gtk-peer/gthread-jni.c	2003-10-09 02:17:59.000000000 -0600
@@ -1,5 +1,5 @@
 /* gthread-jni.c -- JNI threading routines for GLIB
-   Copyright (C) 1998, 2004 Free Software Foundation, Inc.
+   Copyright (C) 1998 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -91,40 +91,28 @@
 static void maybe_rethrow(JNIEnv *gdk_env, char *message, char *file, int line) {
   jthrowable cause;
 
+  /* rethrow if an exception happened */
+  if ((cause = (*gdk_env)->ExceptionOccurred(gdk_env)) != NULL) {
     jstring jmessage;
-    jclass obj_class;
+  jclass obj_class;
     jobject obj;
     jmethodID ctor;
-    int len;
-    char *buf;
 
-    /* rethrow if an exception happened */
-    if ((cause = (*gdk_env)->ExceptionOccurred(gdk_env)) != NULL)
-      {
-
-	/* allocate local message in Java */
-	len = strlen(message) + strlen(file) + 25;
-	buf = (char *) malloc(len);
-	if (buf != NULL)
-	  {
-	    bzero(buf, len);
-	    sprintf(buf, "%s (at %s:%d)", message, file, line);
-	    jmessage = (*gdk_env)->NewStringUTF(gdk_env, buf);
-	    free(buf);
-	  }
-	else
-	  jmessage = NULL;
+    /* allocate local message in Java */
+    int len = strlen(message) + strlen(file) + 25;
+    char buf[ len ];
+    bzero(buf, len);
+    sprintf(buf, "%s (at %s:%d)", message, file, line);
+    jmessage = (*gdk_env)->NewStringUTF(gdk_env, buf);
     
-	/* create RuntimeException wrapper object */
-	obj_class = (*gdk_env)->FindClass (gdk_env,
-			"java/lang/RuntimeException");
-	ctor = (*gdk_env)->GetMethodID(gdk_env, obj_class, "<init>",
-	"(Ljava/langString;Ljava/lang/Throwable)V");
-	obj = (*gdk_env)->NewObject (gdk_env, obj_class, ctor, jmessage, cause);
-
-	/* throw it */
-	(*gdk_env)->Throw(gdk_env, (jthrowable)obj);
-      }
+    /* create RuntimeException wrapper object */
+    obj_class = (*gdk_env)->FindClass (gdk_env, "java/lang/RuntimeException");
+    ctor = (*gdk_env)->GetMethodID(gdk_env, obj_class, "<init>", "(Ljava/langString;Ljava/lang/Throwable)V");
+    obj = (*gdk_env)->NewObject (gdk_env, obj_class, ctor, jmessage, cause);
+
+    /* throw it */
+    (*gdk_env)->Throw(gdk_env, (jthrowable)obj);
+    }
 }
 
 /* This macro is used to include a source location in the exception message */
@@ -216,7 +204,7 @@
 static gboolean g_mutex_trylock_jni_impl
   (GMutex *mutex __attribute__((unused)))
 {
-  /* XXX Shall we implement this in a VM-specific way under a flag? */
+  // Shall we implement this in a JikesRVM-specific way under a flag?
   return FALSE;
 }
 
