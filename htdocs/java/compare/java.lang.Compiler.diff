--- /home/tromey/gnu/classpath/classpath/java/lang/Compiler.java	Wed Mar 20 17:01:40 2002
+++ java/lang/Compiler.java	Tue Jan 22 16:01:34 2002
@@ -1,5 +1,6 @@
-/* Compiler.java -- placeholder for Java-to-native runtime compilers
-   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.
+/* Compiler.java -- Interface for implementing a method to override 
+   Object.clone()comparaing objects to obtain an ordering
+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -7,7 +8,7 @@
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2, or (at your option)
 any later version.
-
+ 
 GNU Classpath is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
@@ -38,91 +39,84 @@
 
 package java.lang;
 
+/* Written using "Java Class Libraries", 2nd edition, ISBN 0-201-31002-3
+ */
+
 /**
- * The <code>Compiler</code> class is a placeholder for a JIT compiler
- * implementation, and does nothing unless there is such a compiler.
- *
- * <p>The system property <code>java.compiler</code> may contain the name
+ * The <code>Compiler</code> class is a place holder for a JIT
+ * compiler implementation does nothing unless there is such a 
+ * compiler by default.
+ * <p>
+ * The system property <code>java.compiler</code> may contain the name
  * of a library to load with <code>System.loadLibrary</code> when the
- * virtual machine first starts.  If so, and loading the library succeeds,
- * then a function by the name of <code>java_lang_Compiler_start()</code>
+ * virtual machine first starts.  If so and loading the library succeeds,
+ * then a function by the name of <code>java_lang_Compiler_start()</code> 
  * in that library is called.
  *
- * <p>Note that a VM might not have implemented any of this.
+ * Note that a VM might not have implemented any of this.
  *
  * @author Tom Tromey <tromey@cygnus.com>
- * @see System#getProperty(String)
- * @see System#getProperty(String, String)
- * @see System#loadLibrary(String)
+ *
  * @since JDK 1.0
- * @status updated to 1.4
+ * @see System#getProperty(java.lang.String)
+ * @see System#getProperty(java.lang.String,java.lang.String)
+ * @see System#loadLibrary(java.lang.String)
  */
-public final class Compiler
+public final class Compiler 
 {
-  /**
-   * Don't allow new `Compiler's to be made.
-   */
-  private Compiler()
-  {
-  }
-
-  /**
-   * Compile the class named by <code>oneClass</code>.
-   *
-   * @param oneClass the class to compile
-   * @return <code>false</code> if no compiler is available or
-   *         compilation failed, <code>true</code> if compilation succeeded
-   * @throws NullPointerException if oneClass is null
-   */
-  public static boolean compileClass(Class oneClass)
-  {
-    // Never succeed.
-    return false;
-  }
-
-  /**
-   * Compile the classes whose name matches <code>classNames/code>.
-   *
-   * @param classNames the name of classes to compile
-   * @return <code>false</code> if no compiler is available or
-   *         compilation failed, <code>true</code> if compilation succeeded
-   * @throws NullPointerException if classNames is null
-   */
-  public static boolean compileClasses(String classNames)
-  {
-    // Note the incredibly lame interface.  Always fail.
-    return false;
-  }
-
-  /**
-   * This method examines the argument and performs an operation
-   * according to the compilers documentation.  No specific operation
-   * is required.
-   *
-   * @param arg a compiler-specific argument
-   * @return a compiler-specific value, including null
-   * @throws NullPointerException if the compiler doesn't like a null arg
-   */
-  public static Object command(Object arg)
-  {
-    // Our implementation defines this to a no-op.
-    return null;
-  }
-
-  /**
-   * Calling <code>Compiler.enable()</code> will cause the compiler
-   * to resume operation if it was previously disabled; provided that a
-   * compiler even exists.
-   */
-  public static void enable()
-  {
-  }
-
-  /**
-   * Calling <code>Compiler.disable()</code> will cause the compiler
-   * to be suspended; provided that a compiler even exists.
-   */
-  public static void disable()
-  {
-  }
+    /**
+     * Don't allow new `Compiler's to be made.
+     */
+    private Compiler ()
+    {
+    }
+
+    /**
+     * Compile the class named by <code>oneClass</code>.
+     * 
+     * @param oneClass the class to compile
+     * @return <code>false</code> if no compiler is available or 
+     * compilation failed and <code>true</code> if compilation succeeded.
+     */
+    public static boolean compileClass (Class oneClass) 
+    {
+ 	// Never succeed.
+	return false;
+    }
+    
+    /**
+     * Compile the classes whose name matches <code>classNames/code>.
+     *
+     * @param classNames the name of classes to compile
+     * @return <code>false</code> if no compiler is available or 
+     * compilation failed and <code>true</code> if compilation succeeded.
+     */
+    public static boolean compileClasses (String classNames) 
+    {
+	// Note the incredibly lame interface.  Always fail.
+	return false;
+    }
+
+    /**
+     * This method examines the argument and performs an operation 
+     * according to the compilers documentation.  No specific operation
+     * is required.
+     */
+    public static Object command (Object arg) 
+    {
+	// Our implementation defines this to a no-op.
+	return null;
+    }
+
+    /**
+     * Calling <code>Compiler.enable()</code> will cause the compiler
+     * to resume operation if it was previously disabled.  
+     */
+    public static void enable () { }
+
+    /**
+     * Calling <code>Compiler.disable()</code> will cause the compiler
+     * to be suspended.
+     */
+    public static void disable () { }
 }
