--- /home/tromey/gnu/Nightly/classpath/classpath/java/awt/EventQueue.java	2004-01-27 02:26:02.000000000 -0700
+++ java/awt/EventQueue.java	2004-01-22 02:21:49.000000000 -0700
@@ -231,11 +231,10 @@
   public static void invokeAndWait(Runnable runnable)
     throws InterruptedException, InvocationTargetException
   {
-    if (isDispatchThread ())
-      throw new Error("Can't call invokeAndWait from event dispatch thread");
-
     EventQueue eq = Toolkit.getDefaultToolkit().getSystemEventQueue(); 
     Thread current = Thread.currentThread();
+    if (current == eq.dispatchThread)
+      throw new Error("Can't call invokeAndWait from event dispatch thread");
 
     InvocationEvent ie = 
       new InvocationEvent(eq, runnable, current, true);
@@ -294,18 +293,8 @@
   public static AWTEvent getCurrentEvent()
   {
     EventQueue eq = Toolkit.getDefaultToolkit().getSystemEventQueue(); 
-    Thread ct = Thread.currentThread();
-    
-    /* Find out if this thread is the dispatch thread for any of the
-       EventQueues in the chain */ 
-    while (ct != eq.dispatchThread)
-      {
-        // Try next EventQueue, if any
-        if (eq.next == null)
-           return null;  // Not an event dispatch thread
-        eq = eq.next;
-      }
-
+    if (Thread.currentThread() != eq.dispatchThread)
+      return null;
     return eq.currentEvent;
   }
 
@@ -359,34 +348,30 @@
     if (prev == null)
       throw new EmptyStackException();
 
-    /* The order is important here, we must get the prev lock first,
-       or deadlock could occur as callers usually get here following
-       prev's next pointer, and thus obtain prev's lock before trying
-       to get this lock. */
+    // Don't synchronize both this and prev at the same time, or deadlock could
+    // occur.
     synchronized (prev)
       {
-        prev.next = next;
-        if (next != null)
-          next.prev = prev;
+        prev.next = null;
+      }
 
-        synchronized (this)
+    synchronized (this)
+      {
+        int i = next_out;
+        while (i != next_in)
           {
-            int i = next_out;
-            while (i != next_in)
-              {
-                prev.postEvent(queue[i]);
-                next_out = i;
-                if (++i == queue.length)
-                  i = 0;
-              }
-	    // Empty the queue so it can be reused
-	    next_in = 0;
-	    next_out = 0;
-
-            // Tell our EventDispatchThread that it can end execution
-            dispatchThread.interrupt ();
-	    dispatchThread = null;
+            prev.postEvent(queue[i]);
+            next_out = i;
+            if (++i == queue.length)
+              i = 0;
           }
+	// Empty the queue so it can be reused
+	next_in = 0;
+	next_out = 0;
+
+        // Tell our EventDispatchThread that it can end execution
+        dispatchThread.interrupt ();
+	dispatchThread = null;
       }
   }
 
