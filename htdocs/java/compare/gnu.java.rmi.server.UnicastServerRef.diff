--- /home/tromey/gnu/classpath/classpath/gnu/java/rmi/server/UnicastServerRef.java	Sat Mar 23 09:42:53 2002
+++ gnu/java/rmi/server/UnicastServerRef.java	Mon Jul 15 10:48:22 2002
@@ -66,15 +66,14 @@
 import java.util.Hashtable;
 
 public class UnicastServerRef
-	extends UnicastRef 
-	implements ServerRef{ //SHOULD implement ServerRef
+	extends UnicastRef {
 
 final static private Class[] stubprototype = new Class[] { RemoteRef.class };
 
 Remote myself;
 private Skeleton skel;
 private RemoteStub stub;
-private Hashtable methods = new Hashtable();
+private Hashtable methods;
 
 public UnicastServerRef(ObjID id, int port, RMIServerSocketFactory ssf) {
 	super(id);
@@ -96,7 +95,7 @@
 		skel = (Skeleton)getHelperClass(cls, "_Skel");
 
 		// Build hash of methods which may be called.
-		buildMethodHash(obj.getClass(), true);
+		buildMethodHash(obj.getClass());
 
 		// Export it.
 		UnicastServer.exportObject(this);
@@ -105,25 +104,10 @@
 	return (stub);
 }
 
-public RemoteStub exportObject(Remote remote, Object obj)
-        throws RemoteException
-{
-    //FIX ME
-	return exportObject(remote);
-}
-
-
-public boolean unexportObject(Remote obj, boolean force) throws RemoteException {
-    // Remove all hashes of methods which may be called.
-    buildMethodHash(obj.getClass(), false);
-    return UnicastServer.unexportObject(this, force);
-}
-
 private Object getHelperClass(Class cls, String type) {
 	try {   
-	    String classname = cls.getName();
-		ClassLoader cl = cls.getClassLoader(); //DONT use "Class scls = Class.forName(classname + type);"
-		Class scls = cl.loadClass(classname + type);
+		String classname = cls.getName();
+		Class scls = Class.forName(classname + type);
 		if (type.equals("_Stub")) {
 			try {
 				// JDK 1.2 stubs
@@ -163,7 +147,8 @@
 	throw new Error("Not implemented");
 }
 
-private void buildMethodHash(Class cls, boolean build) {
+private void buildMethodHash(Class cls) {
+	methods = new Hashtable();
 	Method[] meths = cls.getMethods();
 	for (int i = 0; i < meths.length; i++) {
 		/* Don't need to include any java.xxx related stuff */
@@ -171,23 +156,11 @@
 			continue;
 		}
 		long hash = RMIHashes.getMethodHash(meths[i]);
-		if(build)
-		    methods.put(new Long (hash), meths[i]);
-		else
-		    methods.remove(new Long (hash));
+		methods.put(new Long (hash), meths[i]);
 //System.out.println("meth = " + meths[i] + ", hash = " + hash);
 	}
 }
 
-Class getMethodReturnType(int method, long hash) throws Exception
-{
-    if (method == -1) {
-        Method meth = (Method)methods.get(new Long (hash));
-        return meth.getReturnType();
-    }else
-        return null;
-}
-
 public Object incomingMessageCall(UnicastConnection conn, int method, long hash) throws Exception {
 //System.out.println("method = " + method + ", hash = " + hash);
 	// If method is -1 then this is JDK 1.2 RMI - so use the hash
@@ -216,15 +189,7 @@
 				throw t;
 			}
 		}
-		//We must reinterpret the exception thrown by meth.invoke()
-		//return (meth.invoke(myself, args));
-		Object ret = null;
-		try{
-		    ret = meth.invoke(myself, args);
-		}catch(InvocationTargetException e){
-		    throw (Exception)(e.getTargetException());
-		}
-		return ret;
+		return (meth.invoke(myself, args));
 	}
 	// Otherwise this is JDK 1.1 style RMI - we find the skeleton
 	// and invoke it using the method number.  We wrap up our
