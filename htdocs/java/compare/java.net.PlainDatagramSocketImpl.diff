--- /home/tromey/gnu/Nightly/classpath/classpath/java/net/PlainDatagramSocketImpl.java	Sun Mar 23 02:18:39 2003
+++ java/net/PlainDatagramSocketImpl.java	Sun Mar 23 02:18:02 2003
@@ -37,233 +37,117 @@
 
 
 package java.net;
-
 import java.io.IOException;
-import gnu.classpath.Configuration;
 
 /**
- * This is the default socket implementation for datagram sockets.
- * It makes native calls to C routines that implement BSD style
- * SOCK_DGRAM sockets in the AF_INET family.
- *
- * @version 0.1
- *
- * @author Aaron M. Renn (arenn@urbanophile.com)
+ * @author Warren Levy <warrenl@cygnus.com>
+ * @date May 3, 1999.
+ */
+
+/**
+ * Written using on-line Java Platform 1.2 API Specification, as well
+ * as "The Java Class Libraries", 2nd edition (Addison-Wesley, 1998).
+ * Status:  Believed complete and correct.
  */
-public class PlainDatagramSocketImpl extends DatagramSocketImpl
+
+class PlainDatagramSocketImpl extends DatagramSocketImpl
 {
-  /**
-   * Option id for the IP_TTL (time to live) value.
-   */
-  private static final int IP_TTL = 0x1E61; // 7777
+  // These fields are mirrored for use in native code to avoid cpp conflicts
+  // when the #defines in system header files are the same as the public fields.
+  static final int _Jv_TCP_NODELAY_ = SocketOptions.TCP_NODELAY,
+                   _Jv_SO_BINDADDR_ = SocketOptions.SO_BINDADDR,
+                   _Jv_SO_REUSEADDR_ = SocketOptions.SO_REUSEADDR,
+                   _Jv_SO_BROADCAST_ = SocketOptions.SO_BROADCAST,
+                   _Jv_SO_OOBINLINE_ = SocketOptions.SO_OOBINLINE,
+                   _Jv_IP_MULTICAST_IF_ = SocketOptions.IP_MULTICAST_IF,
+                   _Jv_IP_MULTICAST_IF2_ = SocketOptions.IP_MULTICAST_IF2,
+                   _Jv_IP_MULTICAST_LOOP_ = SocketOptions.IP_MULTICAST_LOOP,
+                   _Jv_IP_TOS_ = SocketOptions.IP_TOS,
+                   _Jv_SO_LINGER_ = SocketOptions.SO_LINGER,
+                   _Jv_SO_TIMEOUT_ = SocketOptions.SO_TIMEOUT,
+                   _Jv_SO_SNDBUF_ = SocketOptions.SO_SNDBUF,
+                   _Jv_SO_RCVBUF_ = SocketOptions.SO_RCVBUF,
+                   _Jv_SO_KEEPALIVE_ = SocketOptions.SO_KEEPALIVE;
+
+  int fnum = -1;
+
+  // FIXME: Is this necessary?  Could it help w/ DatagramSocket.getLocalAddress?
+  // InetAddress address;
+  
+  // localAddress cache  
+  InetAddress localAddress;
+
+  // 'timeout' is set/read by setOption/getOption.
+  int timeout = 0;
+
+  // FIXME: Probably should have bind (and create?) calls from DatagramSocket
+  // constuctor.  If so, then same change should be made to the corresponding
+  // Socket (non-datagram) classes.  This allows the implementation more
+  // complete control over how the socket is set up and used (e.g. connect,
+  // setting options, etc.).
+  public PlainDatagramSocketImpl()
+  {
+  }
 
+  protected native void bind(int lport, InetAddress laddr)
+	throws SocketException;
+  protected native void connect (InetAddress i, int port)
+	throws SocketException;
+  protected native void disconnect ();
+  protected native void create() throws SocketException;
+  protected native int peek(InetAddress i) throws IOException;
+  protected native int peekData (DatagramPacket dp) throws IOException;
+  protected native void setTimeToLive(int ttl) throws IOException;
+  protected native int getTimeToLive() throws IOException;
+  protected native void send(DatagramPacket p) throws IOException;
+  protected native void receive(DatagramPacket p) throws IOException;
+  public native void setOption(int optID, Object value) throws SocketException;
+  public native Object getOption(int optID) throws SocketException;
+  private native void mcastGrp(InetAddress inetaddr, NetworkInterface netIf,
+		               boolean join) throws IOException;
+  protected native void close();
 
-  // Static initializer to load native library
-  static
+  // Deprecated in JDK 1.2.
+  protected byte getTTL() throws IOException
   {
-    if (Configuration.INIT_LOAD_LIBRARY)
-      {
-        System.loadLibrary("javanet");
-      }
+    return (byte) getTimeToLive();
   }
 
-  /**
-   * This is the actual underlying file descriptor
-   */
-  protected int native_fd = -1;
-
-  /**
-   * Default do nothing constructor
-   */
-  public PlainDatagramSocketImpl()
+  // Deprecated in JDK 1.2.
+  protected void setTTL(byte ttl) throws IOException
   {
+    setTimeToLive(((int) ttl) & 0xFF);
   }
 
-  /**
-   * Creates a new datagram socket
-   *
-   * @exception SocketException If an error occurs
-   */
-  protected native synchronized void create() throws SocketException;
-
-  /**
-   * Closes the socket
-   */
-  protected native synchronized void close();
-
-  /**
-   * Binds this socket to a particular port and interface
-   *
-   * @param port The port to bind to
-   * @param addr The address to bind to
-   *
-   * @exception SocketException If an error occurs
-   */
-  protected native synchronized void bind(int port, InetAddress addr)
-    throws SocketException;
-
-  /**
-   * Sends a packet of data to a remote host
-   *
-   * @param packet The packet to send
-   *
-   * @exception IOException If an error occurs
-   */
-  protected synchronized void send(DatagramPacket packet) throws IOException
-  {
-    sendto(packet.getAddress(), packet.getPort(), packet.getData(), 
-           packet.getLength());
-  }
-
-  /**
-   * Sends a packet of data to a remote host
-   *
-   * @param addr The address to send to
-   * @param port The port to send to 
-   * @param buf The buffer to send
-   * @param len The length of the data to send
-   *
-   * @exception IOException If an error occurs
-   */
-  private native synchronized void sendto (InetAddress addr, int port,
-                                           byte[] buf, int len)
-    throws IOException;
-
-  /**
-   * What does this method really do?
-   */
-  protected synchronized int peek(InetAddress addr) throws IOException
-  {
-    throw new IOException("Not Implemented Yet");
-  }
-
-  /**
-   * Receives a UDP packet from the network
-   *
-   * @param packet The packet to fill in with the data received
-   *
-   * @exception IOException IOException If an error occurs
-   */
-  protected native synchronized void receive(DatagramPacket packet)
-    throws IOException;
-
-  /**
-   * Joins a multicast group
-   *
-   * @param addr The group to join
-   *
-   * @exception IOException If an error occurs
-   */
-  protected native synchronized void join(InetAddress addr) throws IOException;
-
-  /**
-   * Leaves a multicast group
-   *
-   * @param addr The group to leave
-   *
-   * @exception IOException If an error occurs
-   */
-  protected native synchronized void leave(InetAddress addr) throws IOException;
-
-  /**
-   * Gets the Time to Live value for the socket
-   *
-   * @return The TTL value
-   *
-   * @exception IOException If an error occurs
-   */
-  protected synchronized byte getTTL() throws IOException
-  {
-    Object obj = getOption(IP_TTL);
-
-    if (!(obj instanceof Integer))
-      throw new IOException("Internal Error");
-
-    return(((Integer)obj).byteValue());
-  }
-
-  /**
-   * Sets the Time to Live value for the socket
-   *
-   * @param ttl The new TTL value
-   *
-   * @exception IOException If an error occurs
-   */
-  protected synchronized void setTTL(byte ttl) throws IOException
-  {
-    if (ttl > 0) 
-      setOption(IP_TTL, new Integer(ttl));
-    else
-      setOption(IP_TTL, new Integer(ttl + 256));
-  }
-
-  /**
-   * Gets the Time to Live value for the socket
-   *
-   * @return The TTL value
-   *
-   * @exception IOException If an error occurs
-   */
-  protected synchronized int getTimeToLive() throws IOException
-  {
-    Object obj = getOption(IP_TTL);
-
-    if (!(obj instanceof Integer))
-      throw new IOException("Internal Error");
-
-    return(((Integer)obj).intValue());
-  }
-
-  /**
-   * Sets the Time to Live value for the socket
-   *
-   * @param ttl The new TTL value
-   *
-   * @exception IOException If an error occurs
-   */
-  protected synchronized void setTimeToLive(int ttl) throws IOException
-  {
-    setOption(IP_TTL, new Integer(ttl));
-  }
-
-  /**
-   * Retrieves the value of an option on the socket
-   *
-   * @param option_id The identifier of the option to retrieve
-   *
-   * @return The value of the option
-   *
-   * @exception SocketException If an error occurs
-   */
-  public native synchronized Object getOption(int option_id)
-    throws SocketException;
-
-  /**
-   * Sets the value of an option on the socket
-   *
-   * @param option_id The identifier of the option to set
-   * @param val The value of the option to set
-   *
-   * @exception SocketException If an error occurs
-   */
-  public native synchronized void setOption(int option_id, Object val)
-    throws SocketException;
-
-  public int peekData(DatagramPacket packet)
-  {
-    throw new InternalError
-      ("PlainDatagramSocketImpl::peekData is not implemented");
-  }
-
-  public void joinGroup(SocketAddress address, NetworkInterface netIf)
-  {
-    throw new InternalError
-      ("PlainDatagramSocketImpl::joinGroup is not implemented");
+  protected void join(InetAddress inetaddr) throws IOException
+  {
+    mcastGrp(inetaddr, null, true);
   }
 
-  public void leaveGroup(SocketAddress address, NetworkInterface netIf)
+  protected void leave(InetAddress inetaddr) throws IOException
   {
-    throw new InternalError
-      ("PlainDatagramSocketImpl::leaveGroup is not implemented");
+    mcastGrp(inetaddr, null, false);
+  }
+
+  protected void joinGroup (SocketAddress mcastaddr, NetworkInterface netIf)
+	  throws IOException
+  {
+    mcastGrp(((InetSocketAddress)mcastaddr).getAddress(), netIf, true);
+  }
+
+  protected void leaveGroup (SocketAddress mcastaddr, NetworkInterface netIf)
+	  throws IOException
+  {
+    mcastGrp(((InetSocketAddress)mcastaddr).getAddress(), netIf, false);
+  }
+
+  protected void finalize() throws Throwable
+  {
+    synchronized (this)
+      {
+	if (fnum != -1)
+	  close();
+      }
+    super.finalize();
   }
-} // class PlainDatagramSocketImpl
+}
