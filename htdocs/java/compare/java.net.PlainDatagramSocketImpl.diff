--- /home/tromey/gnu/Nightly/classpath/classpath/java/net/PlainDatagramSocketImpl.java	2003-06-28 02:19:17.000000000 -0600
+++ java/net/PlainDatagramSocketImpl.java	2003-06-28 02:18:20.000000000 -0600
@@ -65,16 +65,37 @@
         System.loadLibrary("javanet");
       }
   }
-
-  /**
-   * Option id for the IP_TTL (time to live) value.
-   */
-  private static final int IP_TTL = 0x1E61; // 7777
+  
+  // These fields are mirrored for use in native code to avoid cpp conflicts
+  // when the #defines in system header files are the same as the public fields.
+  static final int _Jv_TCP_NODELAY_ = SocketOptions.TCP_NODELAY,
+                   _Jv_SO_BINDADDR_ = SocketOptions.SO_BINDADDR,
+                   _Jv_SO_REUSEADDR_ = SocketOptions.SO_REUSEADDR,
+                   _Jv_SO_BROADCAST_ = SocketOptions.SO_BROADCAST,
+                   _Jv_SO_OOBINLINE_ = SocketOptions.SO_OOBINLINE,
+                   _Jv_IP_MULTICAST_IF_ = SocketOptions.IP_MULTICAST_IF,
+                   _Jv_IP_MULTICAST_IF2_ = SocketOptions.IP_MULTICAST_IF2,
+                   _Jv_IP_MULTICAST_LOOP_ = SocketOptions.IP_MULTICAST_LOOP,
+                   _Jv_IP_TOS_ = SocketOptions.IP_TOS,
+                   _Jv_SO_LINGER_ = SocketOptions.SO_LINGER,
+                   _Jv_SO_TIMEOUT_ = SocketOptions.SO_TIMEOUT,
+                   _Jv_SO_SNDBUF_ = SocketOptions.SO_SNDBUF,
+                   _Jv_SO_RCVBUF_ = SocketOptions.SO_RCVBUF,
+                   _Jv_SO_KEEPALIVE_ = SocketOptions.SO_KEEPALIVE;
 
   /**
    * This is the actual underlying file descriptor
    */
-  protected int native_fd = -1;
+  int fnum = -1;
+
+  // FIXME: Is this necessary?  Could it help w/ DatagramSocket.getLocalAddress?
+  // InetAddress address;
+  
+  // localAddress cache  
+  InetAddress localAddress;
+
+  // 'timeout' is set/read by setOption/getOption.
+  int timeout = 0;
 
   /**
    * Default do nothing constructor
@@ -91,15 +112,24 @@
    *
    * @exception SocketException If an error occurs
    */
-  protected native synchronized void bind(int port, InetAddress addr)
-    throws SocketException;
+  protected native void bind(int lport, InetAddress laddr)
+	throws SocketException;
 
+  protected native void connect (InetAddress i, int port)
+	throws SocketException;
+  
+  protected native void disconnect ();
+  
   /**
    * Creates a new datagram socket
    *
    * @exception SocketException If an error occurs
    */
-  protected native synchronized void create() throws SocketException;
+  protected native void create() throws SocketException;
+  
+  protected native int peek(InetAddress i) throws IOException;
+  
+  protected native int peekData (DatagramPacket dp) throws IOException;
 
   /**
    * Sets the Time to Live value for the socket
@@ -108,10 +138,7 @@
    *
    * @exception IOException If an error occurs
    */
-  protected synchronized void setTimeToLive(int ttl) throws IOException
-  {
-    setOption(IP_TTL, new Integer(ttl));
-  }
+  protected native void setTimeToLive(int ttl) throws IOException;
 
   /**
    * Gets the Time to Live value for the socket
@@ -120,29 +147,7 @@
    *
    * @exception IOException If an error occurs
    */
-  protected synchronized int getTimeToLive() throws IOException
-  {
-    Object obj = getOption(IP_TTL);
-
-    if (!(obj instanceof Integer))
-      throw new IOException("Internal Error");
-
-    return(((Integer)obj).intValue());
-  }
-
-  /**
-   * Sends a packet of data to a remote host
-   *
-   * @param addr The address to send to
-   * @param port The port to send to 
-   * @param buf The buffer to send
-   * @param len The length of the data to send
-   *
-   * @exception IOException If an error occurs
-   */
-  private native synchronized void sendto (InetAddress addr, int port,
-                                           byte[] buf, int len)
-    throws IOException;
+  protected native int getTimeToLive() throws IOException;
 
   /**
    * Sends a packet of data to a remote host
@@ -151,11 +156,7 @@
    *
    * @exception IOException If an error occurs
    */
-  protected synchronized void send(DatagramPacket packet) throws IOException
-  {
-    sendto(packet.getAddress(), packet.getPort(), packet.getData(), 
-           packet.getLength());
-  }
+  protected native void send(DatagramPacket p) throws IOException;
 
   /**
    * Receives a UDP packet from the network
@@ -164,8 +165,7 @@
    *
    * @exception IOException IOException If an error occurs
    */
-  protected native synchronized void receive(DatagramPacket packet)
-    throws IOException;
+  protected native void receive(DatagramPacket p) throws IOException;
 
   /**
    * Sets the value of an option on the socket
@@ -175,8 +175,7 @@
    *
    * @exception SocketException If an error occurs
    */
-  public native synchronized void setOption(int option_id, Object val)
-    throws SocketException;
+  public native void setOption(int optID, Object value) throws SocketException;
 
   /**
    * Retrieves the value of an option on the socket
@@ -187,13 +186,15 @@
    *
    * @exception SocketException If an error occurs
    */
-  public native synchronized Object getOption(int option_id)
-    throws SocketException;
+  public native Object getOption(int optID) throws SocketException;
+  
+  private native void mcastGrp(InetAddress inetaddr, NetworkInterface netIf,
+		               boolean join) throws IOException;
 
   /**
    * Closes the socket
    */
-  protected native synchronized void close();
+  protected native void close();
 
   /**
    * Gets the Time to Live value for the socket
@@ -204,14 +205,9 @@
    *
    * @deprecated 1.2
    */
-  protected synchronized byte getTTL() throws IOException
+  protected byte getTTL() throws IOException
   {
-    Object obj = getOption(IP_TTL);
-
-    if (!(obj instanceof Integer))
-      throw new IOException("Internal Error");
-
-    return(((Integer)obj).byteValue());
+    return (byte) getTimeToLive();
   }
 
   /**
@@ -223,12 +219,9 @@
    *
    * @deprecated 1.2
    */
-  protected synchronized void setTTL(byte ttl) throws IOException
+  protected void setTTL(byte ttl) throws IOException
   {
-    if (ttl > 0) 
-      setOption(IP_TTL, new Integer(ttl));
-    else
-      setOption(IP_TTL, new Integer(ttl + 256));
+    setTimeToLive(((int) ttl) & 0xFF);
   }
 
   /**
@@ -238,7 +231,10 @@
    *
    * @exception IOException If an error occurs
    */
-  protected native synchronized void join(InetAddress addr) throws IOException;
+  protected void join(InetAddress inetaddr) throws IOException
+  {
+    mcastGrp(inetaddr, null, true);
+  }
 
   /**
    * Leaves a multicast group
@@ -247,31 +243,30 @@
    *
    * @exception IOException If an error occurs
    */
-  protected native synchronized void leave(InetAddress addr) throws IOException;
-
-  /**
-   * What does this method really do?
-   */
-  protected synchronized int peek(InetAddress addr) throws IOException
+  protected void leave(InetAddress inetaddr) throws IOException
   {
-    throw new IOException("Not Implemented Yet");
+    mcastGrp(inetaddr, null, false);
   }
 
-  public int peekData(DatagramPacket packet)
+  protected void joinGroup (SocketAddress mcastaddr, NetworkInterface netIf)
+	  throws IOException
   {
-    throw new InternalError
-      ("PlainDatagramSocketImpl::peekData is not implemented");
+    mcastGrp(((InetSocketAddress)mcastaddr).getAddress(), netIf, true);
   }
 
-  public void joinGroup(SocketAddress address, NetworkInterface netIf)
+  protected void leaveGroup (SocketAddress mcastaddr, NetworkInterface netIf)
+	  throws IOException
   {
-    throw new InternalError
-      ("PlainDatagramSocketImpl::joinGroup is not implemented");
+    mcastGrp(((InetSocketAddress)mcastaddr).getAddress(), netIf, false);
   }
 
-  public void leaveGroup(SocketAddress address, NetworkInterface netIf)
+  protected void finalize() throws Throwable
   {
-    throw new InternalError
-      ("PlainDatagramSocketImpl::leaveGroup is not implemented");
+    synchronized (this)
+      {
+	if (fnum != -1)
+	  close();
+      }
+    super.finalize();
   }
 }
