--- /home/tromey/gnu/Nightly/classpath/classpath/java/util/List.java	2004-07-30 02:31:35.000000000 -0600
+++ java/util/List.java	2002-06-17 21:02:30.000000000 -0600
@@ -97,8 +97,6 @@
    *         type
    * @throws IllegalArgumentException if o cannot be added to this list for
    *         some other reason
-   * @throws NullPointerException if o is null and this list doesn't support
-   *         the addition of null values.
    */
   void add(int index, Object o);
 
@@ -115,8 +113,6 @@
    *         type
    * @throws IllegalArgumentException if o cannot be added to this list for
    *         some other reason
-   * @throws NullPointerException if o is null and this list doesn't support
-   *         the addition of null values.
    */
   boolean add(Object o);
 
@@ -138,8 +134,6 @@
    *         list due to its type
    * @throws IllegalArgumentException if some element of c cannot be added
    *         to this list for some other reason
-   * @throws NullPointerException if some element of c is null and this list
-   *         doesn't support the addition of null values.
    * @throws NullPointerException if the specified collection is null
    * @see #add(int, Object)
    */
@@ -161,8 +155,6 @@
    * @throws IllegalArgumentException if some element of c cannot be added
    *         to this list for some other reason
    * @throws NullPointerException if the specified collection is null
-   * @throws NullPointerException if some element of c is null and this list
-   *         doesn't support the addition of null values.
    * @see #add(Object)
    */
   boolean addAll(Collection c);
@@ -183,10 +175,6 @@
    *
    * @param o the element to look for
    * @return true if this list contains the element
-   * @throws ClassCastException if the type of o is not a valid type
-   *         for this list.
-   * @throws NullPointerException if o is null and the list doesn't
-   *         support null values.
    */
   boolean contains(Object o);
 
@@ -196,10 +184,6 @@
    * @param c the collection to test for
    * @return true if for every element o in c, contains(o) would return true
    * @throws NullPointerException if the collection is null
-   * @throws ClassCastException if the type of any element in c is not a valid
-   *         type for this list.
-   * @throws NullPointerException if some element of c is null and this
-   *         list does not support null values.
    * @see #contains(Object)
    */
   boolean containsAll(Collection c);
@@ -256,11 +240,7 @@
    *
    * @param o the object to search for
    * @return the least integer n such that <code>o == null ? get(n) == null :
-   *         o.equals(get(n))</code>, or -1 if there is no such index.
-   * @throws ClassCastException if the type of o is not a valid
-   *         type for this list.
-   * @throws NullPointerException if o is null and this
-   *         list does not support null values.
+   *         o.equals(get(n))</code>, or -1 if there is no such index
    */
   int indexOf(Object o);
 
@@ -283,11 +263,7 @@
    * list.
    *
    * @return the greatest integer n such that <code>o == null ? get(n) == null
-   *         : o.equals(get(n))</code>, or -1 if there is no such index.
-   * @throws ClassCastException if the type of o is not a valid
-   *         type for this list.
-   * @throws NullPointerException if o is null and this
-   *         list does not support null values.
+   *         : o.equals(get(n))</code>, or -1 if there is no such index
    */
   int lastIndexOf(Object o);
 
@@ -334,10 +310,6 @@
    *         the list contained at least one occurrence of o
    * @throws UnsupportedOperationException if this list does not support the
    *         remove operation
-   * @throws ClassCastException if the type of o is not a valid
-   *         type for this list.
-   * @throws NullPointerException if o is null and this
-   *         list does not support removing null values.
    */
   boolean remove(Object o);
 
@@ -350,10 +322,6 @@
    * @throws UnsupportedOperationException if this list does not support the
    *         removeAll operation
    * @throws NullPointerException if the collection is null
-   * @throws ClassCastException if the type of any element in c is not a valid
-   *         type for this list.
-   * @throws NullPointerException if some element of c is null and this
-   *         list does not support removing null values.
    * @see #remove(Object)
    * @see #contains(Object)
    */
@@ -369,10 +337,6 @@
    * @throws UnsupportedOperationException if this list does not support the
    *         retainAll operation
    * @throws NullPointerException if the collection is null
-   * @throws ClassCastException if the type of any element in c is not a valid
-   *         type for this list.
-   * @throws NullPointerException if some element of c is null and this
-   *         list does not support retaining null values.
    * @see #remove(Object)
    * @see #contains(Object)
    */
@@ -391,8 +355,6 @@
    *         type
    * @throws IllegalArgumentException if o cannot be added to this list for
    *         some other reason
-   * @throws NullPointerException if o is null and this
-   *         list does not support null values.
    */
   Object set(int index, Object o);
 
@@ -419,6 +381,8 @@
    * @return a List backed by a subsection of this list
    * @throws IndexOutOfBoundsException if fromIndex &lt; 0
    *         || toIndex &gt; size() || fromIndex &gt; toIndex
+   * @throws IllegalArgumentException if fromIndex &gt; toIndex (according to
+   *         AbstractList). Don't you love Sun's inconsistent specifications?
    */
   List subList(int fromIndex, int toIndex);
 
