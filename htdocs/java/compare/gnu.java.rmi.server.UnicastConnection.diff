--- /home/tromey/gnu/classpath/classpath/gnu/java/rmi/server/UnicastConnection.java	Thu Oct 31 12:43:09 2002
+++ gnu/java/rmi/server/UnicastConnection.java	Mon Sep 30 16:13:20 2002
@@ -1,5 +1,5 @@
 /*
-  Copyright (c) 1996, 1997, 1998, 1999, 2002 Free Software Foundation, Inc.
+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -61,10 +61,6 @@
 ObjectInputStream oin;
 ObjectOutputStream oout;
 
-// reviveTime and expireTime make UnicastConnection pool-able
-long reviveTime = 0;
-long expireTime = Long.MAX_VALUE;
-
 UnicastConnection(UnicastConnectionManager man, Socket sock) {
 	this.manager = man;
 	this.sock = sock;
@@ -141,7 +137,7 @@
 
 ObjectInputStream getObjectInputStream() throws IOException {
 	if (oin == null) {
-        oin = new RMIObjectInputStream(din);
+		oin = new RMIObjectInputStream(din, manager);
 	}
 	return (oin);
 }
@@ -157,7 +153,6 @@
 	try {
 	    if(oout != null)
 	        oout.close();
-        sock.close();
 	}
 	catch (IOException _) {
     }
@@ -169,35 +164,17 @@
 	sock = null;
 }
 
-public static final long CONNECTION_TIMEOUT = 10000L;
-
-static boolean isExpired(UnicastConnection conn, long l){
-    if (l <= conn.expireTime )
-        return false;
-    return true;
-}
-
-static void resetTime(UnicastConnection conn){
-    long l = System.currentTimeMillis();
-    conn.reviveTime = l;
-    conn.expireTime = l + CONNECTION_TIMEOUT;
-}
-
 /**
  * We run connects on the server. Dispatch it then discard it.
  */
 public void run() {
-    do{
 	try {
 		UnicastServer.dispatch(this);
-            //don't discardConnection explicitly, only when
-            //  exception happens or the connection's expireTime 
-            //  comes
-        } catch (Exception e ){
 		manager.discardConnection(this);
-            break;
 	}
-    }while(true);
+	catch (Exception e) {
+		e.printStackTrace();
+	}
 }
 
 }
