--- /home/tromey/gnu/Nightly/classpath/classpath/java/nio/channels/spi/AbstractInterruptibleChannel.java	2004-04-13 02:20:24.000000000 -0600
+++ java/nio/channels/spi/AbstractInterruptibleChannel.java	2004-02-15 02:18:27.000000000 -0700
@@ -1,4 +1,4 @@
-/* AbstractInterruptibleChannel.java --
+/* AbstractInterruptibleChannel.java -- 
    Copyright (C) 2002 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
@@ -42,7 +42,6 @@
 import java.nio.channels.Channel;
 import java.nio.channels.InterruptibleChannel;
 
-
 /**
  * @author Michael Koch
  * @since 1.4
@@ -55,25 +54,25 @@
   /**
    * Initializes the channel.
    */
-  protected AbstractInterruptibleChannel()
+  protected AbstractInterruptibleChannel ()
   {
   }
 
   /**
    * Marks the beginning of an I/O operation that might block indefinitely.
    */
-  protected final void begin()
+  protected final void begin ()
   {
   }
-
+    
   /**
    * Closes the channel.
-   *
+   * 
    * @exception IOException If an error occurs
    */
-  public final void close() throws IOException
+  public final void close () throws IOException
   {
-    if (! closed)
+    if (!closed)
       {
 	closed = true;
 	implCloseChannel();
@@ -82,35 +81,29 @@
 
   /**
    * Marks the end of an I/O operation that might block indefinitely.
-   *
-   * @param completed true if the task completed successfully,
-   * false otherwise
-   *
-   * @exception IOException if an error occurs
+   * 
    * @exception AsynchronousCloseException If the channel was asynchronously
    * closed.
    * @exception ClosedByInterruptException If the thread blocked in the
    * I/O operation was interrupted.
    */
-  protected final void end(boolean completed)
+  protected final void end (boolean completed)
     throws AsynchronousCloseException
   {
-  }
+  }   
 
   /**
    * Closes the channel.
-   *
+   * 
    * @exception IOException If an error occurs
    */
-  protected abstract void implCloseChannel() throws IOException;
+  protected abstract void implCloseChannel () throws IOException;
 
   /**
    * Tells whether or not this channel is open.
-   * 
-   * @return true if the channel is open, false otherwise 
    */
-  public final boolean isOpen()
+  public final boolean isOpen ()
   {
-    return ! closed;
+    return !closed;
   }
 }
