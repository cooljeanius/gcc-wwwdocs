--- /home/tromey/gnu/Nightly/classpath/classpath/gnu/java/rmi/rmic/RMIC.java	2003-08-13 02:19:12.000000000 -0600
+++ gnu/java/rmi/rmic/RMIC.java	2002-03-25 15:35:01.000000000 -0700
@@ -43,11 +43,10 @@
 import java.io.IOException;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
-import java.rmi.RemoteException;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.Arrays;
-
+import java.lang.Comparable;
 import gnu.java.rmi.server.RMIHashes;
 
 public class RMIC {
@@ -61,7 +60,7 @@
 private boolean need12Stubs = true;
 private boolean compile = true;
 private boolean verbose;
-private String destination = "";
+private String destination;
 
 private PrintWriter out;
 private TabbedWriter ctrl;
@@ -72,9 +71,7 @@
 private MethodRef[] remotemethods;
 private String stubname;
 private String skelname;
-private int errorCount = 0;
 
-private Class mRemoteInterface;
 public RMIC(String[] a) {
 	args = a;
 }
@@ -113,11 +110,7 @@
 }
 
 private boolean processClass(String classname) throws Exception {
-	errorCount = 0;
 	analyzeClass(classname);
-	if(errorCount > 0) {
-		System.exit(1);
-	}
 	generateStub();
 	if (need11Stubs) {
 		generateSkel();
@@ -138,9 +131,6 @@
 }
 
 private void analyzeClass(String cname) throws Exception {
-	if(verbose){
-			System.out.println("[analyze class "+cname+"]");
-		}
 	int p = cname.lastIndexOf('.');
 	if (p != -1) {
 		classname = cname.substring(p+1);
@@ -150,35 +140,26 @@
 	}
 	fullclassname = cname;
 
-	
 	HashSet rmeths = new HashSet();
 	findClass();
-	
-	// get the remote interface
-	mRemoteInterface = getRemoteInterface(clazz);
-	if(mRemoteInterface == null)
-		return;
-	if(verbose){
-		System.out.println("[implements "+mRemoteInterface.getName()+"]");
-	}
-
-	// check if the methods of the remote interface declare RemoteExceptions
-	Method[] meths = mRemoteInterface.getDeclaredMethods();
-	for (int i = 0; i < meths.length; i++) {
-		Class[] exceptions = meths[i].getExceptionTypes();
-		int index = 0;
-		for(;index < exceptions.length; index++){
-			if(exceptions[index].equals(RemoteException.class)){
-				break;
-			}
-		}
-		if (index < exceptions.length) {
-			rmeths.add(meths[i]);
-		} else {
-			logError("Method "+meths[i]+" does not throw a java.rmi.RemoteException");
+	for (Class cls = clazz; cls != null; cls = cls.getSuperclass()) {
+		// Keep going down the inheritence tree until we hit the system
+		if (cls.getName().startsWith("java.")) {
+			break;
 		}
-	}
 
+		Method[] meths = cls.getDeclaredMethods();
+		for (int i = 0; i < meths.length; i++) {
+			// Only include public methods
+			int mods = meths[i].getModifiers();
+			if (Modifier.isPublic(mods) && !Modifier.isStatic(mods)) {
+				// Should check exceptions here. - XXX
+
+				// Add this one in.
+				rmeths.add(meths[i]);
+			}
+		}
+	}
 
 	// Convert into a MethodRef array and sort them
 	remotemethods = new MethodRef[rmeths.size()];
@@ -199,7 +180,7 @@
 
 private void generateStub() throws IOException {
 	stubname = classname + "_Stub";
-	ctrl = new TabbedWriter(new FileWriter(destination + File.separator + stubname + ".java"));
+	ctrl = new TabbedWriter(new FileWriter(stubname + ".java"));
 	out = new PrintWriter(ctrl);
 
 	if (verbose) {
@@ -297,7 +278,7 @@
 		for (int i = 0; i < remotemethods.length; i++) {
 			Method m = remotemethods[i].meth;
 			out.print("$method_" + m.getName() + "_" + i + " = ");
-			out.print(mRemoteInterface.getName() + ".class.getMethod(\"" + m.getName() + "\"");
+			out.print(fullclassname + ".class.getMethod(\"" + m.getName() + "\"");
 			out.print(", new java.lang.Class[] {");
 			// Output signature
 			Class[] sig = m.getParameterTypes();
@@ -620,7 +601,7 @@
 
 private void generateSkel() throws IOException {
 	skelname = classname + "_Skel";
-	ctrl = new TabbedWriter(new FileWriter(destination + File.separator + skelname + ".java"));
+	ctrl = new TabbedWriter(new FileWriter(skelname + ".java"));
 	out = new PrintWriter(ctrl);
 
 	if (verbose) {
@@ -980,35 +961,6 @@
 	}
 }
 
-/**
- * Looks for the java.rmi.Remote interface that that is implemented by theClazz.
- * @param theClazz the class to look in  
- * @return the Remote interface of theClazz or null if theClazz does not implement a Remote interface
- */
-private Class getRemoteInterface(Class theClazz)
-{
-	Class[] interfaces = theClazz.getInterfaces();
-	for (int i = 0; i < interfaces.length; i++)
-	{
-		if (java.rmi.Remote.class.isAssignableFrom(interfaces[i]))
-		{
-			return interfaces[i];
-		}
-	}
-	logError("Class "+ theClazz.getName()
-			+ " is not a remote object. It does not implement an interface that is a java.rmi.Remote-interface.");
-	return null;
-}
-	
-/**
- * Prints an error to System.err and increases the error count.
- * @param theError
- */
-private void logError(String theError){
-	errorCount++;
-	System.err.println("error:"+theError);
-}
-
 private static void error(String message) {
 	System.err.println("rmic: " + message);
 	System.err.println("Try `rmic --help' for more information.");
