--- /home/tromey/gnu/Nightly/classpath/classpath/java/nio/ByteBufferHelper.java	2004-06-21 06:23:58.000000000 -0600
+++ java/nio/ByteBufferHelper.java	2004-02-09 02:18:24.000000000 -0700
@@ -42,6 +42,32 @@
  */
 final class ByteBufferHelper
 {
+  private static void checkRemainingForRead (ByteBuffer buffer, int bytes)
+  {
+    if (buffer.remaining() < bytes)
+      throw new BufferUnderflowException();
+  }
+  
+  private static void checkRemainingForWrite (ByteBuffer buffer, int bytes)
+  {
+    if (buffer.remaining() < bytes)
+      throw new BufferOverflowException();
+  }
+
+  private static void checkAvailableForRead (ByteBuffer buffer,
+					     int index, int bytes)
+  {
+    if (buffer.limit() < (index + bytes))
+      throw new BufferUnderflowException();
+  }
+  
+  private static void checkAvailableForWrite (ByteBuffer buffer,
+					      int index, int bytes)
+  {
+    if (buffer.limit() < (index + bytes))
+      throw new BufferOverflowException();
+  }
+  
   public static char getChar (ByteBuffer buffer, ByteOrder order)
   {
     return (char) getShort (buffer, order);
@@ -65,7 +91,7 @@
 
   public static short getShort (ByteBuffer buffer, ByteOrder order)
   {
-    buffer.checkForUnderflow(2);
+    checkRemainingForRead (buffer, 2);
 
     if (order == ByteOrder.LITTLE_ENDIAN)
       {
@@ -79,7 +105,7 @@
   
   public static void putShort (ByteBuffer buffer, short value, ByteOrder order)
   {
-    buffer.checkForOverflow(2);
+    checkRemainingForWrite (buffer, 2);
 
     if (order == ByteOrder.LITTLE_ENDIAN)
       {
@@ -96,6 +122,8 @@
   public static short getShort (ByteBuffer buffer,
 				      int index, ByteOrder order)
   {
+    checkAvailableForRead (buffer, index, 2);
+
     if (order == ByteOrder.LITTLE_ENDIAN)
       {
         return (short) ((buffer.get (index) & 0xff)
@@ -109,6 +137,8 @@
   public static void putShort (ByteBuffer buffer, int index,
 			       short value, ByteOrder order)
   {
+    checkAvailableForWrite (buffer, index, 2);
+
     if (order == ByteOrder.LITTLE_ENDIAN)
       {
         buffer.put (index, (byte) value);
@@ -123,7 +153,7 @@
 
   public static int getInt (ByteBuffer buffer, ByteOrder order)
   {
-    buffer.checkForUnderflow(4);
+    checkRemainingForRead (buffer, 4);
 
     if (order == ByteOrder.LITTLE_ENDIAN)
       {
@@ -141,7 +171,7 @@
   
   public static void putInt (ByteBuffer buffer, int value, ByteOrder order)
   {
-    buffer.checkForOverflow(4);
+    checkRemainingForWrite (buffer, 4);
 
     if (order == ByteOrder.LITTLE_ENDIAN)
       {
@@ -161,6 +191,8 @@
   
   public static int getInt (ByteBuffer buffer, int index, ByteOrder order)
   {
+    checkAvailableForRead (buffer, index, 4);
+
     if (order == ByteOrder.LITTLE_ENDIAN)
       {
         return ((buffer.get (index) & 0xff)
@@ -178,6 +210,8 @@
   public static void putInt (ByteBuffer buffer, int index,
 				   int value, ByteOrder order)
   {
+    checkAvailableForWrite (buffer, index, 4);
+
     if (order == ByteOrder.LITTLE_ENDIAN)
       {
         buffer.put (index, (byte) value);
@@ -196,7 +230,7 @@
 
   public static long getLong (ByteBuffer buffer, ByteOrder order)
   {
-    buffer.checkForUnderflow(8);
+    checkRemainingForRead (buffer, 8);
 
     if (order == ByteOrder.LITTLE_ENDIAN)
       {
@@ -222,7 +256,7 @@
   
   public static void putLong (ByteBuffer buffer, long value, ByteOrder order)
   {
-    buffer.checkForOverflow(8);
+    checkRemainingForWrite (buffer, 8);
 
     if (order == ByteOrder.LITTLE_ENDIAN)
       {
@@ -250,6 +284,8 @@
   
   public static long getLong (ByteBuffer buffer, int index, ByteOrder order)
   {
+    checkAvailableForRead (buffer, index, 8);
+
     if (order == ByteOrder.LITTLE_ENDIAN)
       {
         return ((buffer.get (index) & 0xff)
@@ -275,6 +311,8 @@
   public static void putLong (ByteBuffer buffer, int index,
 				    long value, ByteOrder order)
   {
+    checkAvailableForWrite (buffer, index, 8);
+
     if (order == ByteOrder.LITTLE_ENDIAN)
       {
         buffer.put (index, (byte) value);
