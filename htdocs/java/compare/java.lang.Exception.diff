--- /home/tromey/gnu/egcs/classpath/classpath/java/lang/Exception.java	Sat Mar  2 12:13:11 2002
+++ java/lang/Exception.java	Tue Jan 22 16:01:34 2002
@@ -1,6 +1,6 @@
 /* Exception.java -- generic exception thrown to indicate an exceptional
    condition has occurred.
-   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.
+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -8,7 +8,7 @@
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2, or (at your option)
 any later version.
-
+ 
 GNU Classpath is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
@@ -39,66 +39,40 @@
 
 package java.lang;
 
+/* Written using "Java Class Libraries", 2nd edition, ISBN 0-201-31002-3
+ * "The Java Language Specification", ISBN 0-201-63451-1
+ * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.
+ * Status:  Believed complete and correct.
+ */
+
 /**
- * The root class of all exceptions worth catching in a program.  This
- * includes the special category of <code>RuntimeException</code>, which
- * does not need to be declared in a throws clause.  Exceptions can be used
- * to represent almost any exceptional behavior, such as programming errors,
+ * Exceptions may be thrown by one part of a Java program and caught
+ * by another in order to deal with the cause of the exception, such as
  * mouse movements, keyboard clicking, etc.
  *
+ * @since JDK 1.0
+ * 
  * @author Brian Jones
  * @author Warren Levy <warrenl@cygnus.com>
- * @author Eric Blake <ebb9@email.byu.edu>
- * @status updated to 1.4
+ * @date September 18, 1998.
  */
 public class Exception extends Throwable
 {
-  /**
-   * Compatible with JDK 1.0+.
-   */
-  private static final long serialVersionUID = -3387516993124229948L;
+  static final long serialVersionUID = -3387516993124229948L;
 
   /**
-   * Create an exception without a message. The cause remains uninitialized.
-   *
-   * @see #initCause(Throwable)
+   * Create an exception without a message.
    */
   public Exception()
-  {
-  }
+    {
+      super();
+    }
 
   /**
-   * Create an exception with a message. The cause remains uninitialized.
-   *
-   * @param s the message
-   * @see #initCause(Throwable)
+   * Create an exception with a message.
    */
   public Exception(String s)
-  {
-    super(s);
-  }
-
-  /**
-   * Create an exception with a message and a cause.
-   *
-   * @param s the message string
-   * @param cause the cause of this error
-   * @since 1.4
-   */
-  public Exception(String s, Throwable cause)
-  {
-    super(s, cause);
-  }
-
-  /**
-   * Create an exception with a given cause, and a message of
-   * <code>cause == null ? null : cause.toString()</code>.
-   *
-   * @param cause the cause of this exception
-   * @since 1.4
-   */
-  public Exception(Throwable cause)
-  {
-    super(cause);
-  }
+    {
+      super(s);
+    }
 }
