--- /home/tromey/gnu/Nightly/classpath/classpath/java/nio/DoubleBuffer.java	Fri Dec 20 08:28:35 2002
+++ java/nio/DoubleBuffer.java	Thu Feb 20 02:17:58 2003
@@ -41,12 +41,12 @@
 
 public abstract class DoubleBuffer extends Buffer implements Comparable
 {
-  private ByteOrder endian = ByteOrder.BIG_ENDIAN;
   protected double [] backing_buffer;
+  protected int array_offset;
 
   public static DoubleBuffer allocateDirect(int capacity)
   {
-    return new DoubleBufferImpl(capacity, 0, capacity);
+    throw new Error ("direct buffers are not implemented");
   }
 
   public static DoubleBuffer allocate(int capacity)
@@ -77,6 +77,11 @@
     return wrap(array, 0, array.length);
   }
 
+  DoubleBuffer (int capacity, int limit, int position, int mark)
+  {
+    super (capacity, limit, position, mark);
+  }
+  
   public DoubleBuffer get (double[] dst, int offset, int length)
   {
     for (int i = offset; i < offset + length; i++)
@@ -87,12 +92,12 @@
     return this;
   }
 
-  public DoubleBuffer get(double[] dst)
+  public DoubleBuffer get (double[] dst)
   {
     return get(dst, 0, dst.length);
   }
 
-  public DoubleBuffer put(DoubleBuffer src)
+  public DoubleBuffer put (DoubleBuffer src)
   {
     while (src.hasRemaining())
       put(src.get());
@@ -115,17 +120,30 @@
 
   public final boolean hasArray()
   {
-    return (backing_buffer != null);
+    return (backing_buffer != null
+            && !isReadOnly ());
   }
 
   public final double[] array()
   {
+    if (backing_buffer == null)
+      throw new UnsupportedOperationException ();
+
+    if (isReadOnly ())
+      throw new ReadOnlyBufferException ();
+    
     return backing_buffer;
   }
 
   public final int arrayOffset()
   {
-    return 0;
+    if (backing_buffer == null)
+      throw new UnsupportedOperationException ();
+
+    if (isReadOnly ())
+      throw new ReadOnlyBufferException ();
+    
+    return array_offset;
   }
 
   public int hashCode()
@@ -172,17 +190,7 @@
     return 0;
   }
 
-  public ByteOrder order()
-  {
-    return endian;
-  }
-
-  public final DoubleBuffer order(ByteOrder bo)
-  {
-    endian = bo;
-    return this;
-  }
-
+  public abstract ByteOrder order ();
   public abstract double get();
   public abstract DoubleBuffer put (double b);
   public abstract double get(int index);
