--- /home/tromey/gnu/Nightly/classpath/classpath/gnu/java/nio/MappedByteFileBuffer.java	Mon Apr  7 02:24:16 2003
+++ gnu/java/nio/MappedByteFileBuffer.java	Sun Mar 23 02:18:01 2003
@@ -37,7 +37,6 @@
 
 package gnu.java.nio;
 
-import java.io.IOException;
 import java.nio.ByteBuffer;
 import java.nio.CharBuffer;
 import java.nio.DoubleBuffer;
@@ -46,104 +45,405 @@
 import java.nio.LongBuffer;
 import java.nio.ShortBuffer;
 import java.nio.MappedByteBuffer;
-import gnu.classpath.RawData;
+import java.io.IOException;
+import gnu.gcj.RawData;
 
 final public class MappedByteFileBuffer
   extends MappedByteBuffer
 {
-  public RawData map_address;
+  RawData map_address;
   boolean readOnly;
   boolean direct;
   public FileChannelImpl ch;
   
-  public MappedByteFileBuffer(FileChannelImpl ch)
+  public MappedByteFileBuffer (FileChannelImpl ch) throws IOException
   {
-    // FIXME
-    super (0, 0, 0, 0);
+    super ((int) ch.size (), (int) ch.size (), 0, -1);
+    
     this.ch = ch;
     map_address = ch.map_address;
+    
+    try
+      {
+        long si = ch.size () / 1;
+        limit ((int) si);
+      }
+    catch (IOException e)
+      {
+        System.err.println ("failed to get size of file-channel's file");
+      }
   }
   
-  public MappedByteFileBuffer(MappedByteFileBuffer b)
+  public MappedByteFileBuffer (MappedByteFileBuffer b)
   {
-    // FIXME
-    super (0, 0, 0, 0);
-    this.readOnly = b.readOnly;
+    // FIXME: fix last value
+    super (b.capacity (), b.limit (), b.position (), -1);
+    
+    this.readOnly = b.isReadOnly ();
     this.ch = b.ch;
     map_address = b.map_address;
+    limit (b.limit ());
   }
-  
+
   public boolean isReadOnly ()
   {
     return readOnly;
   }
-  public static native byte nio_read_Byte_file_channel(FileChannelImpl ch, int index, int limit, RawData address); public static native void nio_write_Byte_file_channel(FileChannelImpl ch, int index, int limit, byte value, RawData address);
-  public static native short nio_read_Short_file_channel(FileChannelImpl ch, int index, int limit, RawData address); public static native void nio_write_Short_file_channel(FileChannelImpl ch, int index, int limit, short value, RawData address);
-  public static native char nio_read_Char_file_channel(FileChannelImpl ch, int index, int limit, RawData address); public static native void nio_write_Char_file_channel(FileChannelImpl ch, int index, int limit, char value, RawData address);
-  public static native int nio_read_Int_file_channel(FileChannelImpl ch, int index, int limit, RawData address); public static native void nio_write_Int_file_channel(FileChannelImpl ch, int index, int limit, int value, RawData address);
-  public static native long nio_read_Long_file_channel(FileChannelImpl ch, int index, int limit, RawData address); public static native void nio_write_Long_file_channel(FileChannelImpl ch, int index, int limit, long value, RawData address);
-  public static native float nio_read_Float_file_channel(FileChannelImpl ch, int index, int limit, RawData address); public static native void nio_write_Float_file_channel(FileChannelImpl ch, int index, int limit, float value, RawData address);
-  public static native double nio_read_Double_file_channel(FileChannelImpl ch, int index, int limit, RawData address); public static native void nio_write_Double_file_channel(FileChannelImpl ch, int index, int limit, double value, RawData address);
-
-  final public byte get()
-  {
-    byte a = MappedByteFileBuffer.nio_read_Byte_file_channel(ch, position(), limit(), map_address);
-    position(position() + 1);
+  
+  public static native byte nio_read_Byte_file_channel (FileChannelImpl ch,
+                                                        int index, int limit,
+                                                        RawData map_address);
+  public static native void nio_write_Byte_file_channel (FileChannelImpl ch,
+                                                         int index, int limit,
+                                                         byte value,
+                                                         RawData map_address);
+  public static native short nio_read_Short_file_channel (FileChannelImpl ch,
+                                                          int index, int limit,
+                                                          RawData map_address);
+  public static native void nio_write_Short_file_channel (FileChannelImpl ch,
+                                                          int index, int limit,
+                                                          short value,
+                                                          RawData map_address);
+  public static native char nio_read_Char_file_channel (FileChannelImpl ch,
+                                                        int index, int limit,
+                                                        RawData map_address);
+  public static native void nio_write_Char_file_channel (FileChannelImpl ch,
+                                                         int index, int limit,
+                                                         char value,
+                                                         RawData map_address);
+  public static native int nio_read_Int_file_channel (FileChannelImpl ch,
+                                                      int index, int limit,
+                                                      RawData map_address);
+  public static native void nio_write_Int_file_channel (FileChannelImpl ch,
+                                                        int index, int limit,
+                                                        int value,
+                                                        RawData map_address);
+  public static native long nio_read_Long_file_channel (FileChannelImpl ch,
+                                                        int index, int limit,
+                                                        RawData map_address);
+  public static native void nio_write_Long_file_channel (FileChannelImpl ch,
+                                                         int index, int limit,
+                                                         long value,
+                                                         RawData map_address);
+  public static native float nio_read_Float_file_channel (FileChannelImpl ch,
+                                                          int index, int limit,
+                                                          RawData map_address);
+  public static native void nio_write_Float_file_channel (FileChannelImpl ch,
+                                                          int index, int limit,
+                                                          float value,
+                                                          RawData map_address);
+  public static native double
+    nio_read_Double_file_channel (FileChannelImpl ch, int index, int limit,
+                                  RawData map_address);
+  public static native void nio_write_Double_file_channel (FileChannelImpl ch,
+                                                           int index, int limit,
+                                                           double value,
+                                                           RawData map_address);
+
+  final public byte get ()
+  {
+    byte a = MappedByteFileBuffer.nio_read_Byte_file_channel (ch, position (),
+                                                              limit (),
+                                                              map_address);
+    position (position () + 1);
     return a;
   }
 
-  final public ByteBuffer put(byte b)
+  final public ByteBuffer put (byte b)
   {
-    MappedByteFileBuffer.nio_write_Byte_file_channel(ch, position(), limit(), b, map_address);
-    position(position() + 1);
+    MappedByteFileBuffer.nio_write_Byte_file_channel (ch, position (), limit (),
+                                                      b, map_address);
+    position (position () + 1);
     return this;
   }
 
-  final public byte get(int index)
+  final public byte get (int index)
   {
-    byte a = MappedByteFileBuffer.nio_read_Byte_file_channel(ch, index, limit(), map_address);
+    byte a = MappedByteFileBuffer.nio_read_Byte_file_channel (ch, index,
+                                                              limit (),
+                                                              map_address);
     return a;
   }
 
-  final public ByteBuffer put(int index, byte b)
+  final public ByteBuffer put (int index, byte b)
   {
-    MappedByteFileBuffer.nio_write_Byte_file_channel(ch, index, limit(), b, map_address);
+    MappedByteFileBuffer.nio_write_Byte_file_channel (ch, index, limit (), b,
+                                                      map_address);
     return this;
   }
 
-  final public ByteBuffer compact()
+  final public ByteBuffer compact ()
   {
     return this;
   }
 
-  final public boolean isDirect()
+  final public boolean isDirect ()
   {
     return direct;
   }
 
-  final public ByteBuffer slice()
+  final public ByteBuffer slice ()
   {
-    MappedByteFileBuffer A = new MappedByteFileBuffer(this);
+    MappedByteFileBuffer A = new MappedByteFileBuffer (this);
     return A;
   }
 
-  public ByteBuffer duplicate()
+  public ByteBuffer duplicate ()
   {
-    return new MappedByteFileBuffer(this);
+    return new MappedByteFileBuffer (this);
   }
 
-  public ByteBuffer asReadOnlyBuffer()
+  public ByteBuffer asReadOnlyBuffer ()
   {
-    MappedByteFileBuffer b = new MappedByteFileBuffer(this);
+    MappedByteFileBuffer b = new MappedByteFileBuffer (this);
     b.readOnly = true;
     return b;
   }
 
-  final public ByteBuffer asByteBuffer() { ByteBuffer res = new MappedByteFileBuffer(ch); res.limit((limit()*1)/1); return res; } final public byte getByte() { byte a = MappedByteFileBuffer.nio_read_Byte_file_channel(ch, position(), limit(), map_address); position(position() + 1); return a; } final public ByteBuffer putByte(byte value) { MappedByteFileBuffer.nio_write_Byte_file_channel(ch, position(), limit(), value, map_address); position(position() + 1); return this; } final public byte getByte(int index) { byte a = MappedByteFileBuffer.nio_read_Byte_file_channel(ch, index, limit(), map_address); return a; } final public ByteBuffer putByte(int index, byte value) { MappedByteFileBuffer.nio_write_Byte_file_channel(ch, index, limit(), value, map_address); return this; };
-  final public CharBuffer asCharBuffer() { CharBuffer res = new MappedCharFileBuffer(ch); res.limit((limit()*1)/2); return res; } final public char getChar() { char a = MappedByteFileBuffer.nio_read_Char_file_channel(ch, position(), limit(), map_address); position(position() + 1); return a; } final public ByteBuffer putChar(char value) { MappedByteFileBuffer.nio_write_Char_file_channel(ch, position(), limit(), value, map_address); position(position() + 1); return this; } final public char getChar(int index) { char a = MappedByteFileBuffer.nio_read_Char_file_channel(ch, index, limit(), map_address); return a; } final public ByteBuffer putChar(int index, char value) { MappedByteFileBuffer.nio_write_Char_file_channel(ch, index, limit(), value, map_address); return this; };
-  final public ShortBuffer asShortBuffer() { ShortBuffer res = new MappedShortFileBuffer(ch); res.limit((limit()*1)/2); return res; } final public short getShort() { short a = MappedByteFileBuffer.nio_read_Short_file_channel(ch, position(), limit(), map_address); position(position() + 1); return a; } final public ByteBuffer putShort(short value) { MappedByteFileBuffer.nio_write_Short_file_channel(ch, position(), limit(), value, map_address); position(position() + 1); return this; } final public short getShort(int index) { short a = MappedByteFileBuffer.nio_read_Short_file_channel(ch, index, limit(), map_address); return a; } final public ByteBuffer putShort(int index, short value) { MappedByteFileBuffer.nio_write_Short_file_channel(ch, index, limit(), value, map_address); return this; };
-  final public IntBuffer asIntBuffer() { IntBuffer res = new MappedIntFileBuffer(ch); res.limit((limit()*1)/4); return res; } final public int getInt() { int a = MappedByteFileBuffer.nio_read_Int_file_channel(ch, position(), limit(), map_address); position(position() + 1); return a; } final public ByteBuffer putInt(int value) { MappedByteFileBuffer.nio_write_Int_file_channel(ch, position(), limit(), value, map_address); position(position() + 1); return this; } final public int getInt(int index) { int a = MappedByteFileBuffer.nio_read_Int_file_channel(ch, index, limit(), map_address); return a; } final public ByteBuffer putInt(int index, int value) { MappedByteFileBuffer.nio_write_Int_file_channel(ch, index, limit(), value, map_address); return this; };
-  final public LongBuffer asLongBuffer() { LongBuffer res = new MappedLongFileBuffer(ch); res.limit((limit()*1)/8); return res; } final public long getLong() { long a = MappedByteFileBuffer.nio_read_Long_file_channel(ch, position(), limit(), map_address); position(position() + 1); return a; } final public ByteBuffer putLong(long value) { MappedByteFileBuffer.nio_write_Long_file_channel(ch, position(), limit(), value, map_address); position(position() + 1); return this; } final public long getLong(int index) { long a = MappedByteFileBuffer.nio_read_Long_file_channel(ch, index, limit(), map_address); return a; } final public ByteBuffer putLong(int index, long value) { MappedByteFileBuffer.nio_write_Long_file_channel(ch, index, limit(), value, map_address); return this; };
-  final public FloatBuffer asFloatBuffer() { FloatBuffer res = new MappedFloatFileBuffer(ch); res.limit((limit()*1)/4); return res; } final public float getFloat() { float a = MappedByteFileBuffer.nio_read_Float_file_channel(ch, position(), limit(), map_address); position(position() + 1); return a; } final public ByteBuffer putFloat(float value) { MappedByteFileBuffer.nio_write_Float_file_channel(ch, position(), limit(), value, map_address); position(position() + 1); return this; } final public float getFloat(int index) { float a = MappedByteFileBuffer.nio_read_Float_file_channel(ch, index, limit(), map_address); return a; } final public ByteBuffer putFloat(int index, float value) { MappedByteFileBuffer.nio_write_Float_file_channel(ch, index, limit(), value, map_address); return this; };
-  final public DoubleBuffer asDoubleBuffer() { DoubleBuffer res = new MappedDoubleFileBuffer(ch); res.limit((limit()*1)/8); return res; } final public double getDouble() { double a = MappedByteFileBuffer.nio_read_Double_file_channel(ch, position(), limit(), map_address); position(position() + 1); return a; } final public ByteBuffer putDouble(double value) { MappedByteFileBuffer.nio_write_Double_file_channel(ch, position(), limit(), value, map_address); position(position() + 1); return this; } final public double getDouble(int index) { double a = MappedByteFileBuffer.nio_read_Double_file_channel(ch, index, limit(), map_address); return a; } final public ByteBuffer putDouble(int index, double value) { MappedByteFileBuffer.nio_write_Double_file_channel(ch, index, limit(), value, map_address); return this; };
+  final public ByteBuffer asByteBuffer ()
+  {
+//     ByteBuffer res = new MappedByteFileBuffer (ch);
+//     res.limit ((limit () * 1) / 1);
+//     return res;
+    throw new Error ("not implemented");
+  }
+  
+  final public byte getByte ()
+  {
+    byte a = nio_read_Byte_file_channel (ch, position (), limit (),
+                                         map_address);
+    position (position () + 1);
+    return a;
+  }
+  
+  final public ByteBuffer putByte (byte value)
+  {
+    nio_write_Byte_file_channel (ch, position (), limit (), value, map_address);
+    position (position () + 1);
+    return this;
+  }
+  
+  final public byte getByte (int index)
+  {
+    byte a = nio_read_Byte_file_channel (ch, index, limit(), map_address);
+    return a;
+  }
+  
+  final public ByteBuffer putByte (int index, byte value)
+  {
+    nio_write_Byte_file_channel (ch, index, limit (), value, map_address);
+    return this;
+  };
+  
+  final public CharBuffer asCharBuffer ()
+  {
+//     CharBuffer res = new MappedCharFileBuffer (ch);
+//     res.limit ((limit () * 1) / 2);
+//     return res;
+    throw new Error ("not implemented");
+  }
+
+  final public char getChar ()
+  {
+    char a = nio_read_Char_file_channel (ch, position (), limit (),
+                                         map_address);
+    position (position () + 1);
+    return a;
+  }
+  
+  final public ByteBuffer putChar (char value)
+  {
+    nio_write_Char_file_channel (ch, position (), limit (), value, map_address);
+    position (position () + 1);
+    return this;
+  }
+  
+  final public char getChar (int index)
+  {
+    char a = nio_read_Char_file_channel (ch, index, limit (), map_address);
+    return a;
+  }
+  
+  final public ByteBuffer putChar (int index, char value)
+  {
+    nio_write_Char_file_channel (ch, index, limit (), value, map_address);
+    return this;
+  };
+
+  final public ShortBuffer asShortBuffer ()
+  {
+//     ShortBuffer res = new MappedShortFileBuffer (ch);
+//     res.limit ((limit () * 1) / 2);
+//     return res;
+    throw new Error ("not implemented");
+  }
+  
+  final public short getShort ()
+  {
+    short a = nio_read_Short_file_channel (ch, position (), limit (),
+                                           map_address);
+    position (position () + 1);
+    return a;
+  }
+  
+  final public ByteBuffer putShort (short value)
+  {
+    nio_write_Short_file_channel (ch, position (), limit (), value,
+                                  map_address);
+    position (position () + 1);
+    return this;
+  }
+  
+  final public short getShort (int index)
+  {
+    short a = nio_read_Short_file_channel (ch, index, limit (), map_address);
+    return a;
+  }
+  
+  final public ByteBuffer putShort (int index, short value)
+  {
+    nio_write_Short_file_channel (ch, index, limit (), value, map_address);
+    return this;
+  }
+
+  final public IntBuffer asIntBuffer ()
+  {
+//     IntBuffer res = new MappedIntFileBuffer (ch);
+//     res.limit ((limit () * 1) / 4);
+//     return res;
+    throw new Error ("not implemented");
+  }
+  
+  final public int getInt ()
+  {
+    int a = nio_read_Int_file_channel (ch, position (), limit (), map_address);
+    position (position () + 1);
+    return a;
+  }
+  
+  final public ByteBuffer putInt (int value)
+  {
+    nio_write_Int_file_channel (ch, position (), limit (), value, map_address);
+    position (position () + 1);
+    return this;
+  }
+  
+  final public int getInt (int index)
+  {
+    int a = nio_read_Int_file_channel (ch, index, limit (), map_address);
+    return a;
+  }
+  
+  final public ByteBuffer putInt (int index, int value)
+  {
+    nio_write_Int_file_channel (ch, index, limit (), value, map_address);
+    return this;
+  }
+
+  final public LongBuffer asLongBuffer ()
+  {
+//     LongBuffer res = new MappedLongFileBuffer (ch);
+//     res.limit ((limit () * 1) / 8);
+//     return res;
+    throw new Error ("not implemented");
+  }
+  
+  final public long getLong ()
+  {
+    long a = nio_read_Long_file_channel (ch, position (), limit (),
+                                         map_address);
+    position (position () + 1);
+    return a;
+  }
+  
+  final public ByteBuffer putLong (long value)
+  {
+    nio_write_Long_file_channel (ch, position (), limit (), value, map_address);
+    position (position () + 1);
+    return this;
+  }
+  
+  final public long getLong (int index)
+  {
+    long a = nio_read_Long_file_channel (ch, index, limit (), map_address);
+    return a;
+  }
+  
+  final public ByteBuffer putLong (int index, long value)
+  {
+    nio_write_Long_file_channel (ch, index, limit (), value, map_address);
+    return this;
+  }
+
+  final public FloatBuffer asFloatBuffer ()
+  {
+//     FloatBuffer res = new MappedFloatFileBuffer (ch);
+//     res.limit ((limit () * 1) / 4);
+//     return res;
+    throw new Error ("not implemented");
+  }
+  
+  final public float getFloat ()
+  {
+    float a = nio_read_Float_file_channel (ch, position (), limit (),
+                                           map_address);
+    position (position () + 1);
+    return a;
+  }
+  
+  final public ByteBuffer putFloat (float value)
+  {
+    nio_write_Float_file_channel (ch, position (), limit (), value,
+                                  map_address);
+    position (position () + 1);
+    return this;
+  }
+  
+  final public float getFloat (int index)
+  {
+    float a = nio_read_Float_file_channel (ch, index, limit (), map_address);
+    return a;
+  }
+  
+  final public ByteBuffer putFloat (int index, float value)
+  {
+    nio_write_Float_file_channel (ch, index, limit (), value, map_address);
+    return this;
+  }
+
+  final public DoubleBuffer asDoubleBuffer ()
+  {
+//     DoubleBuffer res = new MappedDoubleFileBuffer (ch);
+//     res.limit ((limit () * 1) / 8);
+//     return res;
+    throw new Error ("not implemented");
+  }
+  
+  final public double getDouble ()
+  {
+    double a = nio_read_Double_file_channel (ch, position (), limit (),
+                                             map_address);
+    position (position () + 1);
+    return a;
+  }
+  
+  final public ByteBuffer putDouble (double value)
+  {
+    nio_write_Double_file_channel (ch, position (), limit (), value,
+                                   map_address);
+    position (position () + 1);
+    return this;
+  }
+  
+  final public double getDouble (int index)
+  {
+    double a = nio_read_Double_file_channel (ch, index, limit (), map_address);
+    return a;
+  }
+  
+  final public ByteBuffer putDouble (int index, double value)
+  {
+    nio_write_Double_file_channel (ch, index, limit (), value, map_address);
+    return this;
+  }
 }
