--- /home/tromey/gnu/classpath/classpath/java/util/zip/ZipEntry.java	Fri Nov 29 21:37:14 2002
+++ java/util/zip/ZipEntry.java	Sat Jun 15 12:31:13 2002
@@ -55,18 +55,19 @@
   private static int KNOWN_CRC    = 4;
   private static int KNOWN_TIME   = 8;
 
-  private static Calendar cal;
+  private static Calendar cal = Calendar.getInstance();
 
   private String name;
   private int size;
   private int compressedSize;
   private int crc;
-  private int dostime;
+  private int time;
   private short known = 0;
   private short method = -1;
   private byte[] extra = null;
   private String comment = null;
 
+  int zipFileIndex = -1;  /* used by ZipFile */
   int flags;              /* used by ZipOutputStream */
   int offset;             /* used by ZipFile and ZipOutputStream */
 
@@ -103,24 +104,53 @@
     size = e.size;
     compressedSize = e.compressedSize;
     crc = e.crc;
-    dostime = e.dostime;
+    time = e.time;
     method = e.method;
     extra = e.extra;
     comment = e.comment;
   }
 
-  final void setDOSTime(int dostime)
+  void setDOSTime(int dostime)
   {
-    this.dostime = dostime;
-    known |= KNOWN_TIME;
+    int sec = 2 * (dostime & 0x1f);
+    int min = (dostime >> 5) & 0x3f;
+    int hrs = (dostime >> 11) & 0x1f;
+    int day = (dostime >> 16) & 0x1f;
+    int mon = ((dostime >> 21) & 0xf) - 1;
+    int year = ((dostime >> 25) & 0x7f) + 1980; /* since 1900 */
+    
+    // Guard against invalid or missing date causing
+    // IndexOutOfBoundsException.
+    try
+      {
+	synchronized (cal)
+	  {
+	    cal.set(year, mon, day, hrs, min, sec);
+	    time = (int) (cal.getTime().getTime() / 1000L);
+	  }
+	known |= KNOWN_TIME;
+      }
+    catch (RuntimeException ex)
+      {
+	/* Ignore illegal time stamp */
+	known &= ~KNOWN_TIME;
+      }
   }
 
-  final int getDOSTime()
+  int getDOSTime()
   {
     if ((known & KNOWN_TIME) == 0)
       return 0;
-    else
-      return dostime;
+    synchronized (cal)
+      {
+	cal.setTime(new Date(time*1000L));
+	return (cal.get(cal.YEAR) - 1980 & 0x7f) << 25
+	  | (cal.get(cal.MONTH) + 1) << 21
+	  | (cal.get(cal.DAY_OF_MONTH)) << 16
+	  | (cal.get(cal.HOUR_OF_DAY)) << 11
+	  | (cal.get(cal.MINUTE)) << 5
+	  | (cal.get(cal.SECOND)) >> 1;
+      }
   }
 
   /**
@@ -160,18 +190,7 @@
    */
   public void setTime(long time)
   {
-    Calendar cal = getCalendar();
-    synchronized (cal)
-      {
-	cal.setTime(new Date(time*1000L));
-	dostime = (cal.get(cal.YEAR) - 1980 & 0x7f) << 25
-	  | (cal.get(cal.MONTH) + 1) << 21
-	  | (cal.get(cal.DAY_OF_MONTH)) << 16
-	  | (cal.get(cal.HOUR_OF_DAY)) << 11
-	  | (cal.get(cal.MINUTE)) << 5
-	  | (cal.get(cal.SECOND)) >> 1;
-      }
-    dostime = (int) (dostime / 1000L);
+    this.time = (int) (time / 1000L);
     this.known |= KNOWN_TIME;
   }
 
@@ -181,39 +200,7 @@
    */
   public long getTime()
   {
-    if ((known & KNOWN_TIME) == 0)
-      return -1;
-    
-    int sec = 2 * (dostime & 0x1f);
-    int min = (dostime >> 5) & 0x3f;
-    int hrs = (dostime >> 11) & 0x1f;
-    int day = (dostime >> 16) & 0x1f;
-    int mon = ((dostime >> 21) & 0xf) - 1;
-    int year = ((dostime >> 25) & 0x7f) + 1980; /* since 1900 */
-   
-    try
-      {
-	cal = getCalendar();
-	synchronized (cal)
-	  {
-	    cal.set(year, mon, day, hrs, min, sec);
-	    return cal.getTime().getTime();
-	  }
-      }
-    catch (RuntimeException ex)
-      {
-	/* Ignore illegal time stamp */
-	known &= ~KNOWN_TIME;
-	return -1;
-      }
-  }
-
-  private static synchronized Calendar getCalendar()
-  {
-    if (cal == null)
-      cal = Calendar.getInstance();
-
-    return cal;
+    return (known & KNOWN_TIME) != 0 ? time * 1000L : -1;
   }
 
   /**
@@ -333,11 +320,11 @@
 		int flags = extra[pos];
 		if ((flags & 1) != 0)
 		  {
-		    long time = ((extra[pos+1] & 0xff)
+		    time = ((extra[pos+1] & 0xff)
 			    | (extra[pos+2] & 0xff) << 8
 			    | (extra[pos+3] & 0xff) << 16
 			    | (extra[pos+4] & 0xff) << 24);
-		    setTime(time);
+		    known |= KNOWN_TIME;
 		  }
 	      }
 	    pos += len;
