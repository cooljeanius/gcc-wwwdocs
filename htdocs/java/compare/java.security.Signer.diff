--- /home/tromey/gnu/egcs/classpath/classpath/java/security/Signer.java	Wed Mar 22 12:26:24 2000
+++ java/security/Signer.java	Wed Apr 25 09:45:12 2001
@@ -7,7 +7,7 @@
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2, or (at your option)
 any later version.
- 
+
 GNU Classpath is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
@@ -24,31 +24,32 @@
 This exception does not however invalidate any other reasons why the
 executable file might be covered by the GNU General Public License. */
 
-
 package java.security;
 
 /**
    Signer is a subclass used to store a digital signature key with 
    an Identity.
-   
+
    @author Mark Benvenuto <ivymccough@worldnet.att.net>
-   
+
    @since JDK 1.1
-*/
+ */
 public abstract class Signer extends Identity
 {
   private PrivateKey privateKey = null;
+
   /**
      Constructs a new Signer.
-  */
+   */
   protected Signer()
-  {}
+  {
+  }
 
   /**
      Constructs a new Signer with the specified name.
 
      @param name the name of the identity.
-  */
+   */
   public Signer(String name)
   {
     super(name);
@@ -63,11 +64,11 @@
 
      @throws KeyManagementException if duplicate identity name 
      within scope
-  */
+   */
   public Signer(String name, IdentityScope scope)
     throws KeyManagementException
   {
-    super( name, scope);
+    super(name, scope);
   }
 
   /**
@@ -80,12 +81,12 @@
 
      @throws SecurityException - if the security manager denies 
      access to "getSignerPrivateKey"
-  */
+   */
   public PrivateKey getPrivateKey()
   {
     SecurityManager sm = System.getSecurityManager();
-    if(sm != null)
-      sm.checkSecurityAccess( "getSignerPrivateKey" );
+    if (sm != null)
+      sm.checkSecurityAccess("getSignerPrivateKey");
 
     return privateKey;
   }
@@ -102,26 +103,29 @@
      @throws KeyException another key error
      @throws SecurityException - if the security manager denies 
      access to "getSignerPrivateKey"
-  */
+   */
   public final void setKeyPair(KeyPair pair)
     throws InvalidParameterException, KeyException
   {
     SecurityManager sm = System.getSecurityManager();
-    if(sm != null)
-      sm.checkSecurityAccess( "setSignerKeyPair" );
+    if (sm != null)
+      sm.checkSecurityAccess("setSignerKeyPair");
 
-    try {
-      if( pair.getPublic() != null)
-	setPublicKey( pair.getPublic() );
-      else
-	throw new InvalidParameterException();
-
-    } catch ( KeyManagementException kme ) {
-      throw new KeyException();
-    }
+    try
+      {
+	if (pair.getPublic() != null)
+	  setPublicKey(pair.getPublic());
+	else
+	  throw new InvalidParameterException();
+
+      }
+    catch (KeyManagementException kme)
+      {
+	throw new KeyException();
+      }
 
-    if( pair.getPrivate() != null)
-      privateKey = pair.getPrivate();
+    if (pair.getPrivate() != null)
+        privateKey = pair.getPrivate();
     else
       throw new InvalidParameterException();
   }
@@ -130,7 +134,7 @@
      Returns a string representing this Signer.
 
      @returns a string representing this Signer.
-  */
+   */
   public String toString()
   {
     return (getName() + ": " + privateKey);
