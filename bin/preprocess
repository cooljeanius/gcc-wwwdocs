#! /bin/sh
#
# This script takes a directory tree containing web pages (i.e., HTML,
# JPEG,... files) and copies it into another tree or generates a new
# tree.  If filenames are passed on the command-line, only those files
# are processed.
#
# HTML files are processed by means of MetaHTML using the style sheet
# $STYLE. HTML files in the destination tree are overwritten if and only if
# the new version is different from the old version modulo lines containing
# the string indicated by $IGNORE_DIFF_MARKER.
#
# When processing HTML files, the environment variable PREPROCESS_FILE
# is set to the name of the current file (relative to the document root)
# and can be accessed by MetaHTML commands.
#
# Files called .htaccess or .htpasswd are copied if the copy in the
# destination tree differs from the one in the source tree (or does
# not exist).
#
# GIF files are warned about and ignored; all other files are just copied.
#
# Command-line options:
#
#  -r   Remove cruft, i.e., files and directories that exist in the
#       target tree but not in the source tree from the former.
#
#  -v   Verbose output, especially concerning the -r option.
#
# As a special case for compatibility with existing installations, if
# there is no command-line parameter at all, we assume -r.
#
#
# By Gerald Pfeifer <pfeifer@dbai.tuwien.ac.at> 1999-12-29.

MHC=${MHC-/usr/local/bin/mhc}

SOURCETREE=${SOURCETREE-/www/gcc/htdocs-preformatted}
DESTTREE=${DESTTREE-/www/gcc/htdocs}

STYLE=$SOURCETREE/style.mhtml
IGNORE_DIFF_MARKER="IGNORE DIFF"

##########
# Exit handler. Good guys clean after them.

TMPDIR=/tmp/`basename $0`.$$

cleanup() {
    rm -rf $TMPDIR $1
}

trap "cleanup; exit 1" 1 2 15 

##########
# Procedure: Remove old cruft from the destination tree.

remove_cruft() {
    cd $DESTTREE

    for f in `find . -name onlinedocs -prune -o -type f -print` ; do
	if [ ! -f $SOURCETREE/$f ]; then
	    echo "Removing obsolete file $f"
	    rm -f $f
	fi
    done

    for d in `find . -type d` ; do
        if [ -z "`ls $d`" ]; then
            echo "Removing obsolete empty directory $d"
            rmdir $d
        fi
    done
}

########
# Procedure: Process a single file.

copy_if_different()
{
    s=$1
    d=$2

    if [ ! -f $d ]; then
        echo "  New file $s"
        cp $s $d
    else
        cmp $s $d >/dev/null
        if [ $? -eq 1 ]; then
            echo "  Copying $s";
            cp $s $d
        fi
    fi
}

########
# Procedure: Process a single HTML-based file.

process_html_file()
{
    f=$1
    fdest=$2

    # Set environment variable PREPROCESS_FILE, which will then be
    # accessible by MetaHTML.

    PREPROCESS_FILE=$f
    export PREPROCESS_FILE

    # Prepend the MetaHTML style, set the MetaHTML include directory,
    # and process the page.

    cat $STYLE > $TMPDIR/input
    printf '<set-var MHTML::INCLUDE-PREFIX="%s">\n' `pwd` >> $TMPDIR/input
    cat $f >> $TMPDIR/input

    if ! ${MHC} $TMPDIR/input > $TMPDIR/output.raw; then
        echo "${MHC} failed; aborting."
        exit 1
    fi

    # Use sed to work around makeinfo 4.7 brokenness.
    # Use sed to work around MetaHTML brokenness wrt. <DIV>.
    # Then remove leading blank lines and single line comments.
    cat $TMPDIR/output.raw \
        | sed -e 's/_002d/-/g' -e 's/_002a/*/g' \
        | sed -e 's/<DIV/<div/g' \
        | awk -- \
          '/^( *)?$/      { if( ! body ) next } \
           /^<!--.*-->$/  { if( ! body ) next } \
           /.*/           { body=1; print $0 }' \
        > $TMPDIR/output

    # Copy the page only if it's new or there has been a change, and,
    # first of all, if there was no problem when running MetaHTML.
    if [ $? -ne 0 ]; then
        echo "  Problem processing $f; not updated!"
    elif [ ! -f $fdest ]; then
        echo "  New file $fdest"
        cp $TMPDIR/output $fdest
    else
        diff -I "$IGNORE_DIFF_MARKER" \
             $TMPDIR/output $fdest >/dev/null
        if [ $? -ne 0 ]; then
            echo "  Updating $fdest"
            rm -f "$fdest"
            cp $TMPDIR/output $fdest
        fi
    fi
}


process_file()
{
    # Strip possibly leading "./".
    f=`echo $1 | sed -e 's#^\./##'`

    if [ ! -f "$SOURCETREE/$f" ]; then
        echo "Input file $f not found."
        return
    fi

    if [ ! -d "$DESTTREE/`dirname $f`" ]; then
        echo "Creating new directory `dirname $f`."
        mkdir -p $DESTTREE/`dirname $f`
    fi

    case $f in
        */.git|*\.gitignore)
            ;;
        *\.ihtml|*\.mhtml)
            ;;

        # Treat the following files as "binary" and simply copy them
        # whenever they do not already exist in the destination tree
        # or when the copies in the source and destination trees differ.
        *\.htaccess|*\.htpasswd)
            copy_if_different $f $DESTTREE/$f
            ;;
        *\.css|*\.tmpl|*\.php|*\.js)
            copy_if_different $f $DESTTREE/$f
            ;;
        *\.jpg|*\.jpeg|*\.png|*\.svg|*\.ico)
            copy_if_different $f $DESTTREE/$f
            ;;
        *\.asc|*\.txt|*\.ps|*\.ps\.gz|*\.pdf|*\.patch|*\.diff)
            copy_if_different $f $DESTTREE/$f
            ;;
        java/papers/*\.html)
            copy_if_different $f $DESTTREE/$f
            ;;
        */bzkanban/*) # verbatim copy
            copy_if_different $f $DESTTREE/$f
            ;;
        *\.html)
            process_html_file $f $DESTTREE/$f
            ;;
        */ChangeLog|*\.gif|*/\.#*)
            echo "  Warning: $f ignored."
            ;;
        *)
            echo "  Warning: Unknown type $f; just copied."
            cp $f $DESTTREE/$f      
            ;;
    esac
}

########
# Main: This is where executions starts.

## First of all, process command-line options. As a special case for
#  compatibility with existing installations, if there is no command-line
#  parameter at all, we assume -r.

if [ $# = 0 ]; then
    REMOVE_CRUFT=true
fi

while getopts "rv" ARG; do
    case $ARG in
        r)    REMOVE_CRUFT=true;;
        v)    VERBOSE=true;;
        \?)   echo "Invalid command-line option"; exit 1;;
    esac
done   
shift `expr ${OPTIND} - 1`

## Various safety checks.

if ! ${MHC} --version >/dev/null; then
    echo "Something does not look right with \"${MHC}\"; aborting."
    exit 1
fi

if [ ! -d $SOURCETREE ]; then
    echo "Source tree \"$SOURCETREE\" does not exist."
    exit 1
fi

if [ ! -d $DESTTREE ]; then
    echo "Destination tree \"$DESTTREE\" does not exist."
    exit 1
fi

## And now the real stuff.

mkdir $TMPDIR

cd $SOURCETREE

if [ $# -gt 0 ]; then
    for f in "$@" ; do
        process_file $f
    done
else 
    # Process all files in the source tree, excluding files/directories
    # called .git.
    for f in `find . \( -name .git -prune \) -o -type f -print` ; do
        process_file $f
    done
fi

if [ -n "$REMOVE_CRUFT" ]; then
    echo "Removing obsolete files in $DESTTREE."
    remove_cruft
fi

# Get a clean exit status on success.
cleanup
exit 0
