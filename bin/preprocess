#!/bin/sh
#
# This script takes a directory tree containing web pages (i.e., HTML,
# JPEG,... files) and copies it into another tree or generates a new
# tree.  If filenames are passed on the command-line, only those files
# are processed.
#
# HTML files are processed by means of MetaHTML, binary files are just
# copied, and GIF files are warned about and ignored.
#
# Command-line options:
#
#  -r   Remove cruft, i.e., files and directories that exist in the
#       target tree but not in the source tree from the former.
#
# As a special case for compatibility with existing installations, if
# there is no command-line parameter at all, we assume -r.

# By Gerald Pfeifer <pfeifer@dbai.tuwien.ac.at> 1999-12-29.

MHC=${MHC-/usr/local/bin/mhc}

SOURCETREE=${SOURCETREE-/www/gcc/htdocs-preformatted}
DESTTREE=${DESTTREE-/www/gcc/htdocs}

STYLE=$SOURCETREE/style.mhtml

##########
# Exit handler. Good guys clean after them.

TMPDIR=/tmp/`basename $0`.$$

cleanup() {
    rm -rf $TMPDIR $1
}

trap "cleanup; exit 1" 1 2 15 

##########
# Procedure: Remove old cruft from the destination tree.

remove_cruft() {
    cd $DESTTREE

    for f in `find . -type f` ; do
        d=`dirname $f`
        case $d in
            ./onlinedocs*|./benchresults*|./testresults*|./fom_serv*)
                echo "  Warning: Keeping $f";
                ;;
            *)
                if [ ! -f $SOURCETREE/$f ]; then
                    echo "Removing obsolete file $f"
                    rm -f $f
                fi
                ;;
        esac
    done

    for d in `find . -type d` ; do
        if [ -z "`ls $d`" ]; then
            echo "Removing obsolete empty directory $d"
            rmdir $d
        fi
    done
}

########
# Procedure: Process a single file.

copy_if_different()
{
    s=$1
    d=$2

    if [ ! -f $d ]; then
        echo "  New file $s"
        cp $s $d
    else
        cmp $s $d >/dev/null
        if [ $? -eq 1 ]; then
            echo "  Copying $s";
            cp $s $d
        fi
    fi
}

process_file()
{
    f=$1

    if [ ! -d "$DESTTREE/`dirname $f`" ]; then
        echo "Creating new directory `dirname $f`."
        mkdir -p $DESTTREE/`dirname $f`
    fi

    case $f in
        */CVS|*/\.cvsignore)
            ;;
        *egcs-1.?/*)
            copy_if_different $f $DESTTREE/$f
            ;;
        *\.txt|*\.ps|*\.ps\.gz|*\.pdf|*\.jpg|*\.jpeg|*\.png|*\.patch)
            copy_if_different $f $DESTTREE/$f
            ;;
        *.html)
            # Prepend the MetaHTML style and process the page.
            cat $STYLE $f > $TMPDIR/input
            ${MHC} $TMPDIR/input > $TMPDIR/output

            # Copy the page only if it's new or there has been a change.
            if [ ! -f $DESTTREE/$f ]; then
                echo "  New file $f"
                cp $TMPDIR/output $DESTTREE/$f
            else
                diff $TMPDIR/output $DESTTREE/$f >/dev/null
                if [ $? -ne 0 ]; then
                    echo "  Updating $f"
                    cp $TMPDIR/output $DESTTREE/$f
                fi
            fi
            ;;
        */ChangeLog|*\.gif|*/\.#*)
            echo "  Warning: $f ignored."
            ;;
        *)
            echo "  Warning: Unknown type $f; just copied."
            cp $f $DESTTREE/$f      
            ;;
    esac
}

########
# Main: This is where executions starts.

## First of all,  process command-line options. As a special case for
#  compatibility with existing installations, if there is no command-line
#  parameter at all, we assume -r.

if [ $# = 0 ]; then
    REMOVE_CRUFT=true
fi

while getopts "r" ARG; do
    case $ARG in
        r)    REMOVE_CRUFT=true;;
        \?)   echo "Invalid command-line option"; exit 1;;
    esac
done   
shift `expr ${OPTIND} - 1`

## Various safety checks.

if [ ! -d $SOURCETREE ]; then
    echo "Source tree \"$SOURCETREE\" does not exist."
    exit 1
fi

if [ ! -d $DESTTREE ]; then
    echo "Destination tree \"$DESTTREE\" does not exist."
    exit 1
fi

## And now the real stuff.

mkdir $TMPDIR

cd $SOURCETREE

if [ $# -gt 0 ]; then
    for f in "$@" ; do
        process_file $f
    done
else 
    # Process all files in the source tree, excluding files/directories
    # called CVS.
    for f in `find . \( -name CVS -prune \) -o -type f` ; do
        process_file $f
    done
fi

if [ -n "$REMOVE_CRUFT" ]; then
    remove_cruft
fi

# Get a clean exit status on success.
cleanup
exit 0
